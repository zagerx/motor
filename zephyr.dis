
build/zephyr/zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 22 00 24 3d 2c 00 08 51 27 00 08 29 2c 00 08     .".$=,..Q'..),..
 8000010:	29 2c 00 08 29 2c 00 08 29 2c 00 08 00 00 00 00     ),..),..),......
	...
 800002c:	31 2d 00 08 29 2c 00 08 00 00 00 00 95 2c 00 08     1-..),.......,..
 800003c:	2d 3f 00 08                                         -?..

08000040 <_irq_vector_table>:
 8000040:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000050:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000060:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000070:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000080:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000090:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80000a0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80000b0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80000c0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80000d0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80000e0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80000f0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000100:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000110:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000120:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000130:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000140:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000150:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000160:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000170:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000180:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000190:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80001a0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80001b0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80001c0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80001d0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80001e0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80001f0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000200:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000210:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000220:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000230:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000240:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000250:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000260:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000270:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000280:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 8000290:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80002a0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80002b0:	71 2f 00 08 71 2f 00 08 71 2f 00 08 71 2f 00 08     q/..q/..q/..q/..
 80002c0:	71 2f 00 08 71 2f 00 08 71 2f 00 08                 q/..q/..q/..

Disassembly of section text:

080002cc <__aeabi_uldivmod>:
 80002cc:	b953      	cbnz	r3, 80002e4 <__aeabi_uldivmod+0x18>
 80002ce:	b94a      	cbnz	r2, 80002e4 <__aeabi_uldivmod+0x18>
 80002d0:	2900      	cmp	r1, #0
 80002d2:	bf08      	it	eq
 80002d4:	2800      	cmpeq	r0, #0
 80002d6:	bf1c      	itt	ne
 80002d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e0:	f000 b80c 	b.w	80002fc <__aeabi_idiv0>
 80002e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ec:	f000 f810 	bl	8000310 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4770      	bx	lr

080002fc <__aeabi_idiv0>:
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	4686      	mov	lr, r0
 8000316:	468c      	mov	ip, r1
 8000318:	4608      	mov	r0, r1
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	4615      	mov	r5, r2
 800031e:	4674      	mov	r4, lr
 8000320:	4619      	mov	r1, r3
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 80c2 	bne.w	80004ac <__udivmoddi4+0x19c>
 8000328:	4285      	cmp	r5, r0
 800032a:	fab2 f282 	clz	r2, r2
 800032e:	d945      	bls.n	80003bc <__udivmoddi4+0xac>
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x36>
 8000332:	f1c2 0320 	rsb	r3, r2, #32
 8000336:	fa00 fc02 	lsl.w	ip, r0, r2
 800033a:	fa2e f303 	lsr.w	r3, lr, r3
 800033e:	4095      	lsls	r5, r2
 8000340:	ea43 0c0c 	orr.w	ip, r3, ip
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	b2a8      	uxth	r0, r5
 800034c:	fbbc f8fe 	udiv	r8, ip, lr
 8000350:	0c23      	lsrs	r3, r4, #16
 8000352:	fb0e cc18 	mls	ip, lr, r8, ip
 8000356:	fb08 f900 	mul.w	r9, r8, r0
 800035a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800035e:	4599      	cmp	r9, r3
 8000360:	d928      	bls.n	80003b4 <__udivmoddi4+0xa4>
 8000362:	18eb      	adds	r3, r5, r3
 8000364:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000368:	d204      	bcs.n	8000374 <__udivmoddi4+0x64>
 800036a:	4599      	cmp	r9, r3
 800036c:	d902      	bls.n	8000374 <__udivmoddi4+0x64>
 800036e:	f1a8 0702 	sub.w	r7, r8, #2
 8000372:	442b      	add	r3, r5
 8000374:	eba3 0309 	sub.w	r3, r3, r9
 8000378:	b2a4      	uxth	r4, r4
 800037a:	fbb3 fcfe 	udiv	ip, r3, lr
 800037e:	fb0e 331c 	mls	r3, lr, ip, r3
 8000382:	fb0c f000 	mul.w	r0, ip, r0
 8000386:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038a:	42a0      	cmp	r0, r4
 800038c:	d914      	bls.n	80003b8 <__udivmoddi4+0xa8>
 800038e:	192c      	adds	r4, r5, r4
 8000390:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000394:	d204      	bcs.n	80003a0 <__udivmoddi4+0x90>
 8000396:	42a0      	cmp	r0, r4
 8000398:	d902      	bls.n	80003a0 <__udivmoddi4+0x90>
 800039a:	f1ac 0302 	sub.w	r3, ip, #2
 800039e:	442c      	add	r4, r5
 80003a0:	1a24      	subs	r4, r4, r0
 80003a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	6034      	str	r4, [r6, #0]
 80003ae:	6073      	str	r3, [r6, #4]
 80003b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b4:	4647      	mov	r7, r8
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0x64>
 80003b8:	4663      	mov	r3, ip
 80003ba:	e7f1      	b.n	80003a0 <__udivmoddi4+0x90>
 80003bc:	bb92      	cbnz	r2, 8000424 <__udivmoddi4+0x114>
 80003be:	1b43      	subs	r3, r0, r5
 80003c0:	2101      	movs	r1, #1
 80003c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c6:	b2af      	uxth	r7, r5
 80003c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003cc:	0c20      	lsrs	r0, r4, #16
 80003ce:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d2:	fb0c f807 	mul.w	r8, ip, r7
 80003d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003da:	4598      	cmp	r8, r3
 80003dc:	d962      	bls.n	80004a4 <__udivmoddi4+0x194>
 80003de:	18eb      	adds	r3, r5, r3
 80003e0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e4:	d204      	bcs.n	80003f0 <__udivmoddi4+0xe0>
 80003e6:	4598      	cmp	r8, r3
 80003e8:	d902      	bls.n	80003f0 <__udivmoddi4+0xe0>
 80003ea:	f1ac 0002 	sub.w	r0, ip, #2
 80003ee:	442b      	add	r3, r5
 80003f0:	eba3 0308 	sub.w	r3, r3, r8
 80003f4:	b2a4      	uxth	r4, r4
 80003f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fa:	fb0e 331c 	mls	r3, lr, ip, r3
 80003fe:	fb0c f707 	mul.w	r7, ip, r7
 8000402:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000406:	42a7      	cmp	r7, r4
 8000408:	d94e      	bls.n	80004a8 <__udivmoddi4+0x198>
 800040a:	192c      	adds	r4, r5, r4
 800040c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000410:	d204      	bcs.n	800041c <__udivmoddi4+0x10c>
 8000412:	42a7      	cmp	r7, r4
 8000414:	d902      	bls.n	800041c <__udivmoddi4+0x10c>
 8000416:	f1ac 0302 	sub.w	r3, ip, #2
 800041a:	442c      	add	r4, r5
 800041c:	1be4      	subs	r4, r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	e7c0      	b.n	80003a6 <__udivmoddi4+0x96>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	4095      	lsls	r5, r2
 800042e:	4090      	lsls	r0, r2
 8000430:	fa2e f303 	lsr.w	r3, lr, r3
 8000434:	4303      	orrs	r3, r0
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	b2af      	uxth	r7, r5
 800043c:	fbb1 fcfe 	udiv	ip, r1, lr
 8000440:	fb0e 101c 	mls	r0, lr, ip, r1
 8000444:	0c19      	lsrs	r1, r3, #16
 8000446:	fb0c f807 	mul.w	r8, ip, r7
 800044a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800044e:	4588      	cmp	r8, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d922      	bls.n	800049c <__udivmoddi4+0x18c>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045c:	d204      	bcs.n	8000468 <__udivmoddi4+0x158>
 800045e:	4588      	cmp	r8, r1
 8000460:	d902      	bls.n	8000468 <__udivmoddi4+0x158>
 8000462:	f1ac 0002 	sub.w	r0, ip, #2
 8000466:	4429      	add	r1, r5
 8000468:	eba1 0108 	sub.w	r1, r1, r8
 800046c:	b29b      	uxth	r3, r3
 800046e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000472:	fb0e 111c 	mls	r1, lr, ip, r1
 8000476:	fb0c f707 	mul.w	r7, ip, r7
 800047a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047e:	429f      	cmp	r7, r3
 8000480:	d90e      	bls.n	80004a0 <__udivmoddi4+0x190>
 8000482:	18eb      	adds	r3, r5, r3
 8000484:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000488:	d204      	bcs.n	8000494 <__udivmoddi4+0x184>
 800048a:	429f      	cmp	r7, r3
 800048c:	d902      	bls.n	8000494 <__udivmoddi4+0x184>
 800048e:	f1ac 0102 	sub.w	r1, ip, #2
 8000492:	442b      	add	r3, r5
 8000494:	1bdb      	subs	r3, r3, r7
 8000496:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049a:	e792      	b.n	80003c2 <__udivmoddi4+0xb2>
 800049c:	4660      	mov	r0, ip
 800049e:	e7e3      	b.n	8000468 <__udivmoddi4+0x158>
 80004a0:	4661      	mov	r1, ip
 80004a2:	e7f7      	b.n	8000494 <__udivmoddi4+0x184>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0xe0>
 80004a8:	4663      	mov	r3, ip
 80004aa:	e7b7      	b.n	800041c <__udivmoddi4+0x10c>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d906      	bls.n	80004be <__udivmoddi4+0x1ae>
 80004b0:	b916      	cbnz	r6, 80004b8 <__udivmoddi4+0x1a8>
 80004b2:	2100      	movs	r1, #0
 80004b4:	4608      	mov	r0, r1
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0xa0>
 80004b8:	e9c6 e000 	strd	lr, r0, [r6]
 80004bc:	e7f9      	b.n	80004b2 <__udivmoddi4+0x1a2>
 80004be:	fab3 f783 	clz	r7, r3
 80004c2:	b98f      	cbnz	r7, 80004e8 <__udivmoddi4+0x1d8>
 80004c4:	4283      	cmp	r3, r0
 80004c6:	d301      	bcc.n	80004cc <__udivmoddi4+0x1bc>
 80004c8:	4572      	cmp	r2, lr
 80004ca:	d808      	bhi.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	ebbe 0402 	subs.w	r4, lr, r2
 80004d0:	eb60 0303 	sbc.w	r3, r0, r3
 80004d4:	2001      	movs	r0, #1
 80004d6:	469c      	mov	ip, r3
 80004d8:	b91e      	cbnz	r6, 80004e2 <__udivmoddi4+0x1d2>
 80004da:	2100      	movs	r1, #0
 80004dc:	e768      	b.n	80003b0 <__udivmoddi4+0xa0>
 80004de:	4638      	mov	r0, r7
 80004e0:	e7fa      	b.n	80004d8 <__udivmoddi4+0x1c8>
 80004e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80004e6:	e7f8      	b.n	80004da <__udivmoddi4+0x1ca>
 80004e8:	f1c7 0c20 	rsb	ip, r7, #32
 80004ec:	40bb      	lsls	r3, r7
 80004ee:	fa22 f40c 	lsr.w	r4, r2, ip
 80004f2:	431c      	orrs	r4, r3
 80004f4:	fa2e f10c 	lsr.w	r1, lr, ip
 80004f8:	fa20 f30c 	lsr.w	r3, r0, ip
 80004fc:	40b8      	lsls	r0, r7
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000504:	fa0e f507 	lsl.w	r5, lr, r7
 8000508:	fbb3 f8f9 	udiv	r8, r3, r9
 800050c:	fa1f fe84 	uxth.w	lr, r4
 8000510:	fb09 3018 	mls	r0, r9, r8, r3
 8000514:	0c0b      	lsrs	r3, r1, #16
 8000516:	fb08 fa0e 	mul.w	sl, r8, lr
 800051a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800051e:	459a      	cmp	sl, r3
 8000520:	fa02 f207 	lsl.w	r2, r2, r7
 8000524:	d940      	bls.n	80005a8 <__udivmoddi4+0x298>
 8000526:	18e3      	adds	r3, r4, r3
 8000528:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800052c:	d204      	bcs.n	8000538 <__udivmoddi4+0x228>
 800052e:	459a      	cmp	sl, r3
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x228>
 8000532:	f1a8 0002 	sub.w	r0, r8, #2
 8000536:	4423      	add	r3, r4
 8000538:	eba3 030a 	sub.w	r3, r3, sl
 800053c:	b289      	uxth	r1, r1
 800053e:	fbb3 f8f9 	udiv	r8, r3, r9
 8000542:	fb09 3318 	mls	r3, r9, r8, r3
 8000546:	fb08 fe0e 	mul.w	lr, r8, lr
 800054a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054e:	458e      	cmp	lr, r1
 8000550:	d92c      	bls.n	80005ac <__udivmoddi4+0x29c>
 8000552:	1861      	adds	r1, r4, r1
 8000554:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000558:	d204      	bcs.n	8000564 <__udivmoddi4+0x254>
 800055a:	458e      	cmp	lr, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x254>
 800055e:	f1a8 0302 	sub.w	r3, r8, #2
 8000562:	4421      	add	r1, r4
 8000564:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000568:	fba0 9802 	umull	r9, r8, r0, r2
 800056c:	eba1 010e 	sub.w	r1, r1, lr
 8000570:	4541      	cmp	r1, r8
 8000572:	46ce      	mov	lr, r9
 8000574:	4643      	mov	r3, r8
 8000576:	d302      	bcc.n	800057e <__udivmoddi4+0x26e>
 8000578:	d106      	bne.n	8000588 <__udivmoddi4+0x278>
 800057a:	454d      	cmp	r5, r9
 800057c:	d204      	bcs.n	8000588 <__udivmoddi4+0x278>
 800057e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000582:	eb68 0304 	sbc.w	r3, r8, r4
 8000586:	3801      	subs	r0, #1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d0a6      	beq.n	80004da <__udivmoddi4+0x1ca>
 800058c:	ebb5 020e 	subs.w	r2, r5, lr
 8000590:	eb61 0103 	sbc.w	r1, r1, r3
 8000594:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000598:	fa22 f307 	lsr.w	r3, r2, r7
 800059c:	ea4c 0303 	orr.w	r3, ip, r3
 80005a0:	40f9      	lsrs	r1, r7
 80005a2:	e9c6 3100 	strd	r3, r1, [r6]
 80005a6:	e798      	b.n	80004da <__udivmoddi4+0x1ca>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7c5      	b.n	8000538 <__udivmoddi4+0x228>
 80005ac:	4643      	mov	r3, r8
 80005ae:	e7d9      	b.n	8000564 <__udivmoddi4+0x254>

080005b0 <currsmp_shunt_stm32_get_currents>:
	data->regulation_ctx = ctx;
}

void currsmp_shunt_stm32_get_currents(const struct device *dev,
					     struct currsmp_curr *curr)
{
 80005b0:	b510      	push	{r4, lr}
    // return;
	const struct currsmp_shunt_stm32_config *cfg = dev->config;
 80005b2:	6844      	ldr	r4, [r0, #4]
	struct currsmp_shunt_stm32_data *data = dev->data;
 80005b4:	6902      	ldr	r2, [r0, #16]
    data->adc_channl_a = LL_ADC_INJ_ReadConversionData12(cfg->adc, LL_ADC_INJ_RANK_1);
 80005b6:	6823      	ldr	r3, [r4, #0]
    data->adc_channl_b = LL_ADC_INJ_ReadConversionData12(cfg->adc, LL_ADC_INJ_RANK_2);
    data->adc_channl_c = LL_ADC_INJ_ReadConversionData12(cfg->adc, LL_ADC_INJ_RANK_3);

	curr->i_a = (float)data->adc_channl_a / (2048);
 80005b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800060c <currsmp_shunt_stm32_get_currents+0x5c>
  */
__STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(const ADC_TypeDef *ADCx, uint32_t Rank)
{
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK) >> ADC_JDRX_REGOFFSET_POS));

  return (uint16_t)(READ_BIT(*preg,
 80005bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005c0:	b29b      	uxth	r3, r3
    data->adc_channl_a = LL_ADC_INJ_ReadConversionData12(cfg->adc, LL_ADC_INJ_RANK_1);
 80005c2:	6093      	str	r3, [r2, #8]
	curr->i_a = (float)data->adc_channl_a / (2048);
 80005c4:	ee07 3a90 	vmov	s15, r3
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK) >> ADC_JDRX_REGOFFSET_POS));
 80005c8:	6820      	ldr	r0, [r4, #0]
 80005ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return (uint16_t)(READ_BIT(*preg,
 80005ce:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    data->adc_channl_b = LL_ADC_INJ_ReadConversionData12(cfg->adc, LL_ADC_INJ_RANK_2);
 80005d2:	b280      	uxth	r0, r0
	curr->i_a = (float)data->adc_channl_a / (2048);
 80005d4:	ee67 7a87 	vmul.f32	s15, s15, s14
    data->adc_channl_b = LL_ADC_INJ_ReadConversionData12(cfg->adc, LL_ADC_INJ_RANK_2);
 80005d8:	60d0      	str	r0, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK) >> ADC_JDRX_REGOFFSET_POS));
 80005da:	6820      	ldr	r0, [r4, #0]
  return (uint16_t)(READ_BIT(*preg,
 80005dc:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    data->adc_channl_c = LL_ADC_INJ_ReadConversionData12(cfg->adc, LL_ADC_INJ_RANK_3);
 80005e0:	b280      	uxth	r0, r0
 80005e2:	6110      	str	r0, [r2, #16]
	curr->i_a = (float)data->adc_channl_a / (2048);
 80005e4:	edc1 7a00 	vstr	s15, [r1]
	curr->i_b = (float)data->adc_channl_a / (2048);
 80005e8:	edd2 7a02 	vldr	s15, [r2, #8]
 80005ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f4:	edc1 7a01 	vstr	s15, [r1, #4]
	curr->i_c = (float)data->adc_channl_a / (2048);
 80005f8:	edd2 7a02 	vldr	s15, [r2, #8]
 80005fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000604:	edc1 7a02 	vstr	s15, [r1, #8]
}
 8000608:	bd10      	pop	{r4, pc}
 800060a:	bf00      	nop
 800060c:	3a000000 	.word	0x3a000000

08000610 <adc_stm32_isr_18>:

/* only generate isr code once */
#define GENERATE_ISR(n)							\
	COND_CODE_1(IS_EQ(n, FIRST_WITH_IRQN(n)), (GENERATE_ISR_CODE(n)), (EMPTY))

DT_INST_FOREACH_STATUS_OKAY(GENERATE_ISR)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <adc_stm32_isr_18+0x14>)
 8000612:	b508      	push	{r3, lr}
 8000614:	f006 fac5 	bl	8006ba2 <adc_stm32_isr>
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <adc_stm32_isr_18+0x18>)
 800061a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800061e:	f006 bac0 	b.w	8006ba2 <adc_stm32_isr>
 8000622:	bf00      	nop
 8000624:	0800869c 	.word	0x0800869c
 8000628:	08008688 	.word	0x08008688

0800062c <LL_ADC_SetChannelPreselection>:
    if (ADCx != ADC3)
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <LL_ADC_SetChannelPreselection+0x28>)
 800062e:	4298      	cmp	r0, r3
 8000630:	d008      	beq.n	8000644 <LL_ADC_SetChannelPreselection+0x18>
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8000632:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8000636:	b933      	cbnz	r3, 8000646 <LL_ADC_SetChannelPreselection+0x1a>
 8000638:	0e89      	lsrs	r1, r1, #26
 800063a:	2301      	movs	r3, #1
 800063c:	69c2      	ldr	r2, [r0, #28]
 800063e:	408b      	lsls	r3, r1
 8000640:	4313      	orrs	r3, r2
 8000642:	61c3      	str	r3, [r0, #28]
}
 8000644:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000646:	fa91 f1a1 	rbit	r1, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800064a:	fab1 f181 	clz	r1, r1
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800064e:	f001 011f 	and.w	r1, r1, #31
 8000652:	e7f2      	b.n	800063a <LL_ADC_SetChannelPreselection+0xe>
 8000654:	58026000 	.word	0x58026000

08000658 <LL_ADC_SetChannelSingleDiff.constprop.0>:
  if (ADCx == ADC3)
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <LL_ADC_SetChannelSingleDiff.constprop.0+0x28>)
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800065a:	f3c1 0113 	ubfx	r1, r1, #0, #20
  if (ADCx == ADC3)
 800065e:	4298      	cmp	r0, r3
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8000660:	ea6f 0101 	mvn.w	r1, r1
  if (ADCx == ADC3)
 8000664:	d105      	bne.n	8000672 <LL_ADC_SetChannelSingleDiff.constprop.0+0x1a>
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8000666:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 800066a:	4019      	ands	r1, r3
 800066c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
}
 8000670:	4770      	bx	lr
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8000672:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8000676:	400b      	ands	r3, r1
 8000678:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	58026000 	.word	0x58026000

08000684 <currsmp_shunt_stm32_init>:
{
 8000684:	b570      	push	{r4, r5, r6, lr}
    const struct currsmp_shunt_stm32_config *cfg = dev->config;
 8000686:	6844      	ldr	r4, [r0, #4]
{
 8000688:	b092      	sub	sp, #72	; 0x48
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800068a:	489b      	ldr	r0, [pc, #620]	; (80008f8 <currsmp_shunt_stm32_init+0x274>)
 800068c:	1d21      	adds	r1, r4, #4
 800068e:	6883      	ldr	r3, [r0, #8]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4798      	blx	r3
    if (ret < 0) {
 8000694:	2800      	cmp	r0, #0
 8000696:	f2c0 8122 	blt.w	80008de <currsmp_shunt_stm32_init+0x25a>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800069a:	aa0c      	add	r2, sp, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	68e0      	ldr	r0, [r4, #12]
 80006a0:	f007 fa39 	bl	8007b16 <pinctrl_lookup_state>
	if (ret < 0) {
 80006a4:	2800      	cmp	r0, #0
 80006a6:	f2c0 811a 	blt.w	80008de <currsmp_shunt_stm32_init+0x25a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80006aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80006ac:	2200      	movs	r2, #0
 80006ae:	7919      	ldrb	r1, [r3, #4]
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	f003 f95d 	bl	8003970 <pinctrl_configure_pins>
    if (ret < 0) {
 80006b6:	2800      	cmp	r0, #0
 80006b8:	f2c0 8111 	blt.w	80008de <currsmp_shunt_stm32_init+0x25a>
    LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80006bc:	2500      	movs	r5, #0
    LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80006be:	2218      	movs	r2, #24
 80006c0:	a80c      	add	r0, sp, #48	; 0x30
 80006c2:	4629      	mov	r1, r5
    LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80006c4:	9503      	str	r5, [sp, #12]
 80006c6:	e9cd 5501 	strd	r5, r5, [sp, #4]
    LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80006ca:	f007 fcfa 	bl	80080c2 <memset>
    LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80006ce:	2210      	movs	r2, #16
 80006d0:	4629      	mov	r1, r5
 80006d2:	eb0d 0002 	add.w	r0, sp, r2
 80006d6:	f007 fcf4 	bl	80080c2 <memset>
    LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80006da:	2210      	movs	r2, #16
 80006dc:	4629      	mov	r1, r5
 80006de:	a808      	add	r0, sp, #32
 80006e0:	f007 fcef 	bl	80080c2 <memset>
    LL_ADC_SetOverSamplingScope(cfg->adc, LL_ADC_OVS_DISABLE);
 80006e4:	6822      	ldr	r2, [r4, #0]
    LL_ADC_Init(cfg->adc, &ADC_InitStruct);
 80006e6:	a901      	add	r1, sp, #4
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80006e8:	6913      	ldr	r3, [r2, #16]
 80006ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006ee:	f023 0303 	bic.w	r3, r3, #3
 80006f2:	6113      	str	r3, [r2, #16]
    ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80006f4:	2308      	movs	r3, #8
 80006f6:	9301      	str	r3, [sp, #4]
    LL_ADC_Init(cfg->adc, &ADC_InitStruct);
 80006f8:	6820      	ldr	r0, [r4, #0]
 80006fa:	f003 fda1 	bl	8004240 <LL_ADC_Init>
    ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80006fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 8000702:	950e      	str	r5, [sp, #56]	; 0x38
    LL_ADC_REG_Init(cfg->adc, &ADC_REG_InitStruct);
 8000704:	a90c      	add	r1, sp, #48	; 0x30
    ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000706:	930f      	str	r3, [sp, #60]	; 0x3c
    ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800070c:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
    ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000710:	9311      	str	r3, [sp, #68]	; 0x44
    LL_ADC_REG_Init(cfg->adc, &ADC_REG_InitStruct);
 8000712:	6820      	ldr	r0, [r4, #0]
 8000714:	f003 fdc2 	bl	800429c <LL_ADC_REG_Init>
    if(!cfg->slave_mode_flag)
 8000718:	6923      	ldr	r3, [r4, #16]
 800071a:	2b00      	cmp	r3, #0
 800071c:	f040 80e3 	bne.w	80008e6 <currsmp_shunt_stm32_init+0x262>
        ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_DUAL_INJ_SIMULT;
 8000720:	2305      	movs	r3, #5
 8000722:	f44f 2000 	mov.w	r0, #524288	; 0x80000
        LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(cfg->adc), &ADC_CommonInitStruct);
 8000726:	4a75      	ldr	r2, [pc, #468]	; (80008fc <currsmp_shunt_stm32_init+0x278>)
        ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_DUAL_INJ_SIMULT;
 8000728:	e9cd 0304 	strd	r0, r3, [sp, #16]
        ADC_CommonInitStruct.MultiTwoSamplingDelay = LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5;
 800072c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000730:	9307      	str	r3, [sp, #28]
        LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(cfg->adc), &ADC_CommonInitStruct);
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	4293      	cmp	r3, r2
 8000736:	f000 80d4 	beq.w	80008e2 <currsmp_shunt_stm32_init+0x25e>
 800073a:	4971      	ldr	r1, [pc, #452]	; (8000900 <currsmp_shunt_stm32_init+0x27c>)
 800073c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000740:	4870      	ldr	r0, [pc, #448]	; (8000904 <currsmp_shunt_stm32_init+0x280>)
 8000742:	428b      	cmp	r3, r1
 8000744:	bf08      	it	eq
 8000746:	4610      	moveq	r0, r2
 8000748:	a904      	add	r1, sp, #16
 800074a:	f003 fd4d 	bl	80041e8 <LL_ADC_CommonInit>
        ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 800074e:	2302      	movs	r3, #2
 8000750:	2184      	movs	r1, #132	; 0x84
 8000752:	e9cd 1308 	strd	r1, r3, [sp, #32]
        ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
 8000756:	2300      	movs	r3, #0
        ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8000758:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        LL_ADC_INJ_Init(cfg->adc, &ADC_INJ_InitStruct);        
 800075c:	a908      	add	r1, sp, #32
 800075e:	6820      	ldr	r0, [r4, #0]
 8000760:	f007 fafc 	bl	8007d5c <LL_ADC_INJ_Init>
    LL_ADC_INJ_SetQueueMode(cfg->adc, LL_ADC_INJ_QUEUE_DISABLE);
 8000764:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8000766:	68d3      	ldr	r3, [r2, #12]
 8000768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800076c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000774:	60d3      	str	r3, [r2, #12]
    LL_ADC_SetOverSamplingScope(cfg->adc, LL_ADC_OVS_DISABLE);
 8000776:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000778:	6913      	ldr	r3, [r2, #16]
 800077a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800077e:	f023 0303 	bic.w	r3, r3, #3
 8000782:	6113      	str	r3, [r2, #16]
    LL_ADC_INJ_SetTriggerEdge(cfg->adc, LL_ADC_INJ_TRIG_EXT_RISING);
 8000784:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 8000786:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000788:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
    LL_ADC_DisableDeepPowerDown(cfg->adc);
 8000792:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000794:	6893      	ldr	r3, [r2, #8]
 8000796:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800079a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800079e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(cfg->adc);
 80007a0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80007a2:	6893      	ldr	r3, [r2, #8]
 80007a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80007a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6093      	str	r3, [r2, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80007b2:	4b55      	ldr	r3, [pc, #340]	; (8000908 <currsmp_shunt_stm32_init+0x284>)
 80007b4:	4a55      	ldr	r2, [pc, #340]	; (800090c <currsmp_shunt_stm32_init+0x288>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	fbb3 f3f2 	udiv	r3, r3, r2
    while(wait_loop_index != 0) { wait_loop_index--; }
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	9b00      	ldr	r3, [sp, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f040 8095 	bne.w	80008f0 <currsmp_shunt_stm32_init+0x26c>
    if(!cfg->slave_mode_flag)
 80007c6:	6923      	ldr	r3, [r4, #16]
        LL_ADC_REG_SetSequencerRanks(cfg->adc, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 80007c8:	6822      	ldr	r2, [r4, #0]
    if(!cfg->slave_mode_flag)
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f040 80b2 	bne.w	8000934 <currsmp_shunt_stm32_init+0x2b0>
  MODIFY_REG(*preg,
 80007d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 80007d2:	494f      	ldr	r1, [pc, #316]	; (8000910 <currsmp_shunt_stm32_init+0x28c>)
 80007d4:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80007d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
        LL_ADC_SetChannelSamplingTime(cfg->adc, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80007de:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 80007e0:	6953      	ldr	r3, [r2, #20]
 80007e2:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 80007e6:	6153      	str	r3, [r2, #20]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 80007e8:	6820      	ldr	r0, [r4, #0]
 80007ea:	f7ff ff35 	bl	8000658 <LL_ADC_SetChannelSingleDiff.constprop.0>
        LL_ADC_SetChannelPreselection(cfg->adc, LL_ADC_CHANNEL_3);
 80007ee:	4948      	ldr	r1, [pc, #288]	; (8000910 <currsmp_shunt_stm32_init+0x28c>)
 80007f0:	6820      	ldr	r0, [r4, #0]
 80007f2:	f7ff ff1b 	bl	800062c <LL_ADC_SetChannelPreselection>
        LL_ADC_INJ_SetSequencerRanks(cfg->adc, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_14);
 80007f6:	6822      	ldr	r2, [r4, #0]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_14, LL_ADC_SINGLE_ENDED);
 80007f8:	4946      	ldr	r1, [pc, #280]	; (8000914 <currsmp_shunt_stm32_init+0x290>)
  MODIFY_REG(ADCx->JSQR,
 80007fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80007fc:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000800:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000806:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 8000808:	6993      	ldr	r3, [r2, #24]
 800080a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	6820      	ldr	r0, [r4, #0]
 8000812:	f7ff ff21 	bl	8000658 <LL_ADC_SetChannelSingleDiff.constprop.0>
        LL_ADC_INJ_SetSequencerRanks(cfg->adc, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_16);
 8000816:	6822      	ldr	r2, [r4, #0]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_16, LL_ADC_SINGLE_ENDED);
 8000818:	493f      	ldr	r1, [pc, #252]	; (8000918 <currsmp_shunt_stm32_init+0x294>)
  MODIFY_REG(ADCx->JSQR,
 800081a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800081c:	f423 2378 	bic.w	r3, r3, #1015808	; 0xf8000
 8000820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000826:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 8000828:	6993      	ldr	r3, [r2, #24]
 800082a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	6820      	ldr	r0, [r4, #0]
 8000832:	f7ff ff11 	bl	8000658 <LL_ADC_SetChannelSingleDiff.constprop.0>
        LL_ADC_INJ_SetSequencerRanks(cfg->adc, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_17);
 8000836:	6822      	ldr	r2, [r4, #0]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_17, LL_ADC_SINGLE_ENDED);    
 8000838:	4938      	ldr	r1, [pc, #224]	; (800091c <currsmp_shunt_stm32_init+0x298>)
  MODIFY_REG(ADCx->JSQR,
 800083a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800083c:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8000840:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000846:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 8000848:	6993      	ldr	r3, [r2, #24]
 800084a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	6820      	ldr	r0, [r4, #0]
 8000852:	f7ff ff01 	bl	8000658 <LL_ADC_SetChannelSingleDiff.constprop.0>
        LL_ADC_SetChannelPreselection(cfg->adc,LL_ADC_CHANNEL_14);
 8000856:	492f      	ldr	r1, [pc, #188]	; (8000914 <currsmp_shunt_stm32_init+0x290>)
 8000858:	6820      	ldr	r0, [r4, #0]
 800085a:	f7ff fee7 	bl	800062c <LL_ADC_SetChannelPreselection>
        LL_ADC_SetChannelPreselection(cfg->adc,LL_ADC_CHANNEL_16);
 800085e:	492e      	ldr	r1, [pc, #184]	; (8000918 <currsmp_shunt_stm32_init+0x294>)
 8000860:	6820      	ldr	r0, [r4, #0]
 8000862:	f7ff fee3 	bl	800062c <LL_ADC_SetChannelPreselection>
        LL_ADC_SetChannelPreselection(cfg->adc,LL_ADC_CHANNEL_17);        
 8000866:	492d      	ldr	r1, [pc, #180]	; (800091c <currsmp_shunt_stm32_init+0x298>)
        LL_ADC_SetChannelPreselection(cfg->adc,LL_ADC_CHANNEL_5);
 8000868:	6820      	ldr	r0, [r4, #0]
 800086a:	f7ff fedf 	bl	800062c <LL_ADC_SetChannelPreselection>
    if(!cfg->slave_mode_flag)
 800086e:	6923      	ldr	r3, [r4, #16]
 8000870:	4e2b      	ldr	r6, [pc, #172]	; (8000920 <currsmp_shunt_stm32_init+0x29c>)
 8000872:	4d2c      	ldr	r5, [pc, #176]	; (8000924 <currsmp_shunt_stm32_init+0x2a0>)
 8000874:	2b00      	cmp	r3, #0
 8000876:	f040 80aa 	bne.w	80009ce <currsmp_shunt_stm32_init+0x34a>
        if (cfg->irq_cfg_func != NULL) {
 800087a:	6963      	ldr	r3, [r4, #20]
 800087c:	b103      	cbz	r3, 8000880 <currsmp_shunt_stm32_init+0x1fc>
            cfg->irq_cfg_func();
 800087e:	4798      	blx	r3
        LL_ADC_Disable(cfg->adc);
 8000880:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000882:	6893      	ldr	r3, [r2, #8]
 8000884:	4033      	ands	r3, r6
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6093      	str	r3, [r2, #8]
        LL_ADC_StartCalibration(cfg->adc,LL_ADC_CALIB_OFFSET,LL_ADC_SINGLE_ENDED);
 800088c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800088e:	6893      	ldr	r3, [r2, #8]
 8000890:	402b      	ands	r3, r5
 8000892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000896:	6093      	str	r3, [r2, #8]
        while (LL_ADC_IsCalibrationOnGoing(cfg->adc));
 8000898:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800089a:	6893      	ldr	r3, [r2, #8]
 800089c:	2b00      	cmp	r3, #0
 800089e:	dbfc      	blt.n	800089a <currsmp_shunt_stm32_init+0x216>
  MODIFY_REG(ADCx->CR,
 80008a0:	6893      	ldr	r3, [r2, #8]
 80008a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6093      	str	r3, [r2, #8]
        while (LL_ADC_IsActiveFlag_ADRDY(cfg->adc) == 0);
 80008b0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	07d2      	lsls	r2, r2, #31
 80008b6:	d5fc      	bpl.n	80008b2 <currsmp_shunt_stm32_init+0x22e>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008be:	605a      	str	r2, [r3, #4]
        LL_ADC_INJ_StartConversion(cfg->adc);
 80008c0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80008c2:	6893      	ldr	r3, [r2, #8]
 80008c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6093      	str	r3, [r2, #8]
		(void) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_Z_LOG_MSG_SIMPLE_CREATE_0);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 80008d2:	4815      	ldr	r0, [pc, #84]	; (8000928 <currsmp_shunt_stm32_init+0x2a4>)
 80008d4:	2103      	movs	r1, #3
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <currsmp_shunt_stm32_init+0x2a8>)
 80008d8:	f006 fe64 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
    return 0;
 80008dc:	2000      	movs	r0, #0
}
 80008de:	b012      	add	sp, #72	; 0x48
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
        LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(cfg->adc), &ADC_CommonInitStruct);
 80008e2:	4813      	ldr	r0, [pc, #76]	; (8000930 <currsmp_shunt_stm32_init+0x2ac>)
 80008e4:	e730      	b.n	8000748 <currsmp_shunt_stm32_init+0xc4>
        ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 80008e6:	2302      	movs	r3, #2
        ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 80008e8:	950b      	str	r5, [sp, #44]	; 0x2c
        ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
 80008ea:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
        ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 80008ee:	e735      	b.n	800075c <currsmp_shunt_stm32_init+0xd8>
    while(wait_loop_index != 0) { wait_loop_index--; }
 80008f0:	9b00      	ldr	r3, [sp, #0]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	e762      	b.n	80007bc <currsmp_shunt_stm32_init+0x138>
 80008f6:	bf00      	nop
 80008f8:	0800855c 	.word	0x0800855c
 80008fc:	40022000 	.word	0x40022000
 8000900:	40022100 	.word	0x40022100
 8000904:	58026300 	.word	0x58026300
 8000908:	24000588 	.word	0x24000588
 800090c:	00030d40 	.word	0x00030d40
 8000910:	0c900008 	.word	0x0c900008
 8000914:	3ac04000 	.word	0x3ac04000
 8000918:	43210000 	.word	0x43210000
 800091c:	47520000 	.word	0x47520000
 8000920:	7fffffc0 	.word	0x7fffffc0
 8000924:	3ffeffc0 	.word	0x3ffeffc0
 8000928:	08008cbc 	.word	0x08008cbc
 800092c:	08009d22 	.word	0x08009d22
 8000930:	40022300 	.word	0x40022300
  MODIFY_REG(*preg,
 8000934:	6b13      	ldr	r3, [r2, #48]	; 0x30
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_15, LL_ADC_SINGLE_ENDED);
 8000936:	4937      	ldr	r1, [pc, #220]	; (8000a14 <currsmp_shunt_stm32_init+0x390>)
 8000938:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 800093c:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000942:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 8000944:	6993      	ldr	r3, [r2, #24]
 8000946:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	6820      	ldr	r0, [r4, #0]
 800094e:	f7ff fe83 	bl	8000658 <LL_ADC_SetChannelSingleDiff.constprop.0>
        LL_ADC_SetChannelPreselection(cfg->adc, LL_ADC_CHANNEL_15);
 8000952:	4930      	ldr	r1, [pc, #192]	; (8000a14 <currsmp_shunt_stm32_init+0x390>)
 8000954:	6820      	ldr	r0, [r4, #0]
 8000956:	f7ff fe69 	bl	800062c <LL_ADC_SetChannelPreselection>
        LL_ADC_INJ_SetSequencerRanks(cfg->adc, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_8);
 800095a:	6822      	ldr	r2, [r4, #0]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_8, LL_ADC_SINGLE_ENDED);
 800095c:	492e      	ldr	r1, [pc, #184]	; (8000a18 <currsmp_shunt_stm32_init+0x394>)
  MODIFY_REG(ADCx->JSQR,
 800095e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000960:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000964:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
        LL_ADC_SetChannelSamplingTime(cfg->adc, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800096a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 800096c:	6953      	ldr	r3, [r2, #20]
 800096e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000972:	6153      	str	r3, [r2, #20]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_8, LL_ADC_SINGLE_ENDED);
 8000974:	6820      	ldr	r0, [r4, #0]
 8000976:	f7ff fe6f 	bl	8000658 <LL_ADC_SetChannelSingleDiff.constprop.0>
        LL_ADC_INJ_SetSequencerRanks(cfg->adc, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_9);
 800097a:	6822      	ldr	r2, [r4, #0]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_9, LL_ADC_SINGLE_ENDED);
 800097c:	4927      	ldr	r1, [pc, #156]	; (8000a1c <currsmp_shunt_stm32_init+0x398>)
  MODIFY_REG(ADCx->JSQR,
 800097e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000980:	f423 2378 	bic.w	r3, r3, #1015808	; 0xf8000
 8000984:	f443 2390 	orr.w	r3, r3, #294912	; 0x48000
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
        LL_ADC_SetChannelSamplingTime(cfg->adc, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800098a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 800098c:	6953      	ldr	r3, [r2, #20]
 800098e:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8000992:	6153      	str	r3, [r2, #20]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_9, LL_ADC_SINGLE_ENDED);
 8000994:	6820      	ldr	r0, [r4, #0]
 8000996:	f7ff fe5f 	bl	8000658 <LL_ADC_SetChannelSingleDiff.constprop.0>
        LL_ADC_INJ_SetSequencerRanks(cfg->adc, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_5);
 800099a:	6822      	ldr	r2, [r4, #0]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);       
 800099c:	4920      	ldr	r1, [pc, #128]	; (8000a20 <currsmp_shunt_stm32_init+0x39c>)
  MODIFY_REG(ADCx->JSQR,
 800099e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80009a0:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 80009a4:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
        LL_ADC_SetChannelSamplingTime(cfg->adc, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80009aa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 80009ac:	6953      	ldr	r3, [r2, #20]
 80009ae:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 80009b2:	6153      	str	r3, [r2, #20]
        LL_ADC_SetChannelSingleDiff(cfg->adc, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);       
 80009b4:	6820      	ldr	r0, [r4, #0]
 80009b6:	f7ff fe4f 	bl	8000658 <LL_ADC_SetChannelSingleDiff.constprop.0>
        LL_ADC_SetChannelPreselection(cfg->adc,LL_ADC_CHANNEL_8);
 80009ba:	4917      	ldr	r1, [pc, #92]	; (8000a18 <currsmp_shunt_stm32_init+0x394>)
 80009bc:	6820      	ldr	r0, [r4, #0]
 80009be:	f7ff fe35 	bl	800062c <LL_ADC_SetChannelPreselection>
        LL_ADC_SetChannelPreselection(cfg->adc,LL_ADC_CHANNEL_9);
 80009c2:	4916      	ldr	r1, [pc, #88]	; (8000a1c <currsmp_shunt_stm32_init+0x398>)
 80009c4:	6820      	ldr	r0, [r4, #0]
 80009c6:	f7ff fe31 	bl	800062c <LL_ADC_SetChannelPreselection>
        LL_ADC_SetChannelPreselection(cfg->adc,LL_ADC_CHANNEL_5);
 80009ca:	4915      	ldr	r1, [pc, #84]	; (8000a20 <currsmp_shunt_stm32_init+0x39c>)
 80009cc:	e74c      	b.n	8000868 <currsmp_shunt_stm32_init+0x1e4>
        LL_ADC_Disable(cfg->adc);
 80009ce:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80009d0:	6893      	ldr	r3, [r2, #8]
 80009d2:	4033      	ands	r3, r6
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6093      	str	r3, [r2, #8]
        LL_ADC_StartCalibration(cfg->adc,LL_ADC_CALIB_OFFSET,LL_ADC_SINGLE_ENDED);
 80009da:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80009dc:	6893      	ldr	r3, [r2, #8]
 80009de:	402b      	ands	r3, r5
 80009e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e4:	6093      	str	r3, [r2, #8]
        while (LL_ADC_IsCalibrationOnGoing(cfg->adc));
 80009e6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80009e8:	6893      	ldr	r3, [r2, #8]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dbfc      	blt.n	80009e8 <currsmp_shunt_stm32_init+0x364>
  MODIFY_REG(ADCx->CR,
 80009ee:	6893      	ldr	r3, [r2, #8]
 80009f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6093      	str	r3, [r2, #8]
         while (LL_ADC_IsActiveFlag_ADRDY(cfg->adc) == 0);      
 80009fe:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8000a00:	6813      	ldr	r3, [r2, #0]
 8000a02:	07db      	lsls	r3, r3, #31
 8000a04:	d5fc      	bpl.n	8000a00 <currsmp_shunt_stm32_init+0x37c>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <currsmp_shunt_stm32_init+0x3a0>)
 8000a08:	6853      	ldr	r3, [r2, #4]
 8000a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a0e:	6053      	str	r3, [r2, #4]
}
 8000a10:	e75f      	b.n	80008d2 <currsmp_shunt_stm32_init+0x24e>
 8000a12:	bf00      	nop
 8000a14:	3ef08000 	.word	0x3ef08000
 8000a18:	21800100 	.word	0x21800100
 8000a1c:	25b00200 	.word	0x25b00200
 8000a20:	14f00020 	.word	0x14f00020
 8000a24:	40022100 	.word	0x40022100

08000a28 <pwm_stm32_start>:
	{
	}else{
	}
}
static void pwm_stm32_start(const struct device *dev)
{
 8000a28:	b510      	push	{r4, lr}
	const struct pwm_stm32_config *cfg = dev->config;
 8000a2a:	6844      	ldr	r4, [r0, #4]
	uint32_t slave_flag;
	slave_flag = cfg->slave_enable;

	if(!slave_flag)
 8000a2c:	69e3      	ldr	r3, [r4, #28]
 8000a2e:	b9db      	cbnz	r3, 8000a68 <pwm_stm32_start+0x40>
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <pwm_stm32_start+0x60>)
 8000a32:	2103      	movs	r1, #3
 8000a34:	4815      	ldr	r0, [pc, #84]	; (8000a8c <pwm_stm32_start+0x64>)
 8000a36:	f006 fdb5 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
	{
		LOG_INF("master timer");
		LL_TIM_EnableAllOutputs(cfg->timer);
 8000a3a:	6822      	ldr	r2, [r4, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000a3c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a42:	6453      	str	r3, [r2, #68]	; 0x44
		LL_TIM_EnableCounter(cfg->timer);
 8000a44:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a46:	6813      	ldr	r3, [r2, #0]
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6013      	str	r3, [r2, #0]

		// LL_TIM_OC_SetCompareCH1(cfg->timer, (uint32_t)(cfg->timing_params[1]*0.5f));
		// LL_TIM_OC_SetCompareCH2(cfg->timer, (uint32_t)(cfg->timing_params[1]*0.5f));
		// LL_TIM_OC_SetCompareCH3(cfg->timer, (uint32_t)(cfg->timing_params[1]*0.5f));
		// LL_TIM_OC_SetCompareCH4(cfg->timer, (uint32_t)(cfg->timing_params[1]-200));//首次触发ADC
		LL_TIM_CC_EnableChannel(cfg->timer,LL_TIM_CHANNEL_CH4);
 8000a4e:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a50:	6a13      	ldr	r3, [r2, #32]
 8000a52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a56:	6213      	str	r3, [r2, #32]
		// LL_TIM_OC_SetCompareCH2(cfg->timer, (uint32_t)(cfg->timing_params[1]*0.5f));
		// LL_TIM_OC_SetCompareCH3(cfg->timer, (uint32_t)(cfg->timing_params[1]*0.5f));		
		LL_TIM_OC_SetCompareCH4(TIM1, (uint32_t)(cfg->timing_params[1]-200));//首次触发ADC		
		LL_TIM_EnableAllOutputs(cfg->timer);	
	}
	LL_TIM_CC_EnableChannel(cfg->timer,\
 8000a58:	6822      	ldr	r2, [r4, #0]
 8000a5a:	6a13      	ldr	r3, [r2, #32]
 8000a5c:	f443 738a 	orr.w	r3, r3, #276	; 0x114
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6213      	str	r3, [r2, #32]
							LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3 |\
							LL_TIM_CHANNEL_CH1N| LL_TIM_CHANNEL_CH1N| LL_TIM_CHANNEL_CH1N);  
}
 8000a66:	bd10      	pop	{r4, pc}
 8000a68:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <pwm_stm32_start+0x68>)
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <pwm_stm32_start+0x64>)
 8000a6e:	f006 fd99 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
		LL_TIM_OC_SetCompareCH4(TIM1, (uint32_t)(cfg->timing_params[1]-200));//首次触发ADC		
 8000a72:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <pwm_stm32_start+0x6c>)
 8000a76:	3bc8      	subs	r3, #200	; 0xc8
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
		LL_TIM_EnableAllOutputs(cfg->timer);	
 8000a7a:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000a7c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a82:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a84:	e7e8      	b.n	8000a58 <pwm_stm32_start+0x30>
 8000a86:	bf00      	nop
 8000a88:	08009d57 	.word	0x08009d57
 8000a8c:	08008cfc 	.word	0x08008cfc
 8000a90:	08009d64 	.word	0x08009d64
 8000a94:	40010000 	.word	0x40010000

08000a98 <pwm_stm32_init>:
 * @FuncName     
 * @param        dev 
 * @version      0.1
--------------------------------------------------------------------------------------------*/
static int pwm_stm32_init(const struct device *dev)
{
 8000a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a9c:	b09a      	sub	sp, #104	; 0x68
    const struct pwm_stm32_config *config = dev->config;
 8000a9e:	6845      	ldr	r5, [r0, #4]
	ret = pinctrl_lookup_state(config, id, &state);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	aa0e      	add	r2, sp, #56	; 0x38
 8000aa4:	68e8      	ldr	r0, [r5, #12]
 8000aa6:	f007 f836 	bl	8007b16 <pinctrl_lookup_state>
	if (ret < 0) {
 8000aaa:	1e04      	subs	r4, r0, #0
 8000aac:	db07      	blt.n	8000abe <pwm_stm32_init+0x26>
	return pinctrl_apply_state_direct(config, state);
 8000aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	7919      	ldrb	r1, [r3, #4]
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	f002 ff5b 	bl	8003970 <pinctrl_configure_pins>
	LL_TIM_OC_InitTypeDef tim_ocinit;
	LL_TIM_BDTR_InitTypeDef brk_dt_init;

	/* configure pinmux */
	ret = pinctrl_apply_state(config->pincfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 8000aba:	1e04      	subs	r4, r0, #0
 8000abc:	da09      	bge.n	8000ad2 <pwm_stm32_init+0x3a>
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_SIMPLE_CREATE_1);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_simple_create_1(source, level, fmt, arg);
 8000abe:	4a6b      	ldr	r2, [pc, #428]	; (8000c6c <pwm_stm32_init+0x1d4>)
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	486a      	ldr	r0, [pc, #424]	; (8000c70 <pwm_stm32_init+0x1d8>)
 8000ac6:	f006 fd76 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
	brk_dt_init.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
	brk_dt_init.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
	LL_TIM_BDTR_Init(config->timer, &brk_dt_init);
	LOG_INF("pwm_stm32_init Finish");
	return 0;
}
 8000aca:	4620      	mov	r0, r4
 8000acc:	b01a      	add	sp, #104	; 0x68
 8000ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct clock_control_driver_api *api =
 8000ad2:	4e68      	ldr	r6, [pc, #416]	; (8000c74 <pwm_stm32_init+0x1dc>)
	ret = clock_control_on(clk, (clock_control_subsys_t *)&config->pclken);
 8000ad4:	1d2f      	adds	r7, r5, #4
 8000ad6:	f8d6 8008 	ldr.w	r8, [r6, #8]
	return api->on(dev, sys);
 8000ada:	4639      	mov	r1, r7
 8000adc:	4630      	mov	r0, r6
 8000ade:	f8d8 3000 	ldr.w	r3, [r8]
 8000ae2:	4798      	blx	r3
	if (ret < 0) {
 8000ae4:	1e04      	subs	r4, r0, #0
 8000ae6:	da02      	bge.n	8000aee <pwm_stm32_init+0x56>
 8000ae8:	4a63      	ldr	r2, [pc, #396]	; (8000c78 <pwm_stm32_init+0x1e0>)
 8000aea:	4623      	mov	r3, r4
 8000aec:	e7e9      	b.n	8000ac2 <pwm_stm32_init+0x2a>
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8000aee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000af2:	b9db      	cbnz	r3, 8000b2c <pwm_stm32_init+0x94>
 8000af4:	4a61      	ldr	r2, [pc, #388]	; (8000c7c <pwm_stm32_init+0x1e4>)
 8000af6:	4623      	mov	r3, r4
 8000af8:	2101      	movs	r1, #1
 8000afa:	485d      	ldr	r0, [pc, #372]	; (8000c70 <pwm_stm32_init+0x1d8>)
 8000afc:	f006 fd5b 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
	tim_init.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8000b00:	2340      	movs	r3, #64	; 0x40
	if (LL_TIM_Init(config->timer, &tim_init) != SUCCESS) {
 8000b02:	a901      	add	r1, sp, #4
	tim_init.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8000b04:	9302      	str	r3, [sp, #8]
    tim_init.Autoreload = config->timing_params[1];  // arr
 8000b06:	696b      	ldr	r3, [r5, #20]
 8000b08:	9303      	str	r3, [sp, #12]
    tim_init.Prescaler = config->timing_params[2];   // psc
 8000b0a:	69ab      	ldr	r3, [r5, #24]
 8000b0c:	f8ad 3004 	strh.w	r3, [sp, #4]
	tim_init.RepetitionCounter = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	9305      	str	r3, [sp, #20]
	if (LL_TIM_Init(config->timer, &tim_init) != SUCCESS) {
 8000b14:	6828      	ldr	r0, [r5, #0]
 8000b16:	f003 fbe7 	bl	80042e8 <LL_TIM_Init>
 8000b1a:	b170      	cbz	r0, 8000b3a <pwm_stm32_init+0xa2>
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 8000b1c:	4a58      	ldr	r2, [pc, #352]	; (8000c80 <pwm_stm32_init+0x1e8>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4853      	ldr	r0, [pc, #332]	; (8000c70 <pwm_stm32_init+0x1d8>)
		return -EIO;
 8000b22:	f06f 0404 	mvn.w	r4, #4
 8000b26:	f006 fd3d 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
}
 8000b2a:	e7ce      	b.n	8000aca <pwm_stm32_init+0x32>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8000b2c:	466a      	mov	r2, sp
 8000b2e:	4639      	mov	r1, r7
 8000b30:	4630      	mov	r0, r6
 8000b32:	4798      	blx	r3
	if(clock_control_get_rate(clk, (clock_control_subsys_t *)&config->pclken, &rate))
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d0e3      	beq.n	8000b00 <pwm_stm32_init+0x68>
 8000b38:	e7dc      	b.n	8000af4 <pwm_stm32_init+0x5c>
	LL_TIM_DisableARRPreload(config->timer);
 8000b3a:	682a      	ldr	r2, [r5, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b3c:	6813      	ldr	r3, [r2, #0]
 8000b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b42:	6013      	str	r3, [r2, #0]
	if(!config->slave_enable)
 8000b44:	69eb      	ldr	r3, [r5, #28]
 8000b46:	b933      	cbnz	r3, 8000b56 <pwm_stm32_init+0xbe>
		LL_TIM_SetClockSource(config->timer, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000b48:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b4a:	6893      	ldr	r3, [r2, #8]
 8000b4c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000b50:	f023 0307 	bic.w	r3, r3, #7
 8000b54:	6093      	str	r3, [r2, #8]
	LL_TIM_OC_EnablePreload(config->timer, LL_TIM_CHANNEL_CH1);
 8000b56:	682a      	ldr	r2, [r5, #0]
	LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH1, &tim_ocinit);
 8000b58:	2101      	movs	r1, #1
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000b5a:	6993      	ldr	r3, [r2, #24]
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6193      	str	r3, [r2, #24]
	tim_ocinit.OCState = LL_TIM_OCSTATE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	2260      	movs	r2, #96	; 0x60
	tim_ocinit.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000b66:	930a      	str	r3, [sp, #40]	; 0x28
	tim_ocinit.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000b68:	930d      	str	r3, [sp, #52]	; 0x34
	tim_ocinit.OCState = LL_TIM_OCSTATE_DISABLE;
 8000b6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	tim_ocinit.OCNPolarity = LL_TIM_OCPOLARITY_LOW;
 8000b6e:	2202      	movs	r2, #2
	tim_ocinit.CompareValue = 0;
 8000b70:	e9cd 3308 	strd	r3, r3, [sp, #32]
	tim_ocinit.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000b74:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
	LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH1, &tim_ocinit);
 8000b78:	aa06      	add	r2, sp, #24
 8000b7a:	6828      	ldr	r0, [r5, #0]
 8000b7c:	f003 fc12 	bl	80043a4 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(config->timer, LL_TIM_CHANNEL_CH1);
 8000b80:	682a      	ldr	r2, [r5, #0]
	LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH2, &tim_ocinit);
 8000b82:	2110      	movs	r1, #16
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000b84:	6993      	ldr	r3, [r2, #24]
 8000b86:	f023 0304 	bic.w	r3, r3, #4
 8000b8a:	6193      	str	r3, [r2, #24]
	LL_TIM_OC_EnablePreload(config->timer, LL_TIM_CHANNEL_CH2);
 8000b8c:	682a      	ldr	r2, [r5, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000b8e:	6993      	ldr	r3, [r2, #24]
 8000b90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b94:	6193      	str	r3, [r2, #24]
	LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH2, &tim_ocinit);
 8000b96:	aa06      	add	r2, sp, #24
 8000b98:	6828      	ldr	r0, [r5, #0]
 8000b9a:	f003 fc03 	bl	80043a4 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(config->timer, LL_TIM_CHANNEL_CH2);
 8000b9e:	682a      	ldr	r2, [r5, #0]
	LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH3, &tim_ocinit);
 8000ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ba4:	6993      	ldr	r3, [r2, #24]
 8000ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000baa:	6193      	str	r3, [r2, #24]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bac:	682a      	ldr	r2, [r5, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000bae:	69d3      	ldr	r3, [r2, #28]
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	aa06      	add	r2, sp, #24
 8000bb8:	6828      	ldr	r0, [r5, #0]
 8000bba:	f003 fbf3 	bl	80043a4 <LL_TIM_OC_Init>
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bbe:	682a      	ldr	r2, [r5, #0]
	LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH4, &tim_ocinit);
 8000bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000bc4:	69d3      	ldr	r3, [r2, #28]
 8000bc6:	f023 0304 	bic.w	r3, r3, #4
 8000bca:	61d3      	str	r3, [r2, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bcc:	682a      	ldr	r2, [r5, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000bce:	69d3      	ldr	r3, [r2, #28]
 8000bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bd4:	61d3      	str	r3, [r2, #28]
 8000bd6:	aa06      	add	r2, sp, #24
 8000bd8:	6828      	ldr	r0, [r5, #0]
 8000bda:	f003 fbe3 	bl	80043a4 <LL_TIM_OC_Init>
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bde:	682a      	ldr	r2, [r5, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000be0:	69d3      	ldr	r3, [r2, #28]
 8000be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000be6:	61d3      	str	r3, [r2, #28]
	if(!config->slave_enable)
 8000be8:	69eb      	ldr	r3, [r5, #28]
 8000bea:	682a      	ldr	r2, [r5, #0]
 8000bec:	bb73      	cbnz	r3, 8000c4c <pwm_stm32_init+0x1b4>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000bee:	6853      	ldr	r3, [r2, #4]
 8000bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6053      	str	r3, [r2, #4]
		LL_TIM_SetTriggerOutput2(config->timer, LL_TIM_TRGO2_OC4);
 8000bfa:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000bfc:	6853      	ldr	r3, [r2, #4]
 8000bfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000c02:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8000c06:	6053      	str	r3, [r2, #4]
		LL_TIM_EnableMasterSlaveMode(config->timer);
 8000c08:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000c0a:	6893      	ldr	r3, [r2, #8]
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	brk_dt_init.OSSRState = LL_TIM_OSSR_DISABLE;
 8000c10:	2400      	movs	r4, #0
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8000c12:	6093      	str	r3, [r2, #8]
	LL_TIM_BDTR_Init(config->timer, &brk_dt_init);
 8000c14:	a90e      	add	r1, sp, #56	; 0x38
	brk_dt_init.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000c16:	9410      	str	r4, [sp, #64]	; 0x40
	brk_dt_init.OSSIState = LL_TIM_OSSI_DISABLE;
 8000c18:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    brk_dt_init.DeadTime = config->timing_params[0];  // t_dead_ns
 8000c1c:	692b      	ldr	r3, [r5, #16]
	brk_dt_init.BreakState = LL_TIM_BREAK_DISABLE;
 8000c1e:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
    brk_dt_init.DeadTime = config->timing_params[0];  // t_dead_ns
 8000c22:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	brk_dt_init.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	brk_dt_init.Break2State = LL_TIM_BREAK2_DISABLE;
 8000c2a:	9415      	str	r4, [sp, #84]	; 0x54
	brk_dt_init.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2c:	9419      	str	r4, [sp, #100]	; 0x64
	brk_dt_init.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000c2e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	brk_dt_init.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	brk_dt_init.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000c36:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
	LL_TIM_BDTR_Init(config->timer, &brk_dt_init);
 8000c3a:	6828      	ldr	r0, [r5, #0]
 8000c3c:	f003 fd34 	bl	80046a8 <LL_TIM_BDTR_Init>
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <pwm_stm32_init+0x1ec>)
 8000c42:	2103      	movs	r1, #3
 8000c44:	480a      	ldr	r0, [pc, #40]	; (8000c70 <pwm_stm32_init+0x1d8>)
 8000c46:	f006 fcad 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
}
 8000c4a:	e73e      	b.n	8000aca <pwm_stm32_init+0x32>
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8000c4c:	6893      	ldr	r3, [r2, #8]
 8000c4e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c56:	6093      	str	r3, [r2, #8]
  		LL_TIM_SetSlaveMode(config->timer, LL_TIM_SLAVEMODE_TRIGGER);
 8000c58:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8000c5a:	6893      	ldr	r3, [r2, #8]
 8000c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c60:	f023 0307 	bic.w	r3, r3, #7
 8000c64:	f043 0306 	orr.w	r3, r3, #6
 8000c68:	e7d2      	b.n	8000c10 <pwm_stm32_init+0x178>
 8000c6a:	bf00      	nop
 8000c6c:	08009d70 	.word	0x08009d70
 8000c70:	08008cfc 	.word	0x08008cfc
 8000c74:	0800855c 	.word	0x0800855c
 8000c78:	08009d8a 	.word	0x08009d8a
 8000c7c:	08009dad 	.word	0x08009dad
 8000c80:	08009dc9 	.word	0x08009dc9
 8000c84:	08009de4 	.word	0x08009de4

08000c88 <abz_stm32_get_eangle>:
  * API
  ******************************************************************************/
  static float abz_stm32_get_eangle(const struct device *dev)
  {
	  return 0.0f; 
  }
 8000c88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8000c90 <abz_stm32_get_eangle+0x8>
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	00000000 	.word	0x00000000

08000c94 <abz_stm32_get_rads>:
  static float abz_stm32_get_mangle(const struct device *dev)
  {
	  return 0.0f;
  }

  static float abz_stm32_get_rads(const struct device *dev)
 8000c94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8000c9c <abz_stm32_get_rads+0x8>
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	00000000 	.word	0x00000000

08000ca0 <hall_gpio_callback>:
  * Init
  ******************************************************************************/
  static void hall_gpio_callback(const struct device *port,
                              struct gpio_callback *cb,
                              uint32_t pins)
 {
 8000ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 
     ARG_UNUSED(port);
     ARG_UNUSED(pins);

     const struct device *dev = data->dev;
     const struct abz_hall_stm32_config *cfg = dev->config;
 8000ca4:	68cb      	ldr	r3, [r1, #12]
 {
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	460d      	mov	r5, r1
     const struct abz_hall_stm32_config *cfg = dev->config;
 8000caa:	f8d3 8004 	ldr.w	r8, [r3, #4]

     int hu_state = gpio_pin_get_dt(&cfg->hu_gpio);
 8000cae:	f108 0018 	add.w	r0, r8, #24
 8000cb2:	f005 ffc4 	bl	8006c3e <gpio_pin_get_dt>
 8000cb6:	4604      	mov	r4, r0
     int hv_state = gpio_pin_get_dt(&cfg->hv_gpio);
 8000cb8:	f108 0020 	add.w	r0, r8, #32
 8000cbc:	f005 ffbf 	bl	8006c3e <gpio_pin_get_dt>
 8000cc0:	4606      	mov	r6, r0
     int hw_state = gpio_pin_get_dt(&cfg->hw_gpio);
 8000cc2:	f108 0028 	add.w	r0, r8, #40	; 0x28
     LOG_DBG("Hall states - HALL_VAL:%d", hu_state<<2|hv_state<<1|hw_state);
 8000cc6:	00a4      	lsls	r4, r4, #2
     int hw_state = gpio_pin_get_dt(&cfg->hw_gpio);
 8000cc8:	f005 ffb9 	bl	8006c3e <gpio_pin_get_dt>
     LOG_DBG("Hall states - HALL_VAL:%d", hu_state<<2|hv_state<<1|hw_state);
 8000ccc:	b088      	sub	sp, #32
 8000cce:	0076      	lsls	r6, r6, #1
 8000cd0:	466a      	mov	r2, sp
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <hall_gpio_callback+0x60>)
 8000cd4:	4334      	orrs	r4, r6
 8000cd6:	6153      	str	r3, [r2, #20]
 8000cd8:	4304      	orrs	r4, r0
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <hall_gpio_callback+0x64>)
 8000cdc:	61d4      	str	r4, [r2, #28]
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <hall_gpio_callback+0x68>)
 8000cee:	f001 f955 	bl	8001f9c <z_impl_z_log_msg_static_create>

     data->pre_sect = data->cur_sect;
 8000cf2:	7c2b      	ldrb	r3, [r5, #16]
     data->cur_sect = hu_state<<2|hv_state<<1|hw_state;
 8000cf4:	742c      	strb	r4, [r5, #16]
     data->pre_sect = data->cur_sect;
 8000cf6:	746b      	strb	r3, [r5, #17]
 }
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cfe:	bf00      	nop
 8000d00:	08009e08 	.word	0x08009e08
 8000d04:	08009e76 	.word	0x08009e76
 8000d08:	08008cac 	.word	0x08008cac

08000d0c <abz_stm32_get_position>:
  static float abz_stm32_get_position(const struct device *dev)
 8000d0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8000d14 <abz_stm32_get_position+0x8>
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	00000000 	.word	0x00000000

08000d18 <abz_stm32_get_mangle>:
  static float abz_stm32_get_mangle(const struct device *dev)
 8000d18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8000d20 <abz_stm32_get_mangle+0x8>
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	00000000 	.word	0x00000000

08000d24 <stm32_abz_hall_init>:
    //      return ret;
    //  }
     return 0;
}
static int stm32_abz_hall_init(const struct device *dev)
{
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	6844      	ldr	r4, [r0, #4]
 8000d2c:	4606      	mov	r6, r0
	ret = pinctrl_lookup_state(config, id, &state);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	aa01      	add	r2, sp, #4
 8000d32:	6960      	ldr	r0, [r4, #20]
 8000d34:	f006 feef 	bl	8007b16 <pinctrl_lookup_state>
	if (ret < 0) {
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	db07      	blt.n	8000d4c <stm32_abz_hall_init+0x28>
	return pinctrl_apply_state_direct(config, state);
 8000d3c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	7919      	ldrb	r1, [r3, #4]
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	f002 fe14 	bl	8003970 <pinctrl_configure_pins>
	 if (ret < 0) {
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	da2d      	bge.n	8000da8 <stm32_abz_hall_init+0x84>
	z_impl_z_log_msg_simple_create_1(source, level, fmt, arg);
 8000d4c:	4a56      	ldr	r2, [pc, #344]	; (8000ea8 <stm32_abz_hall_init+0x184>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4856      	ldr	r0, [pc, #344]	; (8000eac <stm32_abz_hall_init+0x188>)
 8000d52:	f006 fc30 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
     const struct abz_hall_stm32_config *cfg = dev->config;
 8000d56:	6874      	ldr	r4, [r6, #4]
     struct abz_hall_stm32_data *data = dev->data;
 8000d58:	f8d6 8010 	ldr.w	r8, [r6, #16]
     uint32_t pin_mask = BIT(cfg->hu_gpio.pin) | BIT(cfg->hv_gpio.pin) | BIT(cfg->hw_gpio.pin);
 8000d5c:	f894 901c 	ldrb.w	r9, [r4, #28]
     ret = gpio_pin_configure_dt(&cfg->hu_gpio, GPIO_INPUT);
 8000d60:	f104 0018 	add.w	r0, r4, #24
     uint32_t pin_mask = BIT(cfg->hu_gpio.pin) | BIT(cfg->hv_gpio.pin) | BIT(cfg->hw_gpio.pin);
 8000d64:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 8000d68:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
     data->dev = dev;
 8000d6c:	f8c8 6018 	str.w	r6, [r8, #24]
     ret = gpio_pin_configure_dt(&cfg->hu_gpio, GPIO_INPUT);
 8000d70:	f005 ff7a 	bl	8006c68 <gpio_pin_configure_dt.constprop.0>
 8000d74:	4606      	mov	r6, r0
     ret |= gpio_pin_configure_dt(&cfg->hv_gpio, GPIO_INPUT);
 8000d76:	f104 0020 	add.w	r0, r4, #32
 8000d7a:	f005 ff75 	bl	8006c68 <gpio_pin_configure_dt.constprop.0>
 8000d7e:	4306      	orrs	r6, r0
     ret |= gpio_pin_configure_dt(&cfg->hw_gpio, GPIO_INPUT);
 8000d80:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8000d84:	f005 ff70 	bl	8006c68 <gpio_pin_configure_dt.constprop.0>
     if (ret < 0) {
 8000d88:	4306      	orrs	r6, r0
 8000d8a:	d567      	bpl.n	8000e5c <stm32_abz_hall_init+0x138>
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <stm32_abz_hall_init+0x18c>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4846      	ldr	r0, [pc, #280]	; (8000eac <stm32_abz_hall_init+0x188>)
 8000d92:	f006 fc07 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
 8000d96:	4a47      	ldr	r2, [pc, #284]	; (8000eb4 <stm32_abz_hall_init+0x190>)
 8000d98:	2103      	movs	r1, #3
 8000d9a:	4844      	ldr	r0, [pc, #272]	; (8000eac <stm32_abz_hall_init+0x188>)
 8000d9c:	f006 fc02 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
	abz_stm32_init(dev);
    hall_stm32_init(dev);
    LOG_INF("stm32_abz_hall_init Finish");
	return 0;
}
 8000da0:	2000      	movs	r0, #0
 8000da2:	b006      	add	sp, #24
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return api->on(dev, sys);
 8000da8:	4843      	ldr	r0, [pc, #268]	; (8000eb8 <stm32_abz_hall_init+0x194>)
 8000daa:	f104 010c 	add.w	r1, r4, #12
 8000dae:	6883      	ldr	r3, [r0, #8]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4798      	blx	r3
	 if (ret < 0) {
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	da01      	bge.n	8000dbc <stm32_abz_hall_init+0x98>
	z_impl_z_log_msg_simple_create_1(source, level, fmt, arg);
 8000db8:	4a40      	ldr	r2, [pc, #256]	; (8000ebc <stm32_abz_hall_init+0x198>)
 8000dba:	e7c8      	b.n	8000d4e <stm32_abz_hall_init+0x2a>
	 LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000dbc:	2214      	movs	r2, #20
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	a801      	add	r0, sp, #4
 8000dc2:	f007 f97e 	bl	80080c2 <memset>
	 TIM_InitStruct.Autoreload = config->lines;
 8000dc6:	6823      	ldr	r3, [r4, #0]
	 LL_TIM_Init(config->timer, &TIM_InitStruct);
 8000dc8:	a901      	add	r1, sp, #4
	 TIM_InitStruct.Autoreload = config->lines;
 8000dca:	9303      	str	r3, [sp, #12]
	 LL_TIM_Init(config->timer, &TIM_InitStruct);
 8000dcc:	68a0      	ldr	r0, [r4, #8]
 8000dce:	f003 fa8b 	bl	80042e8 <LL_TIM_Init>
	 LL_TIM_DisableARRPreload(config->timer);
 8000dd2:	68a2      	ldr	r2, [r4, #8]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000dd4:	6813      	ldr	r3, [r2, #0]
 8000dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dda:	6013      	str	r3, [r2, #0]
	 LL_TIM_SetEncoderMode(config->timer, LL_TIM_ENCODERMODE_X2_TI1);
 8000ddc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8000dde:	6893      	ldr	r3, [r2, #8]
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	f023 0307 	bic.w	r3, r3, #7
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6093      	str	r3, [r2, #8]
	 LL_TIM_IC_SetActiveInput(config->timer, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000dee:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000df0:	6993      	ldr	r3, [r2, #24]
 8000df2:	f023 0303 	bic.w	r3, r3, #3
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6193      	str	r3, [r2, #24]
	 LL_TIM_IC_SetPrescaler(config->timer, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8000dfc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000dfe:	6993      	ldr	r3, [r2, #24]
 8000e00:	f023 030c 	bic.w	r3, r3, #12
 8000e04:	6193      	str	r3, [r2, #24]
	 LL_TIM_IC_SetFilter(config->timer, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8000e06:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000e08:	6993      	ldr	r3, [r2, #24]
 8000e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e0e:	6193      	str	r3, [r2, #24]
	 LL_TIM_IC_SetPolarity(config->timer, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8000e10:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000e12:	6a13      	ldr	r3, [r2, #32]
 8000e14:	f023 030a 	bic.w	r3, r3, #10
 8000e18:	6213      	str	r3, [r2, #32]
	 LL_TIM_IC_SetActiveInput(config->timer, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000e1a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000e1c:	6993      	ldr	r3, [r2, #24]
 8000e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6193      	str	r3, [r2, #24]
	 LL_TIM_IC_SetPrescaler(config->timer, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8000e28:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000e2a:	6993      	ldr	r3, [r2, #24]
 8000e2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e30:	6193      	str	r3, [r2, #24]
	 LL_TIM_IC_SetFilter(config->timer, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8000e32:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000e34:	6993      	ldr	r3, [r2, #24]
 8000e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e3a:	6193      	str	r3, [r2, #24]
	 LL_TIM_IC_SetPolarity(config->timer, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8000e3c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000e3e:	6a13      	ldr	r3, [r2, #32]
 8000e40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000e44:	6213      	str	r3, [r2, #32]
	 LL_TIM_SetTriggerOutput(config->timer, LL_TIM_TRGO_RESET);
 8000e46:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e48:	6853      	ldr	r3, [r2, #4]
 8000e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e4e:	6053      	str	r3, [r2, #4]
	 LL_TIM_DisableMasterSlaveMode(config->timer);
 8000e50:	68a2      	ldr	r2, [r4, #8]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e52:	6893      	ldr	r3, [r2, #8]
 8000e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e58:	6093      	str	r3, [r2, #8]
	 return 0;
 8000e5a:	e77c      	b.n	8000d56 <stm32_abz_hall_init+0x32>
     uint32_t pin_mask = BIT(cfg->hu_gpio.pin) | BIT(cfg->hv_gpio.pin) | BIT(cfg->hw_gpio.pin);
 8000e5c:	2601      	movs	r6, #1
	SYS_PORT_TRACING_FUNC_ENTER(gpio, init_callback, callback, handler, pin_mask);

	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <stm32_abz_hall_init+0x19c>)
     gpio_init_callback(&data->gpio_cb, hall_gpio_callback, pin_mask);
 8000e60:	f108 070c 	add.w	r7, r8, #12
     uint32_t pin_mask = BIT(cfg->hu_gpio.pin) | BIT(cfg->hv_gpio.pin) | BIT(cfg->hw_gpio.pin);
 8000e64:	fa06 f505 	lsl.w	r5, r6, r5
 8000e68:	fa06 fa0a 	lsl.w	sl, r6, sl
 8000e6c:	fa06 f909 	lsl.w	r9, r6, r9
 8000e70:	f8c8 3010 	str.w	r3, [r8, #16]
 8000e74:	ea45 050a 	orr.w	r5, r5, sl
     ret = gpio_add_callback(cfg->hu_gpio.port, &data->gpio_cb);
 8000e78:	4639      	mov	r1, r7
     uint32_t pin_mask = BIT(cfg->hu_gpio.pin) | BIT(cfg->hv_gpio.pin) | BIT(cfg->hw_gpio.pin);
 8000e7a:	ea45 0509 	orr.w	r5, r5, r9
	callback->pin_mask = pin_mask;
 8000e7e:	f8c8 5014 	str.w	r5, [r8, #20]
     ret = gpio_add_callback(cfg->hu_gpio.port, &data->gpio_cb);
 8000e82:	69a0      	ldr	r0, [r4, #24]
 8000e84:	f005 fed3 	bl	8006c2e <gpio_add_callback>
 8000e88:	4605      	mov	r5, r0
     ret |= gpio_add_callback(cfg->hv_gpio.port, &data->gpio_cb);
 8000e8a:	4639      	mov	r1, r7
 8000e8c:	6a20      	ldr	r0, [r4, #32]
 8000e8e:	f005 fece 	bl	8006c2e <gpio_add_callback>
 8000e92:	4305      	orrs	r5, r0
     ret |= gpio_add_callback(cfg->hw_gpio.port, &data->gpio_cb);
 8000e94:	4639      	mov	r1, r7
 8000e96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e98:	f005 fec9 	bl	8006c2e <gpio_add_callback>
     if (ret < 0) {
 8000e9c:	4305      	orrs	r5, r0
 8000e9e:	f57f af7a 	bpl.w	8000d96 <stm32_abz_hall_init+0x72>
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <stm32_abz_hall_init+0x1a0>)
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e773      	b.n	8000d90 <stm32_abz_hall_init+0x6c>
 8000ea8:	08009d70 	.word	0x08009d70
 8000eac:	08008cac 	.word	0x08008cac
 8000eb0:	08009e26 	.word	0x08009e26
 8000eb4:	08009e5b 	.word	0x08009e5b
 8000eb8:	0800855c 	.word	0x0800855c
 8000ebc:	08009d8a 	.word	0x08009d8a
 8000ec0:	08000ca1 	.word	0x08000ca1
 8000ec4:	08009e44 	.word	0x08009e44

08000ec8 <motor_thread_entry.part.0>:
const struct device *motor1 = DEVICE_DT_GET(MOTOR1_NODE);

#define LED0_NODE DT_ALIAS(led0)
const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void motor_thread_entry(void *p1, void *p2, void *p3)
 8000ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (!device_is_ready(led.port)) {
        printk("Error: LED device not ready\n");
        return;
    }

    int ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
 8000eca:	4825      	ldr	r0, [pc, #148]	; (8000f60 <motor_thread_entry.part.0+0x98>)
 8000ecc:	f005 fee2 	bl	8006c94 <gpio_pin_configure_dt.constprop.0>
    if (ret < 0) {
 8000ed0:	1e01      	subs	r1, r0, #0
 8000ed2:	da02      	bge.n	8000eda <motor_thread_entry.part.0+0x12>
        printk("Error %d: failed to configure LED\n", ret);
 8000ed4:	4823      	ldr	r0, [pc, #140]	; (8000f64 <motor_thread_entry.part.0+0x9c>)
 8000ed6:	f006 f845 	bl	8006f64 <printk>
    }

    const struct gpio_dt_spec mot12_brk = GPIO_DT_SPEC_GET(MOT12_BRK_PIN_NODE, gpios);
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <motor_thread_entry.part.0+0xa0>)
    ret = gpio_pin_configure_dt(&mot12_brk, GPIO_OUTPUT_ACTIVE);
 8000edc:	4668      	mov	r0, sp
    const struct gpio_dt_spec mot12_brk = GPIO_DT_SPEC_GET(MOT12_BRK_PIN_NODE, gpios);
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret = gpio_pin_configure_dt(&mot12_brk, GPIO_OUTPUT_ACTIVE);
 8000eec:	f005 fed2 	bl	8006c94 <gpio_pin_configure_dt.constprop.0>
    if (ret < 0) {
 8000ef0:	1e01      	subs	r1, r0, #0
 8000ef2:	da02      	bge.n	8000efa <motor_thread_entry.part.0+0x32>
        printk("Error %d: Failed to configure brake pin\n", ret);
 8000ef4:	481d      	ldr	r0, [pc, #116]	; (8000f6c <motor_thread_entry.part.0+0xa4>)
 8000ef6:	f006 f835 	bl	8006f64 <printk>
    }
    // gpio_pin_set(mot12_brk.port, mot12_brk.pin,1);
	const struct gpio_dt_spec encoder_vcc = GPIO_DT_SPEC_GET(ENCODER_VCC, gpios);
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <motor_thread_entry.part.0+0xa8>)
    ret = gpio_pin_configure_dt(&encoder_vcc, GPIO_OUTPUT_ACTIVE);
 8000efc:	a802      	add	r0, sp, #8
	const struct gpio_dt_spec encoder_vcc = GPIO_DT_SPEC_GET(ENCODER_VCC, gpios);
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2303      	movs	r3, #3
 8000f02:	f88d 300c 	strb.w	r3, [sp, #12]
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8ad 300e 	strh.w	r3, [sp, #14]
    ret = gpio_pin_configure_dt(&encoder_vcc, GPIO_OUTPUT_ACTIVE);
 8000f0c:	f005 fec2 	bl	8006c94 <gpio_pin_configure_dt.constprop.0>
    if (ret < 0) {
 8000f10:	1e01      	subs	r1, r0, #0
 8000f12:	da02      	bge.n	8000f1a <motor_thread_entry.part.0+0x52>
        printk("Error %d: Failed to configure brake pin\n", ret);
 8000f14:	4815      	ldr	r0, [pc, #84]	; (8000f6c <motor_thread_entry.part.0+0xa4>)
 8000f16:	f006 f825 	bl	8006f64 <printk>
    }
	LOG_INF("main statr"); 
    if (!device_is_ready(motor0)) {
 8000f1a:	4c16      	ldr	r4, [pc, #88]	; (8000f74 <motor_thread_entry.part.0+0xac>)
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <motor_thread_entry.part.0+0xb0>)
 8000f20:	4816      	ldr	r0, [pc, #88]	; (8000f7c <motor_thread_entry.part.0+0xb4>)
 8000f22:	f006 fb3f 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
 8000f26:	6820      	ldr	r0, [r4, #0]
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
	return z_impl_device_is_ready(dev);
 8000f28:	f006 ff59 	bl	8007dde <z_impl_device_is_ready>
 8000f2c:	b938      	cbnz	r0, 8000f3e <motor_thread_entry.part.0+0x76>
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <motor_thread_entry.part.0+0xb8>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <motor_thread_entry.part.0+0xb4>)
    while (1) {
        // gpio_pin_set_dt(&led, 1);
        k_msleep(1);
        // gpio_pin_toggle_dt(&led);
    }
}
 8000f34:	b004      	add	sp, #16
 8000f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f3a:	f006 bb33 	b.w	80075a4 <z_impl_z_log_msg_simple_create_0>
	foc_start(motor0);
 8000f3e:	6820      	ldr	r0, [r4, #0]
    if (!device_is_ready(motor1)) {
 8000f40:	4c10      	ldr	r4, [pc, #64]	; (8000f84 <motor_thread_entry.part.0+0xbc>)
	foc_start(motor0);
 8000f42:	f005 fec8 	bl	8006cd6 <foc_start>
    if (!device_is_ready(motor1)) {
 8000f46:	6820      	ldr	r0, [r4, #0]
 8000f48:	f006 ff49 	bl	8007dde <z_impl_device_is_ready>
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d0ee      	beq.n	8000f2e <motor_thread_entry.part.0+0x66>
	foc_start(motor1);	
 8000f50:	6820      	ldr	r0, [r4, #0]
 8000f52:	f005 fec0 	bl	8006cd6 <foc_start>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000f56:	2100      	movs	r1, #0
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f007 f823 	bl	8007fa4 <z_impl_k_sleep>
 8000f5e:	e7fa      	b.n	8000f56 <motor_thread_entry.part.0+0x8e>
 8000f60:	080091cc 	.word	0x080091cc
 8000f64:	08009ea1 	.word	0x08009ea1
 8000f68:	0800864c 	.word	0x0800864c
 8000f6c:	08009ec4 	.word	0x08009ec4
 8000f70:	08008624 	.word	0x08008624
 8000f74:	24000504 	.word	0x24000504
 8000f78:	08009eed 	.word	0x08009eed
 8000f7c:	08008ce4 	.word	0x08008ce4
 8000f80:	08009ef8 	.word	0x08009ef8
 8000f84:	24000500 	.word	0x24000500

08000f88 <motor_thread_entry>:
{
 8000f88:	b508      	push	{r3, lr}
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <motor_thread_entry+0x1c>)
 8000f8c:	f006 ff27 	bl	8007dde <z_impl_device_is_ready>
    if (!device_is_ready(led.port)) {
 8000f90:	b920      	cbnz	r0, 8000f9c <motor_thread_entry+0x14>
        printk("Error: LED device not ready\n");
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <motor_thread_entry+0x20>)
}
 8000f94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Error: LED device not ready\n");
 8000f98:	f005 bfe4 	b.w	8006f64 <printk>
}
 8000f9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000fa0:	f7ff bf92 	b.w	8000ec8 <motor_thread_entry.part.0>
 8000fa4:	08008610 	.word	0x08008610
 8000fa8:	08009f14 	.word	0x08009f14

08000fac <foc_init>:

    return;

}
static int foc_init(const struct device* dev)
{
 8000fac:	b598      	push	{r3, r4, r7, lr}
    const struct foc_config *cfg = dev->config;
    const struct device *currsmp = cfg->currsmp;
 8000fae:	6843      	ldr	r3, [r0, #4]
{
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	af00      	add	r7, sp, #0
                      currsmp_regulation_cb_t regulation_cb,
                      void *ctx)
 {
     const struct currsmp_driver_api *api = dev->api;
 
     api->configure(dev, regulation_cb, ctx);
 8000fb4:	490d      	ldr	r1, [pc, #52]	; (8000fec <foc_init+0x40>)
    const struct device *currsmp = cfg->currsmp;
 8000fb6:	6858      	ldr	r0, [r3, #4]
 8000fb8:	4622      	mov	r2, r4
 8000fba:	6883      	ldr	r3, [r0, #8]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4798      	blx	r3
    currsmp_configure(currsmp,foc_curr_regulator,(void *)dev);
    LOG_INF("foc_init  name :%s",dev->name);
 8000fc0:	b088      	sub	sp, #32
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	466a      	mov	r2, sp
 8000fc6:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <foc_init+0x44>)
 8000fc8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	8393      	strh	r3, [r2, #28]
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <foc_init+0x48>)
 8000fd4:	f842 3f10 	str.w	r3, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <foc_init+0x4c>)
 8000fe0:	f000 ffdc 	bl	8001f9c <z_impl_z_log_msg_static_create>
    return 0;
}
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd98      	pop	{r3, r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08001029 	.word	0x08001029
 8000ff0:	08009f3e 	.word	0x08009f3e
 8000ff4:	01000003 	.word	0x01000003
 8000ff8:	08008cc4 	.word	0x08008cc4

08000ffc <gpio_pin_set_dt.constprop.0.isra.0>:
	return gpio_pin_set(spec->port, spec->pin, value);
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8000ffe:	4603      	mov	r3, r0
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8001000:	2101      	movs	r1, #1
	return gpio_pin_set(spec->port, spec->pin, value);
 8001002:	6810      	ldr	r0, [r2, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8001004:	7912      	ldrb	r2, [r2, #4]
 8001006:	4091      	lsls	r1, r2
 8001008:	6902      	ldr	r2, [r0, #16]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	4211      	tst	r1, r2
		value = (value != 0) ? 0 : 1;
 800100e:	bf18      	it	ne
 8001010:	f083 0301 	eorne.w	r3, r3, #1
	if (value != 0)	{
 8001014:	b113      	cbz	r3, 800101c <gpio_pin_set_dt.constprop.0.isra.0+0x20>
	ret = api->port_set_bits_raw(port, pins);
 8001016:	6883      	ldr	r3, [r0, #8]
 8001018:	68db      	ldr	r3, [r3, #12]
	ret = api->port_clear_bits_raw(port, pins);
 800101a:	4718      	bx	r3
 800101c:	6883      	ldr	r3, [r0, #8]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	e7fb      	b.n	800101a <gpio_pin_set_dt.constprop.0.isra.0+0x1e>
 8001022:	bf00      	nop
 8001024:	080091cc 	.word	0x080091cc

08001028 <foc_curr_regulator>:
{    
 8001028:	b570      	push	{r4, r5, r6, lr}
    struct foc_config *cfg = (struct foc_config *)dev->config;
 800102a:	6845      	ldr	r5, [r0, #4]
{    
 800102c:	b086      	sub	sp, #24
    struct foc_data *data = dev->data;
 800102e:	6904      	ldr	r4, [r0, #16]
    gpio_pin_set_dt(&led, 1);
 8001030:	2001      	movs	r0, #1
    struct device *currsmp = (struct device *)cfg->currsmp;
 8001032:	686e      	ldr	r6, [r5, #4]
    gpio_pin_set_dt(&led, 1);
 8001034:	f7ff ffe2 	bl	8000ffc <gpio_pin_set_dt.constprop.0.isra.0>
  */
 static inline void currsmp_get_currents(const struct device *dev,
                     struct currsmp_curr *curr)
 {
     const struct currsmp_driver_api *api = dev->api;
     api->get_currents(dev, curr);
 8001038:	a903      	add	r1, sp, #12
 800103a:	68b3      	ldr	r3, [r6, #8]
 800103c:	4630      	mov	r0, r6
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4798      	blx	r3
    sin_cos_f32(data->self_theta,&sin_the,&cos_the);
 8001042:	a902      	add	r1, sp, #8
 8001044:	a801      	add	r0, sp, #4
 8001046:	ed94 0a01 	vldr	s0, [r4, #4]
 800104a:	f003 f84f 	bl	80040ec <arm_sin_cos_f32>
    data->self_theta += 0.02f;
 800104e:	edd4 7a01 	vldr	s15, [r4, #4]
 8001052:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80010a0 <foc_curr_regulator+0x78>
    inv_park_f32(0.0f,0.02f,&alph,&beta,sin_the,cos_the);
 8001056:	eddd 6a01 	vldr	s13, [sp, #4]
 800105a:	ed9d 7a02 	vldr	s14, [sp, #8]
    data->self_theta += 0.02f;
 800105e:	ee77 7a80 	vadd.f32	s15, s15, s0
        cfg->modulate(data->svm_handle, alph, beta);
 8001062:	6820      	ldr	r0, [r4, #0]
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 8001064:	ee67 0a00 	vmul.f32	s1, s14, s0
    *pIalpha = Id * cosVal - Iq * sinVal;
 8001068:	ee26 0a80 	vmul.f32	s0, s13, s0
    data->self_theta += 0.02f;
 800106c:	edc4 7a01 	vstr	s15, [r4, #4]
    *pIbeta = Id * sinVal + Iq * cosVal;
 8001070:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80010a4 <foc_curr_regulator+0x7c>
        cfg->modulate(data->svm_handle, alph, beta);
 8001074:	68eb      	ldr	r3, [r5, #12]
 8001076:	ee46 0aa7 	vmla.f32	s1, s13, s15
 800107a:	ee17 0a27 	vnmls.f32	s0, s14, s15
 800107e:	4798      	blx	r3
    pwm_set_phase_voltages(cfg->pwm,0.5f,0.5f,0.5f);
 8001080:	6828      	ldr	r0, [r5, #0]
 
     /* normalization */
    //  a = (ua + 1.0f) * 0.5f;
    //  b = (ub + 1.0f) * 0.5f;
    //  c = (uc + 1.0f) * 0.5f;
     api->set_phase_voltages(dev, ua, ub, uc);
 8001082:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001086:	6883      	ldr	r3, [r0, #8]
 8001088:	eef0 0a41 	vmov.f32	s1, s2
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	eeb0 0a41 	vmov.f32	s0, s2
 8001092:	4798      	blx	r3
    gpio_pin_set_dt(&led, 0);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ffb1 	bl	8000ffc <gpio_pin_set_dt.constprop.0.isra.0>
}
 800109a:	b006      	add	sp, #24
 800109c:	bd70      	pop	{r4, r5, r6, pc}
 800109e:	bf00      	nop
 80010a0:	3ca3d70a 	.word	0x3ca3d70a
 80010a4:	00000000 	.word	0x00000000

080010a8 <svm_set>:
{
     //判断扇区
    unsigned char sector;
    sector = 0;
    /*-------------------------------*/
    if(vb*(1<<15) > 0) {
 80010a8:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8001228 <svm_set+0x180>
        sector = 1;
    }
    if(((SQRT_3 * va - vb)/2.0F*(1<<15)) > 0) {
 80010ac:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80010b0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800122c <svm_set+0x184>
    if(vb*(1<<15) > 0) {
 80010b4:	ee60 7a86 	vmul.f32	s15, s1, s12
 80010b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    if(((SQRT_3 * va - vb)/2.0F*(1<<15)) > 0) {
 80010bc:	ee60 7a07 	vmul.f32	s15, s0, s14
    if(vb*(1<<15) > 0) {
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(((SQRT_3 * va - vb)/2.0F*(1<<15)) > 0) {
 80010c4:	ee77 6ae0 	vsub.f32	s13, s15, s1
        sector += 2;
    }
    if(((-SQRT_3 * va - vb) / 2.0F)*(1<<15) > 0) {
 80010c8:	eef1 7a67 	vneg.f32	s15, s15
    if(vb*(1<<15) > 0) {
 80010cc:	bfcc      	ite	gt
 80010ce:	2301      	movgt	r3, #1
 80010d0:	2300      	movle	r3, #0
    if(((SQRT_3 * va - vb)/2.0F*(1<<15)) > 0) {
 80010d2:	ee66 6a85 	vmul.f32	s13, s13, s10
    if(((-SQRT_3 * va - vb) / 2.0F)*(1<<15) > 0) {
 80010d6:	ee77 7ae0 	vsub.f32	s15, s15, s1
    if(((SQRT_3 * va - vb)/2.0F*(1<<15)) > 0) {
 80010da:	ee66 6a86 	vmul.f32	s13, s13, s12
    if(((-SQRT_3 * va - vb) / 2.0F)*(1<<15) > 0) {
 80010de:	ee67 7a85 	vmul.f32	s15, s15, s10
    if(((SQRT_3 * va - vb)/2.0F*(1<<15)) > 0) {
 80010e2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    if(((-SQRT_3 * va - vb) / 2.0F)*(1<<15) > 0) {
 80010e6:	ee67 7a86 	vmul.f32	s15, s15, s12
    if(((SQRT_3 * va - vb)/2.0F*(1<<15)) > 0) {
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(((-SQRT_3 * va - vb) / 2.0F)*(1<<15) > 0) {
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        sector += 4;
    }
    //计算对应扇区的换相时间
    float X,Y,Z;
    X = (SQRT_3 * vb * T_UDC);
 80010f2:	ee60 7a87 	vmul.f32	s15, s1, s14
        sector += 2;
 80010f6:	bfc8      	it	gt
 80010f8:	3302      	addgt	r3, #2
    Y = (1.5F * va + SQRT_3/2.0f * vb) * T_UDC;
 80010fa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    if(((-SQRT_3 * va - vb) / 2.0F)*(1<<15) > 0) {
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Y = (1.5F * va + SQRT_3/2.0f * vb) * T_UDC;
 8001102:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001106:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001230 <svm_set+0x188>
        sector += 4;
 800110a:	bfc8      	it	gt
 800110c:	3304      	addgt	r3, #4
    Y = (1.5F * va + SQRT_3/2.0f * vb) * T_UDC;
 800110e:	ee60 0a87 	vmul.f32	s1, s1, s14
        sector += 4;
 8001112:	bfc8      	it	gt
 8001114:	b2db      	uxtbgt	r3, r3
    Z = (-1.5F * va + SQRT_3/2.0f * vb) * T_UDC;

    float s_vector = 0.0f,m_vector = 0.0f;
    switch (sector) {
 8001116:	3b01      	subs	r3, #1
    Y = (1.5F * va + SQRT_3/2.0f * vb) * T_UDC;
 8001118:	ee30 6a20 	vadd.f32	s12, s0, s1
    Z = (-1.5F * va + SQRT_3/2.0f * vb) * T_UDC;
 800111c:	ee70 0ac0 	vsub.f32	s1, s1, s0
    switch (sector) {
 8001120:	2b04      	cmp	r3, #4
 8001122:	d83b      	bhi.n	800119c <svm_set+0xf4>
 8001124:	e8df f003 	tbb	[pc, r3]
 8001128:	302b0307 	.word	0x302b0307
 800112c:	35          	.byte	0x35
 800112d:	00          	.byte	0x00
            m_vector = Z;
            s_vector = Y;
        break;

        case 2:
            m_vector = Y;
 800112e:	eef0 0a46 	vmov.f32	s1, s12
            s_vector = -X;
 8001132:	eeb1 6a67 	vneg.f32	s12, s15
            m_vector = -Y;
            s_vector = -Z;
        break;
    }
    /*--------------------限制矢量圆----------------------*/
    if (m_vector + s_vector > PWM_TS) 
 8001136:	ee76 7a20 	vadd.f32	s15, s12, s1
 800113a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
        m_vector = (m_vector/(sum)*PWM_TS);
        s_vector = (s_vector/(sum)*PWM_TS);
    }
    /*---------------------------------------------------*/
    float Ta,Tb,Tc;
    Ta = (PWM_TS - (m_vector + s_vector)) / 4.0F;  
 800113e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    if (m_vector + s_vector > PWM_TS) 
 8001142:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        m_vector = (m_vector/(sum)*PWM_TS);
 800114a:	bfc4      	itt	gt
 800114c:	eec0 0aa7 	vdivgt.f32	s1, s1, s15
        s_vector = (s_vector/(sum)*PWM_TS);
 8001150:	ee86 6a27 	vdivgt.f32	s12, s12, s15
    Ta = (PWM_TS - (m_vector + s_vector)) / 4.0F;  
 8001154:	ee76 7a20 	vadd.f32	s15, s12, s1
 8001158:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
    Tb = Ta + m_vector/2.0f;
 8001160:	eeb0 7a67 	vmov.f32	s14, s15
 8001164:	ee00 7a85 	vmla.f32	s14, s1, s10
    Tc = Tb + s_vector/2.0f;
 8001168:	eef0 6a47 	vmov.f32	s13, s14
 800116c:	ee46 6a05 	vmla.f32	s13, s12, s10
    /*------------------------换相点---------------------*/
    float Tcmp1 = 0.0f;
    float Tcmp2 = 0.0f;
    float Tcmp3 = 0.0f;
    switch (sector) {
 8001170:	2b05      	cmp	r3, #5
 8001172:	d818      	bhi.n	80011a6 <svm_set+0xfe>
 8001174:	e8df f003 	tbb	[pc, r3]
 8001178:	4740391d 	.word	0x4740391d
 800117c:	554e      	.short	0x554e
            m_vector = -Z;
 800117e:	eef1 0a60 	vneg.f32	s1, s1
            s_vector = X;
 8001182:	eeb0 6a67 	vmov.f32	s12, s15
        break;
 8001186:	e7d6      	b.n	8001136 <svm_set+0x8e>
            s_vector = Z;
 8001188:	eeb0 6a60 	vmov.f32	s12, s1
            m_vector = -X;
 800118c:	eef1 0a67 	vneg.f32	s1, s15
        break;
 8001190:	e7d1      	b.n	8001136 <svm_set+0x8e>
            s_vector = -Y;
 8001192:	eeb1 6a46 	vneg.f32	s12, s12
            m_vector = -Y;
 8001196:	eef0 0a67 	vmov.f32	s1, s15
        break;
 800119a:	e7cc      	b.n	8001136 <svm_set+0x8e>
            m_vector = -Y;
 800119c:	eef1 7a46 	vneg.f32	s15, s12
            s_vector = -Z;
 80011a0:	eeb1 6a60 	vneg.f32	s12, s1
 80011a4:	e7f7      	b.n	8001196 <svm_set+0xee>
    float Tcmp3 = 0.0f;
 80011a6:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001234 <svm_set+0x18c>
    float Tcmp2 = 0.0f;
 80011aa:	eef0 7a66 	vmov.f32	s15, s13
    float Tcmp1 = 0.0f;
 80011ae:	eeb0 7a66 	vmov.f32	s14, s13

    /*-------------------------占空比---------------------------*/
    // svm->duties.a =(PWM_TS - Tcmp1*2.0f )/PWM_TS;
    // svm->duties.b =(PWM_TS - Tcmp2*2.0f )/PWM_TS;
    // svm->duties.c =(PWM_TS - Tcmp3*2.0f )/PWM_TS;
    if (svm) {
 80011b2:	b1c8      	cbz	r0, 80011e8 <svm_set+0x140>
        svm->a = (PWM_TS - Tcmp1*2.0f )/PWM_TS*10000;
 80011b4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80011b8:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8001238 <svm_set+0x190>
        svm->b = (PWM_TS - Tcmp2*2.0f )/PWM_TS*10000;
 80011bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
        svm->c = (PWM_TS - Tcmp3*2.0f )/PWM_TS*10000;
 80011c0:	ee76 6aa6 	vadd.f32	s13, s13, s13
        svm->a = (PWM_TS - Tcmp1*2.0f )/PWM_TS*10000;
 80011c4:	ee35 7ac7 	vsub.f32	s14, s11, s14
        svm->b = (PWM_TS - Tcmp2*2.0f )/PWM_TS*10000;
 80011c8:	ee75 7ae7 	vsub.f32	s15, s11, s15
        svm->c = (PWM_TS - Tcmp3*2.0f )/PWM_TS*10000;
 80011cc:	ee75 5ae6 	vsub.f32	s11, s11, s13
        svm->a = (PWM_TS - Tcmp1*2.0f )/PWM_TS*10000;
 80011d0:	ee27 7a06 	vmul.f32	s14, s14, s12
        svm->b = (PWM_TS - Tcmp2*2.0f )/PWM_TS*10000;
 80011d4:	ee67 7a86 	vmul.f32	s15, s15, s12
        svm->c = (PWM_TS - Tcmp3*2.0f )/PWM_TS*10000;
 80011d8:	ee65 5a86 	vmul.f32	s11, s11, s12
        svm->a = (PWM_TS - Tcmp1*2.0f )/PWM_TS*10000;
 80011dc:	ed80 7a03 	vstr	s14, [r0, #12]
        svm->b = (PWM_TS - Tcmp2*2.0f )/PWM_TS*10000;
 80011e0:	edc0 7a04 	vstr	s15, [r0, #16]
        svm->c = (PWM_TS - Tcmp3*2.0f )/PWM_TS*10000;
 80011e4:	edc0 5a05 	vstr	s11, [r0, #20]
    }

    // svm->duties.a = CLAMP(svm->duties.a, svm->d_min, svm->d_max);
	// svm->duties.b = CLAMP(svm->duties.b, svm->d_min, svm->d_max);
	// svm->duties.c = CLAMP(svm->duties.c, svm->d_min, svm->d_max);
}
 80011e8:	4770      	bx	lr
        case 2:Tcmp1 = Ta;Tcmp2 = Tc;Tcmp3 = Tb;break;
 80011ea:	eeb0 6a47 	vmov.f32	s12, s14
 80011ee:	eeb0 7a67 	vmov.f32	s14, s15
        case 6:Tcmp1 = Tb;Tcmp2 = Tc;Tcmp3 = Ta;break;
 80011f2:	eef0 7a66 	vmov.f32	s15, s13
 80011f6:	e011      	b.n	800121c <svm_set+0x174>
        case 3:Tcmp1 = Ta;Tcmp2 = Tb;Tcmp3 = Tc;break;
 80011f8:	eeb0 6a47 	vmov.f32	s12, s14
 80011fc:	eeb0 7a67 	vmov.f32	s14, s15
        case 4:Tcmp1 = Tc;Tcmp2 = Tb;Tcmp3 = Ta;break;
 8001200:	eef0 7a46 	vmov.f32	s15, s12
 8001204:	e7d5      	b.n	80011b2 <svm_set+0x10a>
 8001206:	eeb0 6a47 	vmov.f32	s12, s14
 800120a:	eeb0 7a66 	vmov.f32	s14, s13
 800120e:	eef0 6a67 	vmov.f32	s13, s15
 8001212:	e7f5      	b.n	8001200 <svm_set+0x158>
        case 5:Tcmp1 = Tc;Tcmp2 = Ta;Tcmp3 = Tb;break;
 8001214:	eeb0 6a47 	vmov.f32	s12, s14
 8001218:	eeb0 7a66 	vmov.f32	s14, s13
        case 6:Tcmp1 = Tb;Tcmp2 = Tc;Tcmp3 = Ta;break;
 800121c:	eef0 6a46 	vmov.f32	s13, s12
 8001220:	e7c7      	b.n	80011b2 <svm_set+0x10a>
 8001222:	eeb0 6a67 	vmov.f32	s12, s15
 8001226:	e7e4      	b.n	80011f2 <svm_set+0x14a>
 8001228:	47000000 	.word	0x47000000
 800122c:	3fddb3d7 	.word	0x3fddb3d7
 8001230:	3f5db3d7 	.word	0x3f5db3d7
 8001234:	00000000 	.word	0x00000000
 8001238:	461c4000 	.word	0x461c4000

0800123c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 800123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001240:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8001242:	0784      	lsls	r4, r0, #30
{
 8001244:	4605      	mov	r5, r0
 8001246:	460e      	mov	r6, r1
 8001248:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 800124a:	f002 0304 	and.w	r3, r2, #4
 800124e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8001252:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8001254:	f3c2 03c2 	ubfx	r3, r2, #3, #3
{
 8001258:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 800125a:	f103 0301 	add.w	r3, r3, #1
 800125e:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
 8001260:	f040 81ba 	bne.w	80015d8 <cbvprintf_package+0x39c>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
 8001264:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8001266:	b130      	cbz	r0, 8001276 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if ((buf0 != NULL) && (BUF_OFFSET + sizeof(char *)) > len) {
 8001268:	2907      	cmp	r1, #7
 800126a:	d809      	bhi.n	8001280 <cbvprintf_package+0x44>
		return -ENOSPC;
 800126c:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8001270:	b011      	add	sp, #68	; 0x44
 8001272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 8001276:	f001 0607 	and.w	r6, r1, #7
 800127a:	4434      	add	r4, r6
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 800127c:	f1c6 0608 	rsb	r6, r6, #8
	--fmt;
 8001280:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8001282:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
 8001286:	f04f 0a04 	mov.w	sl, #4
	--fmt;
 800128a:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
 800128c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 8001290:	464f      	mov	r7, r9
	bool parsing = false;
 8001292:	46cb      	mov	fp, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
 8001294:	9301      	str	r3, [sp, #4]
	size = sizeof(char *);
 8001296:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8001298:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
 800129c:	b10d      	cbz	r5, 80012a2 <cbvprintf_package+0x66>
				*(const char **)buf = s;
 800129e:	9800      	ldr	r0, [sp, #0]
 80012a0:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80012a2:	9805      	ldr	r0, [sp, #20]
 80012a4:	2800      	cmp	r0, #0
 80012a6:	f300 80e8 	bgt.w	800147a <cbvprintf_package+0x23e>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 80012aa:	4898      	ldr	r0, [pc, #608]	; (800150c <cbvprintf_package+0x2d0>)
 80012ac:	9a00      	ldr	r2, [sp, #0]
 80012ae:	4282      	cmp	r2, r0
 80012b0:	d303      	bcc.n	80012ba <cbvprintf_package+0x7e>
 80012b2:	4897      	ldr	r0, [pc, #604]	; (8001510 <cbvprintf_package+0x2d4>)
 80012b4:	4282      	cmp	r2, r0
 80012b6:	f0c0 80e0 	bcc.w	800147a <cbvprintf_package+0x23e>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 80012ba:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 80012bc:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 80012c0:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 80012c2:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 80012c6:	f100 8103 	bmi.w	80014d0 <cbvprintf_package+0x294>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 80012ca:	2f0f      	cmp	r7, #15
 80012cc:	f200 80b1 	bhi.w	8001432 <cbvprintf_package+0x1f6>
				if (buf0 != NULL) {
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	f000 8105 	beq.w	80014e0 <cbvprintf_package+0x2a4>
					str_ptr_pos[s_idx] = s_ptr_idx;
 80012d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80012da:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
 80012de:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
 80012e0:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
 80012e4:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
 80012e8:	9804      	ldr	r0, [sp, #16]
 80012ea:	3001      	adds	r0, #1
 80012ec:	9004      	str	r0, [sp, #16]
 80012ee:	e0e7      	b.n	80014c0 <cbvprintf_package+0x284>
			switch (*fmt) {
 80012f0:	287a      	cmp	r0, #122	; 0x7a
 80012f2:	d85d      	bhi.n	80013b0 <cbvprintf_package+0x174>
 80012f4:	284b      	cmp	r0, #75	; 0x4b
 80012f6:	d80e      	bhi.n	8001316 <cbvprintf_package+0xda>
 80012f8:	2847      	cmp	r0, #71	; 0x47
 80012fa:	d859      	bhi.n	80013b0 <cbvprintf_package+0x174>
 80012fc:	2829      	cmp	r0, #41	; 0x29
 80012fe:	d82d      	bhi.n	800135c <cbvprintf_package+0x120>
 8001300:	2825      	cmp	r0, #37	; 0x25
 8001302:	d052      	beq.n	80013aa <cbvprintf_package+0x16e>
 8001304:	d854      	bhi.n	80013b0 <cbvprintf_package+0x174>
 8001306:	2820      	cmp	r0, #32
 8001308:	d07a      	beq.n	8001400 <cbvprintf_package+0x1c4>
 800130a:	3823      	subs	r0, #35	; 0x23
 800130c:	f1d0 0b00 	rsbs	fp, r0, #0
 8001310:	eb4b 0b00 	adc.w	fp, fp, r0
 8001314:	e074      	b.n	8001400 <cbvprintf_package+0x1c4>
 8001316:	384c      	subs	r0, #76	; 0x4c
 8001318:	282e      	cmp	r0, #46	; 0x2e
 800131a:	d849      	bhi.n	80013b0 <cbvprintf_package+0x174>
 800131c:	e8df f000 	tbb	[pc, r0]
 8001320:	48484870 	.word	0x48484870
 8001324:	48484848 	.word	0x48484848
 8001328:	48484848 	.word	0x48484848
 800132c:	4848484b 	.word	0x4848484b
 8001330:	48484848 	.word	0x48484848
 8001334:	4b485948 	.word	0x4b485948
 8001338:	5959594b 	.word	0x5959594b
 800133c:	486d4b70 	.word	0x486d4b70
 8001340:	4b184870 	.word	0x4b184870
 8001344:	82484818 	.word	0x82484818
 8001348:	48484b7f 	.word	0x48484b7f
 800134c:	484b      	.short	0x484b
 800134e:	7f          	.byte	0x7f
 800134f:	00          	.byte	0x00
 8001350:	2000      	movs	r0, #0
 8001352:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
 8001356:	f04f 0a04 	mov.w	sl, #4
 800135a:	e038      	b.n	80013ce <cbvprintf_package+0x192>
			switch (*fmt) {
 800135c:	382a      	subs	r0, #42	; 0x2a
 800135e:	2201      	movs	r2, #1
 8001360:	b2c0      	uxtb	r0, r0
 8001362:	fa02 f000 	lsl.w	r0, r2, r0
 8001366:	ea10 0f0e 	tst.w	r0, lr
 800136a:	d149      	bne.n	8001400 <cbvprintf_package+0x1c4>
 800136c:	f010 5c62 	ands.w	ip, r0, #947912704	; 0x38800000
 8001370:	d12f      	bne.n	80013d2 <cbvprintf_package+0x196>
 8001372:	ea10 0b02 	ands.w	fp, r0, r2
 8001376:	d043      	beq.n	8001400 <cbvprintf_package+0x1c4>
 8001378:	4660      	mov	r0, ip
		buf = ROUND_UP(buf, align);
 800137a:	3c01      	subs	r4, #1
 800137c:	4454      	add	r4, sl
 800137e:	fbb4 f4fa 	udiv	r4, r4, sl
 8001382:	fb0a f404 	mul.w	r4, sl, r4
		if ((buf0 != NULL) && (BUF_OFFSET + size) > len) {
 8001386:	2d00      	cmp	r5, #0
 8001388:	d061      	beq.n	800144e <cbvprintf_package+0x212>
 800138a:	eba3 0c05 	sub.w	ip, r3, r5
 800138e:	44a4      	add	ip, r4
 8001390:	45b4      	cmp	ip, r6
 8001392:	f63f af6b 	bhi.w	800126c <cbvprintf_package+0x30>
		if (is_str_arg) {
 8001396:	2800      	cmp	r0, #0
 8001398:	d168      	bne.n	800146c <cbvprintf_package+0x230>
		} else if (size == sizeof(int)) {
 800139a:	2b04      	cmp	r3, #4
 800139c:	d147      	bne.n	800142e <cbvprintf_package+0x1f2>
			int v = va_arg(ap, int);
 800139e:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
 80013a2:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
 80013a4:	3404      	adds	r4, #4
 80013a6:	2304      	movs	r3, #4
 80013a8:	e02a      	b.n	8001400 <cbvprintf_package+0x1c4>
				arg_idx--;
 80013aa:	9a01      	ldr	r2, [sp, #4]
 80013ac:	3a01      	subs	r2, #1
 80013ae:	9201      	str	r2, [sp, #4]
				parsing = false;
 80013b0:	f04f 0b00 	mov.w	fp, #0
				continue;
 80013b4:	e024      	b.n	8001400 <cbvprintf_package+0x1c4>
				if (fmt[-1] == 'l') {
 80013b6:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80013ba:	286c      	cmp	r0, #108	; 0x6c
 80013bc:	d134      	bne.n	8001428 <cbvprintf_package+0x1ec>
					if (fmt[-2] == 'l') {
 80013be:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80013c2:	2000      	movs	r0, #0
 80013c4:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
 80013c6:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
 80013c8:	d1c5      	bne.n	8001356 <cbvprintf_package+0x11a>
						align = VA_STACK_ALIGN(long long);
 80013ca:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
 80013ce:	4653      	mov	r3, sl
 80013d0:	e7d3      	b.n	800137a <cbvprintf_package+0x13e>
					v.ld = va_arg(ap, long double);
 80013d2:	f108 0807 	add.w	r8, r8, #7
				buf = ROUND_UP(buf, align);
 80013d6:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
 80013d8:	f028 0807 	bic.w	r8, r8, #7
				buf = ROUND_UP(buf, align);
 80013dc:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
 80013e0:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
 80013e4:	b135      	cbz	r5, 80013f4 <cbvprintf_package+0x1b8>
					if (BUF_OFFSET + size > len) {
 80013e6:	9806      	ldr	r0, [sp, #24]
 80013e8:	4420      	add	r0, r4
 80013ea:	42b0      	cmp	r0, r6
 80013ec:	f63f af3e 	bhi.w	800126c <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
 80013f0:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
 80013f4:	3408      	adds	r4, #8
				parsing = false;
 80013f6:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
 80013fa:	f04f 0a08 	mov.w	sl, #8
 80013fe:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
 8001400:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8001404:	2800      	cmp	r0, #0
 8001406:	d078      	beq.n	80014fa <cbvprintf_package+0x2be>
			if (!parsing) {
 8001408:	f1bb 0f00 	cmp.w	fp, #0
 800140c:	f47f af70 	bne.w	80012f0 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
 8001410:	2825      	cmp	r0, #37	; 0x25
 8001412:	d1f5      	bne.n	8001400 <cbvprintf_package+0x1c4>
					arg_idx++;
 8001414:	9b01      	ldr	r3, [sp, #4]
					parsing = true;
 8001416:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
 800141a:	3301      	adds	r3, #1
 800141c:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
 800141e:	f04f 0a04 	mov.w	sl, #4
 8001422:	e7ec      	b.n	80013fe <cbvprintf_package+0x1c2>
			switch (*fmt) {
 8001424:	4658      	mov	r0, fp
 8001426:	e794      	b.n	8001352 <cbvprintf_package+0x116>
 8001428:	2000      	movs	r0, #0
				parsing = false;
 800142a:	4683      	mov	fp, r0
 800142c:	e7a5      	b.n	800137a <cbvprintf_package+0x13e>
		} else if (size == sizeof(long long)) {
 800142e:	2b08      	cmp	r3, #8
 8001430:	d002      	beq.n	8001438 <cbvprintf_package+0x1fc>
					return -EINVAL;
 8001432:	f06f 0015 	mvn.w	r0, #21
 8001436:	e71b      	b.n	8001270 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
 8001438:	f108 0807 	add.w	r8, r8, #7
 800143c:	f028 0807 	bic.w	r8, r8, #7
 8001440:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
 8001444:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
 8001448:	3408      	adds	r4, #8
 800144a:	2308      	movs	r3, #8
 800144c:	e7d8      	b.n	8001400 <cbvprintf_package+0x1c4>
		if (is_str_arg) {
 800144e:	b968      	cbnz	r0, 800146c <cbvprintf_package+0x230>
		} else if (size == sizeof(int)) {
 8001450:	2b04      	cmp	r3, #4
 8001452:	d102      	bne.n	800145a <cbvprintf_package+0x21e>
			int v = va_arg(ap, int);
 8001454:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
 8001458:	e7a4      	b.n	80013a4 <cbvprintf_package+0x168>
		} else if (size == sizeof(long long)) {
 800145a:	2b08      	cmp	r3, #8
 800145c:	d1e9      	bne.n	8001432 <cbvprintf_package+0x1f6>
			long long v = va_arg(ap, long long);
 800145e:	f108 0807 	add.w	r8, r8, #7
 8001462:	f028 0807 	bic.w	r8, r8, #7
 8001466:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
 800146a:	e7ed      	b.n	8001448 <cbvprintf_package+0x20c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 800146c:	9805      	ldr	r0, [sp, #20]
 800146e:	3801      	subs	r0, #1
 8001470:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
 8001472:	f858 0b04 	ldr.w	r0, [r8], #4
 8001476:	9000      	str	r0, [sp, #0]
 8001478:	e710      	b.n	800129c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
 800147a:	9a03      	ldr	r2, [sp, #12]
 800147c:	0790      	lsls	r0, r2, #30
 800147e:	d520      	bpl.n	80014c2 <cbvprintf_package+0x286>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8001480:	eba4 0e05 	sub.w	lr, r4, r5
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8001484:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8001488:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 800148c:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 8001490:	d2cf      	bcs.n	8001432 <cbvprintf_package+0x1f6>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 8001492:	2f0f      	cmp	r7, #15
 8001494:	d8cd      	bhi.n	8001432 <cbvprintf_package+0x1f6>
				if (buf0 != NULL) {
 8001496:	b1f5      	cbz	r5, 80014d6 <cbvprintf_package+0x29a>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8001498:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800149c:	b2c0      	uxtb	r0, r0
 800149e:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
 80014a2:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
 80014a4:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
 80014a8:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
 80014ac:	f1bc 0f00 	cmp.w	ip, #0
 80014b0:	f43f af1a 	beq.w	80012e8 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 80014b4:	f060 007f 	orn	r0, r0, #127	; 0x7f
						s_ro_cnt++;
 80014b8:	f109 0901 	add.w	r9, r9, #1
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 80014bc:	f80e 0c20 	strb.w	r0, [lr, #-32]
				s_idx++;
 80014c0:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
 80014c2:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
 80014c6:	3404      	adds	r4, #4
			switch (*fmt) {
 80014c8:	f64f 7eda 	movw	lr, #65498	; 0xffda
					if (BUF_OFFSET + size > len) {
 80014cc:	9206      	str	r2, [sp, #24]
 80014ce:	e797      	b.n	8001400 <cbvprintf_package+0x1c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80014d0:	f04f 0c00 	mov.w	ip, #0
 80014d4:	e7da      	b.n	800148c <cbvprintf_package+0x250>
				} else if (is_ro) {
 80014d6:	f1bc 0f00 	cmp.w	ip, #0
 80014da:	d001      	beq.n	80014e0 <cbvprintf_package+0x2a4>
					len += 1;
 80014dc:	3601      	adds	r6, #1
 80014de:	e7ef      	b.n	80014c0 <cbvprintf_package+0x284>
				} else if (rws_pos_en) {
 80014e0:	9a02      	ldr	r2, [sp, #8]
					len += 2;
 80014e2:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d1eb      	bne.n	80014c0 <cbvprintf_package+0x284>
					len += strlen(s) + 1 + 1;
 80014e8:	9800      	ldr	r0, [sp, #0]
 80014ea:	e9cd 3106 	strd	r3, r1, [sp, #24]
 80014ee:	f7fe ff07 	bl	8000300 <strlen>
 80014f2:	4406      	add	r6, r0
 80014f4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 80014f8:	e7e2      	b.n	80014c0 <cbvprintf_package+0x284>
	if ((BUF_OFFSET / sizeof(int)) > 255) {
 80014fa:	1b63      	subs	r3, r4, r5
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001500:	d297      	bcs.n	8001432 <cbvprintf_package+0x1f6>
	if (buf0 == NULL) {
 8001502:	b93d      	cbnz	r5, 8001514 <cbvprintf_package+0x2d8>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 8001504:	f1a6 0408 	sub.w	r4, r6, #8
 8001508:	18e0      	adds	r0, r4, r3
 800150a:	e6b1      	b.n	8001270 <cbvprintf_package+0x34>
 800150c:	0800847c 	.word	0x0800847c
 8001510:	0800a8f8 	.word	0x0800a8f8
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 8001514:	089b      	lsrs	r3, r3, #2
	if (rws_pos_en) {
 8001516:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
 8001518:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 800151a:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 800151c:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
 8001520:	b1c2      	cbz	r2, 8001554 <cbvprintf_package+0x318>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 8001522:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
 8001524:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt != 0U) {
 8001528:	f1b9 0f00 	cmp.w	r9, #0
 800152c:	d005      	beq.n	800153a <cbvprintf_package+0x2fe>
 800152e:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
 8001530:	2200      	movs	r2, #0
			if ((BUF_OFFSET + 1) > len) {
 8001532:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
 8001536:	4297      	cmp	r7, r2
 8001538:	d10e      	bne.n	8001558 <cbvprintf_package+0x31c>
		if ((BUF_OFFSET + 1 + size) > len) {
 800153a:	f1c5 0301 	rsb	r3, r5, #1
 800153e:	f10d 0820 	add.w	r8, sp, #32
			size = 0;
 8001542:	f04f 0a00 	mov.w	sl, #0
			*(uint8_t *)buf = str_ptr_arg[i];
 8001546:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
		if ((BUF_OFFSET + 1 + size) > len) {
 800154a:	9301      	str	r3, [sp, #4]
	for (i = 0; i < s_idx; i++) {
 800154c:	4557      	cmp	r7, sl
 800154e:	d112      	bne.n	8001576 <cbvprintf_package+0x33a>
	return BUF_OFFSET;
 8001550:	1b60      	subs	r0, r4, r5
 8001552:	e68d      	b.n	8001270 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
 8001554:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
 8001556:	e7e5      	b.n	8001524 <cbvprintf_package+0x2e8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 8001558:	f810 3b01 	ldrb.w	r3, [r0], #1
 800155c:	0619      	lsls	r1, r3, #24
 800155e:	d508      	bpl.n	8001572 <cbvprintf_package+0x336>
			if ((BUF_OFFSET + 1) > len) {
 8001560:	eb0c 0e04 	add.w	lr, ip, r4
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8001564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if ((BUF_OFFSET + 1) > len) {
 8001568:	45b6      	cmp	lr, r6
 800156a:	f63f ae7f 	bhi.w	800126c <cbvprintf_package+0x30>
			*(uint8_t *)buf = pos;
 800156e:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
 8001572:	3201      	adds	r2, #1
 8001574:	e7df      	b.n	8001536 <cbvprintf_package+0x2fa>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 8001576:	f1b9 0f00 	cmp.w	r9, #0
 800157a:	d003      	beq.n	8001584 <cbvprintf_package+0x348>
 800157c:	f998 2000 	ldrsb.w	r2, [r8]
 8001580:	2a00      	cmp	r2, #0
 8001582:	db17      	blt.n	80015b4 <cbvprintf_package+0x378>
		if (rws_pos_en) {
 8001584:	9b02      	ldr	r3, [sp, #8]
 8001586:	b1d3      	cbz	r3, 80015be <cbvprintf_package+0x382>
			*(uint8_t *)buf = str_ptr_arg[i];
 8001588:	f81a 200b 	ldrb.w	r2, [sl, fp]
 800158c:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
 8001590:	2200      	movs	r2, #0
		if ((BUF_OFFSET + 1 + size) > len) {
 8001592:	9b01      	ldr	r3, [sp, #4]
 8001594:	1918      	adds	r0, r3, r4
 8001596:	4410      	add	r0, r2
 8001598:	42b0      	cmp	r0, r6
 800159a:	f63f ae67 	bhi.w	800126c <cbvprintf_package+0x30>
		*(uint8_t *)buf = str_ptr_pos[i];
 800159e:	f898 0000 	ldrb.w	r0, [r8]
		memcpy((void *)buf, (uint8_t *)s, size);
 80015a2:	9900      	ldr	r1, [sp, #0]
		*(uint8_t *)buf = str_ptr_pos[i];
 80015a4:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy((void *)buf, (uint8_t *)s, size);
 80015a8:	4620      	mov	r0, r4
 80015aa:	9203      	str	r2, [sp, #12]
 80015ac:	f006 fd7b 	bl	80080a6 <memcpy>
		buf += size;
 80015b0:	9a03      	ldr	r2, [sp, #12]
 80015b2:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
 80015b4:	f10a 0a01 	add.w	sl, sl, #1
 80015b8:	f108 0801 	add.w	r8, r8, #1
 80015bc:	e7c6      	b.n	800154c <cbvprintf_package+0x310>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 80015be:	f898 2000 	ldrb.w	r2, [r8]
 80015c2:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 80015c6:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 80015c8:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
 80015ca:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 80015cc:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
 80015d0:	f7fe fe96 	bl	8000300 <strlen>
 80015d4:	1c42      	adds	r2, r0, #1
 80015d6:	e7dc      	b.n	8001592 <cbvprintf_package+0x356>
		return -EFAULT;
 80015d8:	f06f 000d 	mvn.w	r0, #13
 80015dc:	e648      	b.n	8001270 <cbvprintf_package+0x34>
 80015de:	bf00      	nop

080015e0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
 80015e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015e4:	b097      	sub	sp, #92	; 0x5c
 80015e6:	4604      	mov	r4, r0
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
 80015e8:	4689      	mov	r9, r1
{
 80015ea:	af00      	add	r7, sp, #0
	ros_nbr   = buf[2];
 80015ec:	f890 a002 	ldrb.w	sl, [r0, #2]
{
 80015f0:	f8d7 b080 	ldr.w	fp, [r7, #128]	; 0x80
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	f3cb 03c0 	ubfx	r3, fp, #3, #1
 80015fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fc:	61bb      	str	r3, [r7, #24]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
 80015fe:	b941      	cbnz	r1, 8001612 <cbprintf_package_convert+0x32>
	s_nbr     = buf[1];
 8001600:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
 8001602:	7800      	ldrb	r0, [r0, #0]
 8001604:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8001608:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
 800160a:	454d      	cmp	r5, r9
 800160c:	d817      	bhi.n	800163e <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
 800160e:	eba0 0904 	sub.w	r9, r0, r4
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
 8001612:	78e3      	ldrb	r3, [r4, #3]
 8001614:	61fb      	str	r3, [r7, #28]
	ro_cpy = ros_nbr &&
 8001616:	f1ba 0f00 	cmp.w	sl, #0
 800161a:	d002      	beq.n	8001622 <cbprintf_package_convert+0x42>
 800161c:	f01b 0f01 	tst.w	fp, #1
 8001620:	d116      	bne.n	8001650 <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	bb53      	cbnz	r3, 800167c <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	b11b      	cbz	r3, 8001632 <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
 800162a:	6a3a      	ldr	r2, [r7, #32]
 800162c:	4649      	mov	r1, r9
 800162e:	4620      	mov	r0, r4
 8001630:	4798      	blx	r3
		}

		return in_len;
 8001632:	464d      	mov	r5, r9

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
 8001634:	4628      	mov	r0, r5
 8001636:	375c      	adds	r7, #92	; 0x5c
 8001638:	46bd      	mov	sp, r7
 800163a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
 800163e:	1c46      	adds	r6, r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
 8001640:	f109 0901 	add.w	r9, r9, #1
		buf += strlen((const char *)buf) + 1;
 8001644:	4630      	mov	r0, r6
 8001646:	f7fe fe5b 	bl	8000300 <strlen>
 800164a:	3001      	adds	r0, #1
 800164c:	4430      	add	r0, r6
	for (unsigned int i = 0; i < s_nbr; i++) {
 800164e:	e7dc      	b.n	800160a <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
 8001650:	7823      	ldrb	r3, [r4, #0]
 8001652:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
 8001654:	0099      	lsls	r1, r3, #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
 8001656:	627a      	str	r2, [r7, #36]	; 0x24
	if (cb == NULL) {
 8001658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	args_size = in_desc->len * sizeof(int);
 800165a:	6179      	str	r1, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
 800165c:	eb04 0183 	add.w	r1, r4, r3, lsl #2
	if (cb == NULL) {
 8001660:	2a00      	cmp	r2, #0
 8001662:	f040 8100 	bne.w	8001866 <cbprintf_package_convert+0x286>
		out_len = (int)in_len;
 8001666:	464d      	mov	r5, r9
		if (ro_cpy) {
 8001668:	460e      	mov	r6, r1
 800166a:	eb01 090a 	add.w	r9, r1, sl
	size_t strl_cnt = 0;
 800166e:	f04f 0800 	mov.w	r8, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
 8001672:	454e      	cmp	r6, r9
 8001674:	d14c      	bne.n	8001710 <cbprintf_package_convert+0x130>
 8001676:	eb01 060a 	add.w	r6, r1, sl
 800167a:	e010      	b.n	800169e <cbprintf_package_convert+0xbe>
	rw_cpy = rws_nbr > 0 &&
 800167c:	f01b 0f02 	tst.w	fp, #2
 8001680:	d0d1      	beq.n	8001626 <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
 8001682:	7823      	ldrb	r3, [r4, #0]
 8001684:	009a      	lsls	r2, r3, #2
	uint8_t *str_pos = &buf[args_size];
 8001686:	eb04 0183 	add.w	r1, r4, r3, lsl #2
	args_size = in_desc->len * sizeof(int);
 800168a:	617a      	str	r2, [r7, #20]
	const char *fmt = *(const char **)(buf + sizeof(void *));
 800168c:	6862      	ldr	r2, [r4, #4]
 800168e:	627a      	str	r2, [r7, #36]	; 0x24
	if (cb == NULL) {
 8001690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001692:	2a00      	cmp	r2, #0
 8001694:	d177      	bne.n	8001786 <cbprintf_package_convert+0x1a6>
		out_len = (int)in_len;
 8001696:	464d      	mov	r5, r9
			str_pos += ros_nbr;
 8001698:	eb01 060a 	add.w	r6, r1, sl
	size_t strl_cnt = 0;
 800169c:	4690      	mov	r8, r2
		for (unsigned int i = 0; i < rws_nbr; i++) {
 800169e:	f01b 0f05 	tst.w	fp, #5
 80016a2:	bf0c      	ite	eq
 80016a4:	2302      	moveq	r3, #2
 80016a6:	2301      	movne	r3, #1
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	eb06 0a43 	add.w	sl, r6, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80016b0:	f00b 0302 	and.w	r3, fp, #2
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
		for (unsigned int i = 0; i < rws_nbr; i++) {
 80016b6:	4556      	cmp	r6, sl
 80016b8:	d0bc      	beq.n	8001634 <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
 80016ba:	f816 1b02 	ldrb.w	r1, [r6], #2
			const char *str = *(const char **)&buf32[arg_pos];
 80016be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80016c2:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
 80016c6:	4b99      	ldr	r3, [pc, #612]	; (800192c <cbprintf_package_convert+0x34c>)
 80016c8:	4599      	cmp	r9, r3
 80016ca:	d302      	bcc.n	80016d2 <cbprintf_package_convert+0xf2>
 80016cc:	4b98      	ldr	r3, [pc, #608]	; (8001930 <cbprintf_package_convert+0x350>)
 80016ce:	4599      	cmp	r9, r3
 80016d0:	d336      	bcc.n	8001740 <cbprintf_package_convert+0x160>
			if (IS_ENABLED(CONFIG_CBPRINTF_CONVERT_CHECK_PTR) &&
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d040      	beq.n	800175a <cbprintf_package_convert+0x17a>
			    fmt_present && is_ptr(fmt, arg_idx)) {
 80016d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016da:	f005 fc1e 	bl	8006f1a <is_ptr>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d03b      	beq.n	800175a <cbprintf_package_convert+0x17a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
 80016e2:	46e9      	mov	r9, sp
 80016e4:	b08a      	sub	sp, #40	; 0x28
 80016e6:	466a      	mov	r2, sp
 80016e8:	4b92      	ldr	r3, [pc, #584]	; (8001934 <cbprintf_package_convert+0x354>)
 80016ea:	6153      	str	r3, [r2, #20]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	e9c2 3106 	strd	r3, r1, [r2, #24]
 80016f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f6:	8413      	strh	r3, [r2, #32]
 80016f8:	4b8f      	ldr	r3, [pc, #572]	; (8001938 <cbprintf_package_convert+0x358>)
 80016fa:	f842 3f10 	str.w	r3, [r2, #16]!
 80016fe:	2300      	movs	r3, #0
 8001700:	f44f 5112 	mov.w	r1, #9344	; 0x2480
 8001704:	488d      	ldr	r0, [pc, #564]	; (800193c <cbprintf_package_convert+0x35c>)
				out_len -= 2;
 8001706:	3d02      	subs	r5, #2
 8001708:	f000 fc48 	bl	8001f9c <z_impl_z_log_msg_static_create>
 800170c:	46cd      	mov	sp, r9
				continue;
 800170e:	e7d2      	b.n	80016b6 <cbprintf_package_convert+0xd6>
				const char *str = *(const char **)&buf32[*str_pos];
 8001710:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001714:	62f9      	str	r1, [r7, #44]	; 0x2c
		return 1 + strlen(str);
 8001716:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800171a:	f7fe fdf1 	bl	8000300 <strlen>
				if (strl && strl_cnt < strl_len) {
 800171e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
		return 1 + strlen(str);
 8001722:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 8001724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001726:	b14b      	cbz	r3, 800173c <cbprintf_package_convert+0x15c>
 8001728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800172c:	4598      	cmp	r8, r3
					strl[strl_cnt++] = (uint16_t)len;
 800172e:	bf3e      	ittt	cc
 8001730:	f8d7 3084 	ldrcc.w	r3, [r7, #132]	; 0x84
 8001734:	f823 0018 	strhcc.w	r0, [r3, r8, lsl #1]
 8001738:	f108 0801 	addcc.w	r8, r8, #1
				out_len += len;
 800173c:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
 800173e:	e798      	b.n	8001672 <cbprintf_package_convert+0x92>
			if (IS_ENABLED(CONFIG_CBPRINTF_CONVERT_CHECK_PTR) &&
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	b123      	cbz	r3, 800174e <cbprintf_package_convert+0x16e>
			    fmt_present && is_ptr(fmt, arg_idx)) {
 8001744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001746:	f005 fbe8 	bl	8006f1a <is_ptr>
 800174a:	2800      	cmp	r0, #0
 800174c:	d1c9      	bne.n	80016e2 <cbprintf_package_convert+0x102>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 800174e:	f01b 0f01 	tst.w	fp, #1
 8001752:	d105      	bne.n	8001760 <cbprintf_package_convert+0x180>
					out_len -= drop_ro_str_pos ? 2 : 1;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	1aed      	subs	r5, r5, r3
 8001758:	e7ad      	b.n	80016b6 <cbprintf_package_convert+0xd6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0aa      	beq.n	80016b6 <cbprintf_package_convert+0xd6>
		return 1 + strlen(str);
 8001760:	4648      	mov	r0, r9
 8001762:	f7fe fdcd 	bl	8000300 <strlen>
				if (strl && strl_cnt < strl_len) {
 8001766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800176a:	b153      	cbz	r3, 8001782 <cbprintf_package_convert+0x1a2>
 800176c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001770:	4598      	cmp	r8, r3
		return 1 + strlen(str);
 8001772:	bf3f      	itttt	cc
 8001774:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
 8001776:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
 800177a:	f822 3018 	strhcc.w	r3, [r2, r8, lsl #1]
 800177e:	f108 0801 	addcc.w	r8, r8, #1
				out_len += (len - 1);
 8001782:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
 8001784:	e797      	b.n	80016b6 <cbprintf_package_convert+0xd6>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8001786:	f1ba 0f00 	cmp.w	sl, #0
 800178a:	d072      	beq.n	8001872 <cbprintf_package_convert+0x292>
 800178c:	f01b 0604 	ands.w	r6, fp, #4
 8001790:	d072      	beq.n	8001878 <cbprintf_package_convert+0x298>
		keep_cnt = ros_nbr;
 8001792:	46d0      	mov	r8, sl
		scpy_cnt = 0;
 8001794:	2600      	movs	r6, #0
		dst = keep_str_pos;
 8001796:	f107 0048 	add.w	r0, r7, #72	; 0x48
		memcpy(dst, str_pos, ros_nbr);
 800179a:	4652      	mov	r2, sl
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	62b9      	str	r1, [r7, #40]	; 0x28
 80017a0:	f006 fc81 	bl	80080a6 <memcpy>
 80017a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a6:	693b      	ldr	r3, [r7, #16]
	str_pos += ros_nbr;
 80017a8:	eb01 020a 	add.w	r2, r1, sl
 80017ac:	69f9      	ldr	r1, [r7, #28]
 80017ae:	62ba      	str	r2, [r7, #40]	; 0x28
	for (unsigned int i = 0; i < rws_nbr; i++) {
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	0052      	lsls	r2, r2, #1
 80017b4:	60fa      	str	r2, [r7, #12]
 80017b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80017bc:	613a      	str	r2, [r7, #16]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80017be:	f00b 0202 	and.w	r2, fp, #2
 80017c2:	60ba      	str	r2, [r7, #8]
	for (unsigned int i = 0; i < rws_nbr; i++) {
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017c8:	428a      	cmp	r2, r1
 80017ca:	d157      	bne.n	800187c <cbprintf_package_convert+0x29c>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 80017cc:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 80017d0:	7862      	ldrb	r2, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 80017d2:	bf0c      	ite	eq
 80017d4:	ea4f 0158 	moveq.w	r1, r8, lsr #1
 80017d8:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 80017da:	627a      	str	r2, [r7, #36]	; 0x24
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 80017dc:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 80017e0:	4432      	add	r2, r6
 80017e2:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 80017e4:	f040 809f 	bne.w	8001926 <cbprintf_package_convert+0x346>
 80017e8:	f01b 0f04 	tst.w	fp, #4
 80017ec:	bf14      	ite	ne
 80017ee:	4640      	movne	r0, r8
 80017f0:	2000      	moveq	r0, #0
 80017f2:	61bb      	str	r3, [r7, #24]
	*in_desc = out_desc;
 80017f4:	7062      	strb	r2, [r4, #1]
 80017f6:	70a0      	strb	r0, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
 80017f8:	4620      	mov	r0, r4
	*in_desc = out_desc;
 80017fa:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
 80017fc:	6a3a      	ldr	r2, [r7, #32]
 80017fe:	6979      	ldr	r1, [r7, #20]
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001802:	4798      	blx	r3
	if (rv < 0) {
 8001804:	1e05      	subs	r5, r0, #0
 8001806:	f6ff af15 	blt.w	8001634 <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
 800180a:	69bb      	ldr	r3, [r7, #24]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 800180c:	4641      	mov	r1, r8
 800180e:	6a3a      	ldr	r2, [r7, #32]
 8001810:	f107 0048 	add.w	r0, r7, #72	; 0x48
	*in_desc = in_desc_backup;
 8001814:	7023      	strb	r3, [r4, #0]
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f884 a002 	strb.w	sl, [r4, #2]
 800181c:	7063      	strb	r3, [r4, #1]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	4798      	blx	r3
	if (rv < 0) {
 8001826:	f1b0 0800 	subs.w	r8, r0, #0
 800182a:	f2c0 80bb 	blt.w	80019a4 <cbprintf_package_convert+0x3c4>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	eba9 010a 	sub.w	r1, r9, sl
	rv = cb(str_pos, strs_len, ctx);
 8001834:	6a3a      	ldr	r2, [r7, #32]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 8001836:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1ac9      	subs	r1, r1, r3
 800183c:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
 8001840:	4798      	blx	r3
	if (rv < 0) {
 8001842:	2800      	cmp	r0, #0
 8001844:	f2c0 80b0 	blt.w	80019a8 <cbprintf_package_convert+0x3c8>
	out_len += rv;
 8001848:	44a8      	add	r8, r5
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 800184a:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
 800184e:	f107 0a38 	add.w	sl, r7, #56	; 0x38
	out_len += rv;
 8001852:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 8001856:	45b3      	cmp	fp, r6
 8001858:	d372      	bcc.n	8001940 <cbprintf_package_convert+0x360>
	(void)cb(NULL, 0, ctx);
 800185a:	2100      	movs	r1, #0
 800185c:	6a3a      	ldr	r2, [r7, #32]
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	4608      	mov	r0, r1
 8001862:	4798      	blx	r3
	return out_len;
 8001864:	e6e6      	b.n	8001634 <cbprintf_package_convert+0x54>
	if (cb == NULL) {
 8001866:	4656      	mov	r6, sl
 8001868:	f04f 0800 	mov.w	r8, #0
 800186c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001870:	e793      	b.n	800179a <cbprintf_package_convert+0x1ba>
		scpy_cnt = 0;
 8001872:	4656      	mov	r6, sl
		keep_cnt = 0;
 8001874:	46d0      	mov	r8, sl
 8001876:	e797      	b.n	80017a8 <cbprintf_package_convert+0x1c8>
 8001878:	46b0      	mov	r8, r6
 800187a:	e795      	b.n	80017a8 <cbprintf_package_convert+0x1c8>
		uint8_t arg_idx = *str_pos++;
 800187c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187e:	f812 1b02 	ldrb.w	r1, [r2], #2
		uint8_t arg_pos = *str_pos++;
 8001882:	f812 5c01 	ldrb.w	r5, [r2, #-1]
		uint8_t arg_idx = *str_pos++;
 8001886:	62ba      	str	r2, [r7, #40]	; 0x28
		const char *str = *(const char **)&buf32[arg_pos];
 8001888:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800188c:	4a27      	ldr	r2, [pc, #156]	; (800192c <cbprintf_package_convert+0x34c>)
 800188e:	4290      	cmp	r0, r2
 8001890:	d302      	bcc.n	8001898 <cbprintf_package_convert+0x2b8>
 8001892:	4a27      	ldr	r2, [pc, #156]	; (8001930 <cbprintf_package_convert+0x350>)
 8001894:	4290      	cmp	r0, r2
 8001896:	d31e      	bcc.n	80018d6 <cbprintf_package_convert+0x2f6>
		if (IS_ENABLED(CONFIG_CBPRINTF_CONVERT_CHECK_PTR) &&
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	b132      	cbz	r2, 80018aa <cbprintf_package_convert+0x2ca>
		    fmt_present && is_ptr(fmt, arg_idx)) {
 800189c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	f005 fb3b 	bl	8006f1a <is_ptr>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d18c      	bne.n	80017c4 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	bb02      	cbnz	r2, 80018f0 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
 80018ae:	f108 0228 	add.w	r2, r8, #40	; 0x28
 80018b2:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 80018b6:	f108 0001 	add.w	r0, r8, #1
				keep_str_pos[keep_cnt++] = arg_pos;
 80018ba:	f108 0802 	add.w	r8, r8, #2
				keep_str_pos[keep_cnt++] = arg_idx;
 80018be:	4494      	add	ip, r2
				keep_str_pos[keep_cnt++] = arg_pos;
 80018c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80018c4:	fa5f f888 	uxtb.w	r8, r8
 80018c8:	fa52 f080 	uxtab	r0, r2, r0
				keep_str_pos[keep_cnt++] = arg_idx;
 80018cc:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
 80018d0:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
 80018d4:	e776      	b.n	80017c4 <cbprintf_package_convert+0x1e4>
		if (IS_ENABLED(CONFIG_CBPRINTF_CONVERT_CHECK_PTR) &&
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	b13a      	cbz	r2, 80018ea <cbprintf_package_convert+0x30a>
		    fmt_present && is_ptr(fmt, arg_idx)) {
 80018da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	f005 fb1c 	bl	8006f1a <is_ptr>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2800      	cmp	r0, #0
 80018e6:	f47f af6d 	bne.w	80017c4 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 80018ea:	f01b 0f01 	tst.w	fp, #1
 80018ee:	d009      	beq.n	8001904 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
 80018f0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80018f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80018f8:	1c71      	adds	r1, r6, #1
 80018fa:	1816      	adds	r6, r2, r0
 80018fc:	f806 5c20 	strb.w	r5, [r6, #-32]
 8001900:	b2ce      	uxtb	r6, r1
 8001902:	e75f      	b.n	80017c4 <cbprintf_package_convert+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8001904:	f01b 0f04 	tst.w	fp, #4
 8001908:	f43f af5c 	beq.w	80017c4 <cbprintf_package_convert+0x1e4>
				keep_str_pos[keep_cnt++] = arg_pos;
 800190c:	f108 0228 	add.w	r2, r8, #40	; 0x28
 8001910:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001914:	f108 0101 	add.w	r1, r8, #1
 8001918:	eb02 0800 	add.w	r8, r2, r0
 800191c:	f808 5c10 	strb.w	r5, [r8, #-16]
 8001920:	fa5f f881 	uxtb.w	r8, r1
 8001924:	e74e      	b.n	80017c4 <cbprintf_package_convert+0x1e4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8001926:	2000      	movs	r0, #0
 8001928:	e763      	b.n	80017f2 <cbprintf_package_convert+0x212>
 800192a:	bf00      	nop
 800192c:	0800847c 	.word	0x0800847c
 8001930:	0800a8f8 	.word	0x0800a8f8
 8001934:	08009f74 	.word	0x08009f74
 8001938:	01000004 	.word	0x01000004
 800193c:	08008cb4 	.word	0x08008cb4
		uint8_t loc = cpy_str_pos[i];
 8001940:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
 8001944:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
 8001948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t str_len = (strl && (i < strl_len)) ? strl[i] : 0;
 800194c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001950:	b32b      	cbz	r3, 800199e <cbprintf_package_convert+0x3be>
 8001952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001956:	459b      	cmp	fp, r3
 8001958:	d221      	bcs.n	800199e <cbprintf_package_convert+0x3be>
 800195a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800195e:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	2101      	movs	r1, #1
 8001966:	f107 0037 	add.w	r0, r7, #55	; 0x37
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	4798      	blx	r3
		if (rv < 0) {
 800196e:	2800      	cmp	r0, #0
 8001970:	db1a      	blt.n	80019a8 <cbprintf_package_convert+0x3c8>
		out_len += rv;
 8001972:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
 8001974:	f1b8 0f00 	cmp.w	r8, #0
 8001978:	d106      	bne.n	8001988 <cbprintf_package_convert+0x3a8>
 800197a:	4648      	mov	r0, r9
 800197c:	f7fe fcc0 	bl	8000300 <strlen>
 8001980:	f100 0801 	add.w	r8, r0, #1
 8001984:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	4641      	mov	r1, r8
 800198c:	4648      	mov	r0, r9
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	4798      	blx	r3
		if (rv < 0) {
 8001992:	2800      	cmp	r0, #0
 8001994:	db08      	blt.n	80019a8 <cbprintf_package_convert+0x3c8>
		out_len += rv;
 8001996:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 8001998:	f10b 0b01 	add.w	fp, fp, #1
 800199c:	e75b      	b.n	8001856 <cbprintf_package_convert+0x276>
		uint16_t str_len = (strl && (i < strl_len)) ? strl[i] : 0;
 800199e:	f04f 0800 	mov.w	r8, #0
 80019a2:	e7de      	b.n	8001962 <cbprintf_package_convert+0x382>
 80019a4:	4645      	mov	r5, r8
 80019a6:	e645      	b.n	8001634 <cbprintf_package_convert+0x54>
 80019a8:	4605      	mov	r5, r0
 80019aa:	e643      	b.n	8001634 <cbprintf_package_convert+0x54>

080019ac <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	4605      	mov	r5, r0
 80019b0:	460e      	mov	r6, r1
 80019b2:	4617      	mov	r7, r2
 80019b4:	4698      	mov	r8, r3
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_SCHED_CURRENT_THREAD_QUERY);
	}
#endif
	compiler_barrier();
	return z_impl_k_sched_current_thread_query();
 80019b6:	f003 fcb9 	bl	800532c <z_impl_k_sched_current_thread_query>
#ifdef CONFIG_CURRENT_THREAD_USE_TLS
	z_tls_current = k_sched_current_thread_query();
 80019ba:	f8df 9020 	ldr.w	r9, [pc, #32]	; 80019dc <z_thread_entry+0x30>
 80019be:	4603      	mov	r3, r0
 80019c0:	f006 fd52 	bl	8008468 <__aeabi_read_tp>
 80019c4:	4604      	mov	r4, r0

	sys_rand_get((uint8_t *)&stack_guard, sizeof(stack_guard));
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */
	entry(p1, p2, p3);
 80019c6:	4642      	mov	r2, r8
	z_tls_current = k_sched_current_thread_query();
 80019c8:	f849 3000 	str.w	r3, [r9, r0]
	entry(p1, p2, p3);
 80019cc:	4639      	mov	r1, r7
 80019ce:	4630      	mov	r0, r6
 80019d0:	47a8      	blx	r5
#ifdef CONFIG_CURRENT_THREAD_USE_TLS

	/* Thread-local cache of current thread ID, set in z_thread_entry() */
	extern Z_THREAD_LOCAL k_tid_t z_tls_current;

	return z_tls_current;
 80019d2:	f854 0009 	ldr.w	r0, [r4, r9]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
 80019d6:	f001 f947 	bl	8002c68 <z_impl_k_thread_abort>
	/*
	 * Compiler can't tell that k_thread_abort() won't return and issues a
	 * warning unless we tell it that control never gets this far.
	 */

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80019da:	bf00      	nop
 80019dc:	00000008 	.word	0x00000008

080019e0 <st_stm32_common_config>:
	 * RTT feature is working with realtime update only when
	 *   - one of the DMA is clocked.
	 * See https://github.com/zephyrproject-rtos/zephyr/issues/34324
	 */
#if defined(__HAL_RCC_DMA1_CLK_ENABLE)
	__HAL_RCC_DMA1_CLK_ENABLE();
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <st_stm32_common_config+0x34>)
{
 80019e2:	b082      	sub	sp, #8
#elif defined(LL_APB2_GRP1_PERIPH_DBGMCU)
	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_DBGMCU);
#endif /* LL_APB1_GRP1_PERIPH_DBGMCU */

	return 0;
}
 80019e4:	2000      	movs	r0, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80019e6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80019f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]
  * @rmtoll DBGMCU_CR    DBGSTOP_D1/DBGSLEEP_CD     LL_DBGMCU_EnableD1DebugInStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableD1DebugInStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <st_stm32_common_config+0x38>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	f042 0202 	orr.w	r2, r2, #2
 8001a06:	605a      	str	r2, [r3, #4]
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	605a      	str	r2, [r3, #4]
}
 8001a10:	b002      	add	sp, #8
 8001a12:	4770      	bx	lr
 8001a14:	58024400 	.word	0x58024400
 8001a18:	5c001000 	.word	0x5c001000

08001a1c <soc_early_init_hook>:
	sys_cache_instr_enable();
	sys_cache_data_enable();

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 64 MHz from HSI */
	SystemCoreClock = 64000000;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <soc_early_init_hook+0x40>)
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <soc_early_init_hook+0x44>)
 8001a20:	601a      	str	r2, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <soc_early_init_hook+0x48>)
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	f022 0207 	bic.w	r2, r2, #7
 8001a2a:	f042 0202 	orr.w	r2, r2, #2
 8001a2e:	60da      	str	r2, [r3, #12]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a36:	619a      	str	r2, [r3, #24]
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	0492      	lsls	r2, r2, #18
 8001a3c:	d5fc      	bpl.n	8001a38 <soc_early_init_hook+0x1c>
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <soc_early_init_hook+0x4c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
	 * 2.2.9: Reading from AXI SRAM may lead to data read corruption
	 * Workaround: Set the READ_ISS_OVERRIDE bit in the AXI_TARG7_FN_MOD
	 * register.
	 * Applicable only to RevY (REV_ID 0x1003)
	 */
	if (LL_DBGMCU_GetRevisionID() == 0x1003) {
 8001a42:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a46:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 8001a4a:	d106      	bne.n	8001a5a <soc_early_init_hook+0x3e>
		MODIFY_REG(GPV->AXI_TARG7_FN_MOD, 0x1, 0x1);
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <soc_early_init_hook+0x50>)
 8001a4e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	}
}
 8001a5a:	4770      	bx	lr
 8001a5c:	24000588 	.word	0x24000588
 8001a60:	03d09000 	.word	0x03d09000
 8001a64:	58024800 	.word	0x58024800
 8001a68:	5c001000 	.word	0x5c001000
 8001a6c:	51008000 	.word	0x51008000

08001a70 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
 8001a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a74:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
 8001a76:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
 8001a78:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001a7c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8001ad0 <activate_foreach_backend+0x60>
	while (mask_cpy) {
 8001a80:	b914      	cbnz	r4, 8001a88 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
 8001a82:	4638      	mov	r0, r7
 8001a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
 8001a88:	fa94 f5a4 	rbit	r5, r4
 8001a8c:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
 8001a90:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001a94:	012e      	lsls	r6, r5, #4
 8001a96:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
 8001a9a:	ea6f 0a03 	mvn.w	sl, r3
 8001a9e:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001aa2:	7b2b      	ldrb	r3, [r5, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0eb      	beq.n	8001a80 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
 8001aa8:	f858 3006 	ldr.w	r3, [r8, r6]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	b94b      	cbnz	r3, 8001ac4 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
 8001ab0:	4446      	add	r6, r8
			log_backend_enable(backend,
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4628      	mov	r0, r5
			mask &= ~BIT(i);
 8001ab6:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
 8001aba:	6873      	ldr	r3, [r6, #4]
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	f005 fd02 	bl	80074c6 <log_backend_enable>
 8001ac2:	e7dd      	b.n	8001a80 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d1d9      	bne.n	8001a80 <activate_foreach_backend+0x10>
 8001acc:	e7f0      	b.n	8001ab0 <activate_foreach_backend+0x40>
 8001ace:	bf00      	nop
 8001ad0:	08008d14 	.word	0x08008d14

08001ad4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
 8001ad4:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8001ad6:	2200      	movs	r2, #0
{
 8001ad8:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8001ada:	490f      	ldr	r1, [pc, #60]	; (8001b18 <enable_logger+0x44>)
 8001adc:	480f      	ldr	r0, [pc, #60]	; (8001b1c <enable_logger+0x48>)
 8001ade:	f006 faba 	bl	8008056 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	4d0d      	ldr	r5, [pc, #52]	; (8001b20 <enable_logger+0x4c>)
 8001aea:	490e      	ldr	r1, [pc, #56]	; (8001b24 <enable_logger+0x50>)
 8001aec:	4628      	mov	r0, r5
 8001aee:	9400      	str	r4, [sp, #0]
 8001af0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001af4:	230e      	movs	r3, #14
 8001af6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001afa:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8001afe:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <enable_logger+0x54>)
 8001b04:	f003 f9c4 	bl	8004e90 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 8001b08:	4908      	ldr	r1, [pc, #32]	; (8001b2c <enable_logger+0x58>)
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	f006 f9b4 	bl	8007e78 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
 8001b10:	4620      	mov	r0, r4
 8001b12:	b009      	add	sp, #36	; 0x24
 8001b14:	bd30      	pop	{r4, r5, pc}
 8001b16:	bf00      	nop
 8001b18:	08001b31 	.word	0x08001b31
 8001b1c:	24000af8 	.word	0x24000af8
 8001b20:	24000630 	.word	0x24000630
 8001b24:	24001080 	.word	0x24001080
 8001b28:	08001e41 	.word	0x08001e41
 8001b2c:	0800a03a 	.word	0x0800a03a

08001b30 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001b30:	4801      	ldr	r0, [pc, #4]	; (8001b38 <log_process_thread_timer_expiry_fn+0x8>)
 8001b32:	f003 b905 	b.w	8004d40 <z_impl_k_sem_give>
 8001b36:	bf00      	nop
 8001b38:	24000620 	.word	0x24000620

08001b3c <z_log_init>:
{
 8001b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b40:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
 8001b42:	4824      	ldr	r0, [pc, #144]	; (8001bd4 <z_log_init+0x98>)
{
 8001b44:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
 8001b46:	f005 fc96 	bl	8007476 <atomic_inc>
 8001b4a:	4606      	mov	r6, r0
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d038      	beq.n	8001bc2 <z_log_init+0x86>
	uint32_t mask = 0;
 8001b50:	2500      	movs	r5, #0
}
 8001b52:	4628      	mov	r0, r5
 8001b54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id += backend - log_backend_get(0);
 8001b58:	eba4 030b 	sub.w	r3, r4, fp
 */
static inline void log_backend_id_set(const struct log_backend *const backend,
				      uint8_t id)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->id = id;
 8001b5c:	6862      	ldr	r2, [r4, #4]
 8001b5e:	111b      	asrs	r3, r3, #4
 8001b60:	3301      	adds	r3, #1
		log_backend_id_set(backend, id);
 8001b62:	7113      	strb	r3, [r2, #4]
		if (backend->autostart) {
 8001b64:	7b23      	ldrb	r3, [r4, #12]
 8001b66:	b183      	cbz	r3, 8001b8a <z_log_init+0x4e>
	if (backend->api->init) {
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	b10b      	cbz	r3, 8001b72 <z_log_init+0x36>
		backend->api->init(backend);
 8001b6e:	4620      	mov	r0, r4
 8001b70:	4798      	blx	r3
	backend->cb->initialized = true;
 8001b72:	6863      	ldr	r3, [r4, #4]
 8001b74:	f883 9006 	strb.w	r9, [r3, #6]
	if (backend->api->is_ready != NULL) {
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	b9cb      	cbnz	r3, 8001bb2 <z_log_init+0x76>
				log_backend_enable(backend,
 8001b7e:	6863      	ldr	r3, [r4, #4]
 8001b80:	2204      	movs	r2, #4
 8001b82:	4620      	mov	r0, r4
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	f005 fc9e 	bl	80074c6 <log_backend_enable>
		++backend_index;
 8001b8a:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001b8c:	3410      	adds	r4, #16
 8001b8e:	4554      	cmp	r4, sl
 8001b90:	d3e2      	bcc.n	8001b58 <z_log_init+0x1c>
	if (blocking) {
 8001b92:	f1b8 0f00 	cmp.w	r8, #0
 8001b96:	d0dc      	beq.n	8001b52 <z_log_init+0x16>
		while (mask) {
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	d0d9      	beq.n	8001b50 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f7ff ff67 	bl	8001a70 <activate_foreach_backend>
 8001ba2:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
 8001ba4:	2f00      	cmp	r7, #0
 8001ba6:	d0f7      	beq.n	8001b98 <z_log_init+0x5c>
	return z_impl_k_sleep(timeout);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2064      	movs	r0, #100	; 0x64
 8001bac:	f006 f9fa 	bl	8007fa4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 8001bb0:	e7f2      	b.n	8001b98 <z_log_init+0x5c>
		return backend->api->is_ready(backend);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d0e1      	beq.n	8001b7e <z_log_init+0x42>
				mask |= BIT(backend_index);
 8001bba:	fa09 f306 	lsl.w	r3, r9, r6
 8001bbe:	431d      	orrs	r5, r3
 8001bc0:	e7e3      	b.n	8001b8a <z_log_init+0x4e>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001bc2:	4c05      	ldr	r4, [pc, #20]	; (8001bd8 <z_log_init+0x9c>)
	uint32_t mask = 0;
 8001bc4:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001bc6:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001bdc <z_log_init+0xa0>
	backend->cb->initialized = true;
 8001bca:	f04f 0901 	mov.w	r9, #1
 8001bce:	46a3      	mov	fp, r4
 8001bd0:	e7dd      	b.n	8001b8e <z_log_init+0x52>
 8001bd2:	bf00      	nop
 8001bd4:	24000e48 	.word	0x24000e48
 8001bd8:	08008d14 	.word	0x08008d14
 8001bdc:	08008d24 	.word	0x08008d24

08001be0 <log_format_func_t_get>:
}
 8001be0:	4b01      	ldr	r3, [pc, #4]	; (8001be8 <log_format_func_t_get+0x8>)
 8001be2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001be6:	4770      	bx	lr
 8001be8:	08009254 	.word	0x08009254

08001bec <log_set_timestamp_func>:
{
 8001bec:	b508      	push	{r3, lr}
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
 8001bf2:	b12b      	cbz	r3, 8001c00 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <log_set_timestamp_func+0x1c>)
 8001bf6:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
 8001bf8:	f000 fc68 	bl	80024cc <log_output_timestamp_freq_set>
	return 0;
 8001bfc:	2000      	movs	r0, #0
}
 8001bfe:	bd08      	pop	{r3, pc}
		return -EINVAL;
 8001c00:	f06f 0015 	mvn.w	r0, #21
 8001c04:	e7fb      	b.n	8001bfe <log_set_timestamp_func+0x12>
 8001c06:	bf00      	nop
 8001c08:	24000570 	.word	0x24000570

08001c0c <z_log_notify_backend_enabled>:
{
 8001c0c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8001c0e:	4c04      	ldr	r4, [pc, #16]	; (8001c20 <z_log_notify_backend_enabled+0x14>)
 8001c10:	7823      	ldrb	r3, [r4, #0]
 8001c12:	b913      	cbnz	r3, 8001c1a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <z_log_notify_backend_enabled+0x18>)
 8001c16:	f003 f893 	bl	8004d40 <z_impl_k_sem_give>
	backend_attached = true;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	7023      	strb	r3, [r4, #0]
}
 8001c1e:	bd10      	pop	{r4, pc}
 8001c20:	24001024 	.word	0x24001024
 8001c24:	24000620 	.word	0x24000620

08001c28 <z_log_dropped>:
{
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <z_log_dropped+0x34>)
 8001c2e:	f005 fc22 	bl	8007476 <atomic_inc>
	if (buffered) {
 8001c32:	b15c      	cbz	r4, 8001c4c <z_log_dropped+0x24>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
}

static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <z_log_dropped+0x38>)
 8001c36:	f3bf 8f5b 	dmb	ish
 8001c3a:	e853 1f00 	ldrex	r1, [r3]
 8001c3e:	3901      	subs	r1, #1
 8001c40:	e843 1200 	strex	r2, r1, [r3]
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	d1f8      	bne.n	8001c3a <z_log_dropped+0x12>
 8001c48:	f3bf 8f5b 	dmb	ish
	z_impl_k_timer_stop(timer);
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <z_log_dropped+0x3c>)
 8001c4e:	f006 fa0e 	bl	800806e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <z_log_dropped+0x40>)
}
 8001c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c58:	f003 b872 	b.w	8004d40 <z_impl_k_sem_give>
 8001c5c:	24000e40 	.word	0x24000e40
 8001c60:	24000e44 	.word	0x24000e44
 8001c64:	24000af8 	.word	0x24000af8
 8001c68:	24000620 	.word	0x24000620

08001c6c <z_log_dropped_read_and_clear>:
}
 8001c6c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <z_log_dropped_read_and_clear+0x1c>)
 8001c70:	f3bf 8f5b 	dmb	ish
 8001c74:	4601      	mov	r1, r0
 8001c76:	e853 0f00 	ldrex	r0, [r3]
 8001c7a:	e843 1200 	strex	r2, r1, [r3]
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d1f9      	bne.n	8001c76 <z_log_dropped_read_and_clear+0xa>
 8001c82:	f3bf 8f5b 	dmb	ish
 8001c86:	4770      	bx	lr
 8001c88:	24000e40 	.word	0x24000e40

08001c8c <dropped_notify>:
{
 8001c8c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8001c8e:	f7ff ffed 	bl	8001c6c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001c92:	4c08      	ldr	r4, [pc, #32]	; (8001cb4 <dropped_notify+0x28>)
	uint32_t dropped = z_log_dropped_read_and_clear();
 8001c94:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001c96:	4e08      	ldr	r6, [pc, #32]	; (8001cb8 <dropped_notify+0x2c>)
 8001c98:	42b4      	cmp	r4, r6
 8001c9a:	d300      	bcc.n	8001c9e <dropped_notify+0x12>
}
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8001c9e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8001ca0:	795b      	ldrb	r3, [r3, #5]
 8001ca2:	b12b      	cbz	r3, 8001cb0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	b113      	cbz	r3, 8001cb0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
 8001caa:	4629      	mov	r1, r5
 8001cac:	4620      	mov	r0, r4
 8001cae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001cb0:	3410      	adds	r4, #16
 8001cb2:	e7f1      	b.n	8001c98 <dropped_notify+0xc>
 8001cb4:	08008d14 	.word	0x08008d14
 8001cb8:	08008d24 	.word	0x08008d24

08001cbc <z_log_msg_init>:
{
 8001cbc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8001cbe:	4c04      	ldr	r4, [pc, #16]	; (8001cd0 <z_log_msg_init+0x14>)
 8001cc0:	4904      	ldr	r1, [pc, #16]	; (8001cd4 <z_log_msg_init+0x18>)
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f005 fa5d 	bl	8007182 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <z_log_msg_init+0x1c>)
 8001cca:	601c      	str	r4, [r3, #0]
}
 8001ccc:	bd10      	pop	{r4, pc}
 8001cce:	bf00      	nop
 8001cd0:	240005e4 	.word	0x240005e4
 8001cd4:	08009240 	.word	0x08009240
 8001cd8:	24000e38 	.word	0x24000e38

08001cdc <log_core_init>:
{
 8001cdc:	b508      	push	{r3, lr}
	panic_mode = false;
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <log_core_init+0x24>)
 8001ce0:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 8001ce2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ce6:	4807      	ldr	r0, [pc, #28]	; (8001d04 <log_core_init+0x28>)
	panic_mode = false;
 8001ce8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <log_core_init+0x2c>)
 8001cec:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
 8001cee:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <log_core_init+0x30>)
 8001cf0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 8001cf2:	f7ff ff7b 	bl	8001bec <log_set_timestamp_func>
}
 8001cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
 8001cfa:	f7ff bfdf 	b.w	8001cbc <z_log_msg_init>
 8001cfe:	bf00      	nop
 8001d00:	24001025 	.word	0x24001025
 8001d04:	08007491 	.word	0x08007491
 8001d08:	24000e40 	.word	0x24000e40
 8001d0c:	24000e44 	.word	0x24000e44

08001d10 <z_log_msg_alloc>:
{
 8001d10:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(
 8001d12:	2200      	movs	r2, #0
 8001d14:	2300      	movs	r3, #0
 8001d16:	4801      	ldr	r0, [pc, #4]	; (8001d1c <z_log_msg_alloc+0xc>)
 8001d18:	f005 ba54 	b.w	80071c4 <mpsc_pbuf_alloc>
 8001d1c:	240005e4 	.word	0x240005e4

08001d20 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
 8001d20:	4801      	ldr	r0, [pc, #4]	; (8001d28 <z_log_msg_local_claim+0x8>)
 8001d22:	f005 baed 	b.w	8007300 <mpsc_pbuf_claim>
 8001d26:	bf00      	nop
 8001d28:	240005e4 	.word	0x240005e4

08001d2c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
 8001d2c:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <z_log_msg_free+0xc>)
{
 8001d2e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	f005 bb39 	b.w	80073a8 <mpsc_pbuf_free>
 8001d36:	bf00      	nop
 8001d38:	24000e38 	.word	0x24000e38

08001d3c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
 8001d3c:	4801      	ldr	r0, [pc, #4]	; (8001d44 <z_log_msg_pending+0x8>)
 8001d3e:	f005 bb6e 	b.w	800741e <mpsc_pbuf_is_pending>
 8001d42:	bf00      	nop
 8001d44:	240005e4 	.word	0x240005e4

08001d48 <z_impl_log_process>:
	if (!backend_attached) {
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <z_impl_log_process+0x9c>)
{
 8001d4a:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
 8001d4c:	7818      	ldrb	r0, [r3, #0]
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d046      	beq.n	8001de0 <z_impl_log_process+0x98>
	return z_log_msg_local_claim();
 8001d52:	f7ff ffe5 	bl	8001d20 <z_log_msg_local_claim>
	if (msg) {
 8001d56:	4605      	mov	r5, r0
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	d13e      	bne.n	8001dda <z_impl_log_process+0x92>
	return dropped_cnt > 0;
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <z_impl_log_process+0xa0>)
 8001d5e:	4c23      	ldr	r4, [pc, #140]	; (8001dec <z_impl_log_process+0xa4>)
		if ((dropped_pend || unordered_pend) &&
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	dd12      	ble.n	8001d8c <z_impl_log_process+0x44>
	return z_impl_k_uptime_ticks();
 8001d66:	f006 f974 	bl	8008052 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
 8001d6a:	220a      	movs	r2, #10
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f7fe faad 	bl	80002cc <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 8001d72:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001d76:	1ac0      	subs	r0, r0, r3
		if ((dropped_pend || unordered_pend) &&
 8001d78:	f240 33e9 	movw	r3, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 8001d7c:	eb61 0102 	sbc.w	r1, r1, r2
		if ((dropped_pend || unordered_pend) &&
 8001d80:	4298      	cmp	r0, r3
 8001d82:	f171 0100 	sbcs.w	r1, r1, #0
 8001d86:	d301      	bcc.n	8001d8c <z_impl_log_process+0x44>
				dropped_notify();
 8001d88:	f7ff ff80 	bl	8001c8c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
 8001d8c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001d90:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
 8001d94:	f142 0200 	adc.w	r2, r2, #0
 8001d98:	e9c4 3200 	strd	r3, r2, [r4]
}
 8001d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
 8001da0:	f7ff bfcc 	b.w	8001d3c <z_log_msg_pending>
	return backend->cb->active;
 8001da4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
 8001da6:	795b      	ldrb	r3, [r3, #5]
 8001da8:	b123      	cbz	r3, 8001db4 <z_impl_log_process+0x6c>
	backend->api->process(backend, msg);
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	4629      	mov	r1, r5
 8001dae:	4620      	mov	r0, r4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001db4:	3410      	adds	r4, #16
 8001db6:	42b4      	cmp	r4, r6
 8001db8:	d3f4      	bcc.n	8001da4 <z_impl_log_process+0x5c>
		z_log_msg_free(msg);
 8001dba:	4628      	mov	r0, r5
 8001dbc:	f7ff ffb6 	bl	8001d2c <z_log_msg_free>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <z_impl_log_process+0xa8>)
 8001dc2:	f3bf 8f5b 	dmb	ish
 8001dc6:	e853 1f00 	ldrex	r1, [r3]
 8001dca:	3901      	subs	r1, #1
 8001dcc:	e843 1200 	strex	r2, r1, [r3]
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	d1f8      	bne.n	8001dc6 <z_impl_log_process+0x7e>
 8001dd4:	f3bf 8f5b 	dmb	ish
 8001dd8:	e7c0      	b.n	8001d5c <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001dda:	4c06      	ldr	r4, [pc, #24]	; (8001df4 <z_impl_log_process+0xac>)
 8001ddc:	4e06      	ldr	r6, [pc, #24]	; (8001df8 <z_impl_log_process+0xb0>)
 8001dde:	e7ea      	b.n	8001db6 <z_impl_log_process+0x6e>
}
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
 8001de2:	bf00      	nop
 8001de4:	24001024 	.word	0x24001024
 8001de8:	24000e40 	.word	0x24000e40
 8001dec:	24000af0 	.word	0x24000af0
 8001df0:	24000e44 	.word	0x24000e44
 8001df4:	08008d14 	.word	0x08008d14
 8001df8:	08008d24 	.word	0x08008d24

08001dfc <z_impl_log_panic>:
{
 8001dfc:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
 8001dfe:	4d0d      	ldr	r5, [pc, #52]	; (8001e34 <z_impl_log_panic+0x38>)
 8001e00:	7829      	ldrb	r1, [r5, #0]
 8001e02:	b961      	cbnz	r1, 8001e1e <z_impl_log_panic+0x22>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001e04:	4c0c      	ldr	r4, [pc, #48]	; (8001e38 <z_impl_log_panic+0x3c>)
	(void)z_log_init(true, false);
 8001e06:	2001      	movs	r0, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001e08:	4e0c      	ldr	r6, [pc, #48]	; (8001e3c <z_impl_log_panic+0x40>)
	(void)z_log_init(true, false);
 8001e0a:	f7ff fe97 	bl	8001b3c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001e0e:	42b4      	cmp	r4, r6
 8001e10:	d306      	bcc.n	8001e20 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
 8001e12:	f7ff ff99 	bl	8001d48 <z_impl_log_process>
		while (log_process() == true) {
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d1fb      	bne.n	8001e12 <z_impl_log_panic+0x16>
	panic_mode = true;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	702b      	strb	r3, [r5, #0]
}
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
 8001e20:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8001e22:	795b      	ldrb	r3, [r3, #5]
 8001e24:	b11b      	cbz	r3, 8001e2e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	4620      	mov	r0, r4
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001e2e:	3410      	adds	r4, #16
 8001e30:	e7ed      	b.n	8001e0e <z_impl_log_panic+0x12>
 8001e32:	bf00      	nop
 8001e34:	24001025 	.word	0x24001025
 8001e38:	08008d14 	.word	0x08008d14
 8001e3c:	08008d24 	.word	0x08008d24

08001e40 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
 8001e40:	2100      	movs	r1, #0
{
 8001e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
 8001e46:	4608      	mov	r0, r1
 8001e48:	f7ff fe78 	bl	8001b3c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	b358      	cbz	r0, 8001ea8 <log_process_thread_func+0x68>
 8001e50:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8001e54:	f04f 0900 	mov.w	r9, #0
	return z_tls_current;
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <log_process_thread_func+0x8c>)
 8001e5a:	f006 fb05 	bl	8008468 <__aeabi_read_tp>
	proc_tid = process_tid;
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <log_process_thread_func+0x90>)
 8001e60:	581b      	ldr	r3, [r3, r0]
 8001e62:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8001e64:	b133      	cbz	r3, 8001e74 <log_process_thread_func+0x34>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <log_process_thread_func+0x94>)
	    process_tid &&
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b09      	cmp	r3, #9
 8001e6c:	dd02      	ble.n	8001e74 <log_process_thread_func+0x34>
	z_impl_k_sem_give(sem);
 8001e6e:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <log_process_thread_func+0x98>)
 8001e70:	f002 ff66 	bl	8004d40 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001e74:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001e76:	4f19      	ldr	r7, [pc, #100]	; (8001edc <log_process_thread_func+0x9c>)
	return z_impl_k_sem_take(sem, timeout);
 8001e78:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001ed8 <log_process_thread_func+0x98>
		if (activate_mask) {
 8001e7c:	b144      	cbz	r4, 8001e90 <log_process_thread_func+0x50>
			activate_mask = activate_foreach_backend(activate_mask);
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff fdf6 	bl	8001a70 <activate_foreach_backend>
			if (!activate_mask) {
 8001e84:	4604      	mov	r4, r0
 8001e86:	b918      	cbnz	r0, 8001e90 <log_process_thread_func+0x50>
				timeout = K_FOREVER;
 8001e88:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001e8c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001e90:	f7ff ff5a 	bl	8001d48 <z_impl_log_process>
		if (log_process() == false) {
 8001e94:	4606      	mov	r6, r0
 8001e96:	b928      	cbnz	r0, 8001ea4 <log_process_thread_func+0x64>
			if (processed_any) {
 8001e98:	b9b5      	cbnz	r5, 8001ec8 <log_process_thread_func+0x88>
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	464b      	mov	r3, r9
 8001e9e:	4650      	mov	r0, sl
 8001ea0:	f002 ff82 	bl	8004da8 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001ea4:	4635      	mov	r5, r6
 8001ea6:	e7e9      	b.n	8001e7c <log_process_thread_func+0x3c>
 8001ea8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001eac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001eb0:	e7d2      	b.n	8001e58 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
 8001eb2:	682b      	ldr	r3, [r5, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	b11b      	cbz	r3, 8001ec0 <log_process_thread_func+0x80>
		backend->api->notify(backend, event, arg);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4628      	mov	r0, r5
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001ec0:	3510      	adds	r5, #16
 8001ec2:	42bd      	cmp	r5, r7
 8001ec4:	d3f5      	bcc.n	8001eb2 <log_process_thread_func+0x72>
 8001ec6:	e7e8      	b.n	8001e9a <log_process_thread_func+0x5a>
 8001ec8:	4d05      	ldr	r5, [pc, #20]	; (8001ee0 <log_process_thread_func+0xa0>)
 8001eca:	e7fa      	b.n	8001ec2 <log_process_thread_func+0x82>
 8001ecc:	00000008 	.word	0x00000008
 8001ed0:	24000e3c 	.word	0x24000e3c
 8001ed4:	24000e44 	.word	0x24000e44
 8001ed8:	24000620 	.word	0x24000620
 8001edc:	08008d24 	.word	0x08008d24
 8001ee0:	08008d14 	.word	0x08008d14

08001ee4 <z_log_msg_post_finalize>:
{
 8001ee4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
 8001ee6:	4818      	ldr	r0, [pc, #96]	; (8001f48 <z_log_msg_post_finalize+0x64>)
 8001ee8:	f005 fac5 	bl	8007476 <atomic_inc>
	if (panic_mode) {
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <z_log_msg_post_finalize+0x68>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b173      	cbz	r3, 8001f10 <z_log_msg_post_finalize+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ef2:	f3ef 8411 	mrs	r4, BASEPRI
           or the new value increases the BASEPRI priority level.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
{
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f7ff ff22 	bl	8001d48 <z_impl_log_process>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001f04:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("isb 0xF":::"memory");
 8001f08:	f3bf 8f6f 	isb	sy
}
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <z_log_msg_post_finalize+0x6c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f9      	beq.n	8001f0c <z_log_msg_post_finalize+0x28>
			if (cnt == 0) {
 8001f18:	b950      	cbnz	r0, 8001f30 <z_log_msg_post_finalize+0x4c>
	z_impl_k_timer_start(timer, duration, period);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	480d      	ldr	r0, [pc, #52]	; (8001f54 <z_log_msg_post_finalize+0x70>)
 8001f20:	e9cd 2300 	strd	r2, r3, [sp]
 8001f24:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f003 fccb 	bl	80058c4 <z_impl_k_timer_start>
 8001f2e:	e7ed      	b.n	8001f0c <z_log_msg_post_finalize+0x28>
			} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8001f30:	2809      	cmp	r0, #9
 8001f32:	d1eb      	bne.n	8001f0c <z_log_msg_post_finalize+0x28>
	z_impl_k_timer_stop(timer);
 8001f34:	4807      	ldr	r0, [pc, #28]	; (8001f54 <z_log_msg_post_finalize+0x70>)
 8001f36:	f006 f89a 	bl	800806e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8001f3a:	4807      	ldr	r0, [pc, #28]	; (8001f58 <z_log_msg_post_finalize+0x74>)
}
 8001f3c:	b002      	add	sp, #8
 8001f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f42:	f002 befd 	b.w	8004d40 <z_impl_k_sem_give>
 8001f46:	bf00      	nop
 8001f48:	24000e44 	.word	0x24000e44
 8001f4c:	24001025 	.word	0x24001025
 8001f50:	24000e3c 	.word	0x24000e3c
 8001f54:	24000af8 	.word	0x24000af8
 8001f58:	24000620 	.word	0x24000620

08001f5c <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <z_log_msg_commit+0x1c>)
{
 8001f5e:	b510      	push	{r4, lr}
 8001f60:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
 8001f66:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 8001f68:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
 8001f6a:	4804      	ldr	r0, [pc, #16]	; (8001f7c <z_log_msg_commit+0x20>)
 8001f6c:	f005 f9a9 	bl	80072c2 <mpsc_pbuf_commit>
}
 8001f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 8001f74:	f7ff bfb6 	b.w	8001ee4 <z_log_msg_post_finalize>
 8001f78:	24000570 	.word	0x24000570
 8001f7c:	240005e4 	.word	0x240005e4

08001f80 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)TYPE_SECTION_START(log_const))/
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <log_source_name_get+0x14>)
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <log_source_name_get+0x18>)
 8001f84:	1a9b      	subs	r3, r3, r2
{
	if (z_log_is_local_domain(domain_id)) {
		if (IS_ENABLED(CONFIG_LOG_FMT_SECTION_STRIP)) {
			return "unknown";
		}
		if (source_id < log_src_cnt_get(domain_id)) {
 8001f86:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return TYPE_SECTION_START(log_const)[source_id].name;
 8001f8a:	bf34      	ite	cc
 8001f8c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
 8001f90:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
 8001f92:	4770      	bx	lr
 8001f94:	08008ca4 	.word	0x08008ca4
 8001f98:	08008d14 	.word	0x08008d14

08001f9c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
 8001f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa0:	b08f      	sub	sp, #60	; 0x3c
 8001fa2:	f3c1 284a 	ubfx	r8, r1, #9, #11
 8001fa6:	460d      	mov	r5, r1
 8001fa8:	4691      	mov	r9, r2
 8001faa:	af04      	add	r7, sp, #16

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
 8001fac:	0d0c      	lsrs	r4, r1, #20
{
 8001fae:	60b8      	str	r0, [r7, #8]
 8001fb0:	607b      	str	r3, [r7, #4]
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
 8001fb2:	f1b8 0f00 	cmp.w	r8, #0
 8001fb6:	d063      	beq.n	8002080 <z_impl_z_log_msg_static_create+0xe4>
					size_t len,
					uint32_t flags,
					uint16_t *strl,
					size_t strl_len)
{
	struct z_cbprintf_buf_desc buf_desc = {
 8001fb8:	2600      	movs	r6, #0
		.buf = packaged,
		.size = len,
		.off = 0,
	};

	return cbprintf_package_convert(in_packaged, in_len,
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	f04f 0b04 	mov.w	fp, #4
 8001fc2:	f04f 0a0a 	mov.w	sl, #10
				 (IS_ENABLED(CONFIG_LOG_FMT_SECTION_STRIP) ?
				 0 : CBPRINTF_PACKAGE_CONVERT_PTR_CHECK);
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
 8001fc6:	f8c7 800c 	str.w	r8, [r7, #12]
 8001fca:	4632      	mov	r2, r6
	struct z_cbprintf_buf_desc buf_desc = {
 8001fcc:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
 8001fce:	4648      	mov	r0, r9
	struct z_cbprintf_buf_desc buf_desc = {
 8001fd0:	e9c7 6607 	strd	r6, r6, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	f8cd b008 	str.w	fp, [sp, #8]
 8001fde:	f8cd a000 	str.w	sl, [sp]
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	f7ff fafc 	bl	80015e0 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
 8001fe8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001fec:	4603      	mov	r3, r0
 8001fee:	d31c      	bcc.n	800202a <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
 8001ff0:	466c      	mov	r4, sp
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001ff8:	ab04      	add	r3, sp, #16
 8001ffa:	4826      	ldr	r0, [pc, #152]	; (8002094 <z_impl_z_log_msg_static_create+0xf8>)
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	e9c3 0105 	strd	r0, r1, [r3, #20]
 8002002:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002006:	61d9      	str	r1, [r3, #28]
 8002008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800200c:	8419      	strh	r1, [r3, #32]
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <z_impl_z_log_msg_static_create+0xfc>)
 8002010:	f842 3f10 	str.w	r3, [r2, #16]!
 8002014:	f44f 5112 	mov.w	r1, #9344	; 0x2480
 8002018:	4633      	mov	r3, r6
 800201a:	4820      	ldr	r0, [pc, #128]	; (800209c <z_impl_z_log_msg_static_create+0x100>)
 800201c:	f7ff ffbe 	bl	8001f9c <z_impl_z_log_msg_static_create>
 8002020:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
 8002022:	372c      	adds	r7, #44	; 0x2c
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
 800202a:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800202e:	f104 0017 	add.w	r0, r4, #23
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	4418      	add	r0, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8002036:	f368 2553 	bfi	r5, r8, #9, #11
 800203a:	f020 0007 	bic.w	r0, r0, #7
 800203e:	0880      	lsrs	r0, r0, #2
 8002040:	f7ff fe66 	bl	8001d10 <z_log_msg_alloc>
		if (msg) {
 8002044:	4604      	mov	r4, r0
 8002046:	b190      	cbz	r0, 800206e <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
 8002048:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
 800204a:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <z_impl_z_log_msg_static_create+0x104>)
 8002050:	4648      	mov	r0, r9
	struct z_cbprintf_buf_desc buf_desc = {
 8002052:	61f9      	str	r1, [r7, #28]
 8002054:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	f8cd b008 	str.w	fp, [sp, #8]
 8002060:	e9cd a300 	strd	sl, r3, [sp]
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	f7ff fab9 	bl	80015e0 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
 800206e:	f368 2553 	bfi	r5, r8, #9, #11
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	4620      	mov	r0, r4
 8002078:	462a      	mov	r2, r5
 800207a:	f005 fa43 	bl	8007504 <z_log_msg_finalize>
 800207e:	e7d0      	b.n	8002022 <z_impl_z_log_msg_static_create+0x86>
 8002080:	f104 0017 	add.w	r0, r4, #23
 8002084:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8002088:	0880      	lsrs	r0, r0, #2
 800208a:	f7ff fe41 	bl	8001d10 <z_log_msg_alloc>
 800208e:	4604      	mov	r4, r0
 8002090:	e7ed      	b.n	800206e <z_impl_z_log_msg_static_create+0xd2>
 8002092:	bf00      	nop
 8002094:	0800a04f 	.word	0x0800a04f
 8002098:	01000004 	.word	0x01000004
 800209c:	08008ccc 	.word	0x08008ccc
 80020a0:	080074d9 	.word	0x080074d9

080020a4 <z_log_msg_runtime_vcreate>:
#endif

void z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
 80020a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a8:	b087      	sub	sp, #28
 80020aa:	4604      	mov	r4, r0
 80020ac:	4693      	mov	fp, r2
 80020ae:	4698      	mov	r8, r3
 80020b0:	9103      	str	r1, [sp, #12]
 80020b2:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
 80020b6:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
 80020ba:	b1bf      	cbz	r7, 80020ec <z_log_msg_runtime_vcreate+0x48>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
 80020bc:	463b      	mov	r3, r7
 80020be:	4652      	mov	r2, sl
 80020c0:	2110      	movs	r1, #16
 80020c2:	2000      	movs	r0, #0
 80020c4:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
 80020c8:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
 80020cc:	f7ff f8b6 	bl	800123c <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	if (plen > Z_LOG_MSG_MAX_PACKAGE) {
 80020d0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
 80020d4:	4606      	mov	r6, r0
	if (plen > Z_LOG_MSG_MAX_PACKAGE) {
 80020d6:	d30a      	bcc.n	80020ee <z_log_msg_runtime_vcreate+0x4a>
	z_impl_z_log_msg_simple_create_1(source, level, fmt, arg);
 80020d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <z_log_msg_runtime_vcreate+0x98>)
 80020de:	2102      	movs	r1, #2
 80020e0:	4817      	ldr	r0, [pc, #92]	; (8002140 <z_log_msg_runtime_vcreate+0x9c>)
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
	}
}
 80020e2:	b007      	add	sp, #28
 80020e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020e8:	f005 ba65 	b.w	80075b6 <z_impl_z_log_msg_simple_create_1>
		plen = 0;
 80020ec:	463e      	mov	r6, r7
	struct log_msg_desc desc =
 80020ee:	f004 0407 	and.w	r4, r4, #7
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 80020f2:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
 80020f6:	f00b 0b07 	and.w	fp, fp, #7
 80020fa:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 80020fc:	4430      	add	r0, r6
	struct log_msg_desc desc =
 80020fe:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8002102:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
 8002106:	ea44 2446 	orr.w	r4, r4, r6, lsl #9
		msg = z_log_msg_alloc(msg_wlen);
 800210a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
 800210c:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		msg = z_log_msg_alloc(msg_wlen);
 8002110:	f7ff fdfe 	bl	8001d10 <z_log_msg_alloc>
			pkg = msg ? msg->data : NULL;
 8002114:	4605      	mov	r5, r0
 8002116:	b140      	cbz	r0, 800212a <z_log_msg_runtime_vcreate+0x86>
	if (pkg && fmt) {
 8002118:	b13f      	cbz	r7, 800212a <z_log_msg_runtime_vcreate+0x86>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
 800211a:	463b      	mov	r3, r7
 800211c:	4652      	mov	r2, sl
 800211e:	4631      	mov	r1, r6
 8002120:	3010      	adds	r0, #16
 8002122:	f8cd 9000 	str.w	r9, [sp]
 8002126:	f7ff f889 	bl	800123c <cbvprintf_package>
		z_log_msg_finalize(msg, source, desc, data);
 800212a:	4643      	mov	r3, r8
 800212c:	4622      	mov	r2, r4
 800212e:	9903      	ldr	r1, [sp, #12]
 8002130:	4628      	mov	r0, r5
}
 8002132:	b007      	add	sp, #28
 8002134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
 8002138:	f005 b9e4 	b.w	8007504 <z_log_msg_finalize>
 800213c:	0800a08e 	.word	0x0800a08e
 8002140:	08008ccc 	.word	0x08008ccc

08002144 <log_msg_get_source_id>:
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
 8002144:	6840      	ldr	r0, [r0, #4]
		return (int16_t)(uintptr_t)log_msg_get_source(msg);
	}

	void *source = (void *)log_msg_get_source(msg);

	if (source != NULL) {
 8002146:	b120      	cbz	r0, 8002152 <log_msg_get_source_id+0xe>
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <log_msg_get_source_id+0x14>)
 800214a:	1ac0      	subs	r0, r0, r3
		return log_source_id(source);
 800214c:	f340 00cf 	sbfx	r0, r0, #3, #16
 8002150:	4770      	bx	lr
	}

	return -1;
 8002152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002156:	4770      	bx	lr
 8002158:	08008ca4 	.word	0x08008ca4

0800215c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 800215c:	b40e      	push	{r1, r2, r3}
 800215e:	b503      	push	{r0, r1, lr}
 8002160:	ab03      	add	r3, sp, #12
 8002162:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <print_formatted+0x20>)
{
 8002166:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 800216a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 800216c:	f001 f88c 	bl	8003288 <cbvprintf>
	va_end(args);

	return length;
}
 8002170:	b002      	add	sp, #8
 8002172:	f85d eb04 	ldr.w	lr, [sp], #4
 8002176:	b003      	add	sp, #12
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	08007601 	.word	0x08007601

08002180 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8002180:	06ca      	lsls	r2, r1, #27
 8002182:	d405      	bmi.n	8002190 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8002184:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
 8002186:	bf4c      	ite	mi
 8002188:	4902      	ldrmi	r1, [pc, #8]	; (8002194 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
 800218a:	4903      	ldrpl	r1, [pc, #12]	; (8002198 <newline_print+0x18>)
 800218c:	f7ff bfe6 	b.w	800215c <print_formatted>
	}
}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	0800a0c7 	.word	0x0800a0c7
 8002198:	0800a0c6 	.word	0x0800a0c6

0800219c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
 800219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a0:	b08b      	sub	sp, #44	; 0x2c
 80021a2:	469b      	mov	fp, r3
 80021a4:	4604      	mov	r4, r0
 80021a6:	460d      	mov	r5, r1
 80021a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80021aa:	4690      	mov	r8, r2
 80021ac:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
 80021b0:	9306      	str	r3, [sp, #24]
 80021b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80021b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80021b6:	9305      	str	r3, [sp, #20]
 80021b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80021ba:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
 80021bc:	f1ba 0f00 	cmp.w	sl, #0
 80021c0:	f000 809e 	beq.w	8002300 <log_output_process+0x164>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 80021c4:	f006 0301 	and.w	r3, r6, #1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 80021c8:	f006 0902 	and.w	r9, r6, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 80021cc:	9308      	str	r3, [sp, #32]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80021ce:	f006 0308 	and.w	r3, r6, #8
 80021d2:	9307      	str	r3, [sp, #28]
	bool source_off = flags & LOG_OUTPUT_FLAG_SKIP_SOURCE;
 80021d4:	f406 7380 	and.w	r3, r6, #256	; 0x100
 80021d8:	9309      	str	r3, [sp, #36]	; 0x24
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
 80021da:	f005 f972 	bl	80074c2 <z_log_get_tag>
	if (tag) {
 80021de:	4602      	mov	r2, r0
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d03b      	beq.n	800225c <log_output_process+0xc0>
		length += print_formatted(output, "%s ", tag);
 80021e4:	498f      	ldr	r1, [pc, #572]	; (8002424 <log_output_process+0x288>)
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff ffb8 	bl	800215c <print_formatted>
 80021ec:	4607      	mov	r7, r0
	if (stamp) {
 80021ee:	f1b9 0f00 	cmp.w	r9, #0
 80021f2:	d008      	beq.n	8002206 <log_output_process+0x6a>
	if (!format) {
 80021f4:	f016 0f44 	tst.w	r6, #68	; 0x44
 80021f8:	d132      	bne.n	8002260 <log_output_process+0xc4>
		length = print_formatted(output, "[%08lu] ", timestamp);
 80021fa:	462a      	mov	r2, r5
 80021fc:	498a      	ldr	r1, [pc, #552]	; (8002428 <log_output_process+0x28c>)
 80021fe:	4620      	mov	r0, r4
 8002200:	f7ff ffac 	bl	800215c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8002204:	4407      	add	r7, r0
	if (color) {
 8002206:	9b08      	ldr	r3, [sp, #32]
 8002208:	b153      	cbz	r3, 8002220 <log_output_process+0x84>
		const char *log_color = start && (colors[level] != NULL) ?
 800220a:	4b88      	ldr	r3, [pc, #544]	; (800242c <log_output_process+0x290>)
		print_formatted(output, "%s", log_color);
 800220c:	4620      	mov	r0, r4
 800220e:	4988      	ldr	r1, [pc, #544]	; (8002430 <log_output_process+0x294>)
		const char *log_color = start && (colors[level] != NULL) ?
 8002210:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
		print_formatted(output, "%s", log_color);
 8002214:	4b87      	ldr	r3, [pc, #540]	; (8002434 <log_output_process+0x298>)
 8002216:	2a00      	cmp	r2, #0
 8002218:	bf08      	it	eq
 800221a:	461a      	moveq	r2, r3
 800221c:	f7ff ff9e 	bl	800215c <print_formatted>
	length += ids_print(output, level_on, func_on, thread_on, domain,
 8002220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d048      	beq.n	80022b8 <log_output_process+0x11c>
	if (level_on) {
 8002226:	9b07      	ldr	r3, [sp, #28]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d162      	bne.n	80022f2 <log_output_process+0x156>
	if (domain) {
 800222c:	f1b8 0f00 	cmp.w	r8, #0
 8002230:	d064      	beq.n	80022fc <log_output_process+0x160>
		total += print_formatted(output, "%s/", domain);
 8002232:	4642      	mov	r2, r8
 8002234:	4980      	ldr	r1, [pc, #512]	; (8002438 <log_output_process+0x29c>)
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ff90 	bl	800215c <print_formatted>
 800223c:	4605      	mov	r5, r0
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
 800223e:	9b06      	ldr	r3, [sp, #24]
	length += ids_print(output, level_on, func_on, thread_on, domain,
 8002240:	443d      	add	r5, r7
	if (package) {
 8002242:	2b00      	cmp	r3, #0
 8002244:	d16b      	bne.n	800231e <log_output_process+0x182>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
 8002246:	9b04      	ldr	r3, [sp, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d171      	bne.n	8002330 <log_output_process+0x194>
	if (color) {
 800224c:	07f3      	lsls	r3, r6, #31
 800224e:	f100 80e2 	bmi.w	8002416 <log_output_process+0x27a>
	newline_print(output, flags);
 8002252:	4631      	mov	r1, r6
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff ff93 	bl	8002180 <newline_print>
}
 800225a:	e0d6      	b.n	800240a <log_output_process+0x26e>
	uint32_t length = 0U;
 800225c:	4607      	mov	r7, r0
 800225e:	e7c6      	b.n	80021ee <log_output_process+0x52>
	} else if (freq != 0U) {
 8002260:	4b76      	ldr	r3, [pc, #472]	; (800243c <log_output_process+0x2a0>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	2800      	cmp	r0, #0
 8002266:	d0cd      	beq.n	8002204 <log_output_process+0x68>
		timestamp /= timestamp_div;
 8002268:	4b75      	ldr	r3, [pc, #468]	; (8002440 <log_output_process+0x2a4>)
		ms = (remainder * 1000U) / freq;
 800226a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
				mins = seconds / 60U;
 800226e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		timestamp /= timestamp_div;
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
 8002278:	fbb5 f1f0 	udiv	r1, r5, r0
		remainder = timestamp % freq;
 800227c:	fb00 5511 	mls	r5, r0, r1, r5
 8002280:	f44f 6361 	mov.w	r3, #3600	; 0xe10
		ms = (remainder * 1000U) / freq;
 8002284:	fb09 f505 	mul.w	r5, r9, r5
				seconds -= hours * 3600U;
 8002288:	fbb1 f2f3 	udiv	r2, r1, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800228c:	fbb5 fef0 	udiv	lr, r5, r0
 8002290:	fb03 1112 	mls	r1, r3, r2, r1
 8002294:	fb00 551e 	mls	r5, r0, lr, r5
				mins = seconds / 60U;
 8002298:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800229c:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
 80022a0:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80022a4:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
 80022a8:	9100      	str	r1, [sp, #0]
 80022aa:	4620      	mov	r0, r4
 80022ac:	4965      	ldr	r1, [pc, #404]	; (8002444 <log_output_process+0x2a8>)
 80022ae:	e9cd e501 	strd	lr, r5, [sp, #4]
 80022b2:	f7ff ff53 	bl	800215c <print_formatted>
 80022b6:	e7a5      	b.n	8002204 <log_output_process+0x68>
	if (level_on) {
 80022b8:	9b07      	ldr	r3, [sp, #28]
 80022ba:	b1eb      	cbz	r3, 80022f8 <log_output_process+0x15c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80022bc:	4b62      	ldr	r3, [pc, #392]	; (8002448 <log_output_process+0x2ac>)
 80022be:	4620      	mov	r0, r4
 80022c0:	4962      	ldr	r1, [pc, #392]	; (800244c <log_output_process+0x2b0>)
 80022c2:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
 80022c6:	f7ff ff49 	bl	800215c <print_formatted>
 80022ca:	4605      	mov	r5, r0
	if (domain) {
 80022cc:	f1b8 0f00 	cmp.w	r8, #0
 80022d0:	d005      	beq.n	80022de <log_output_process+0x142>
		total += print_formatted(output, "%s/", domain);
 80022d2:	4642      	mov	r2, r8
 80022d4:	4958      	ldr	r1, [pc, #352]	; (8002438 <log_output_process+0x29c>)
 80022d6:	4620      	mov	r0, r4
 80022d8:	f7ff ff40 	bl	800215c <print_formatted>
 80022dc:	4405      	add	r5, r0
	if (source) {
 80022de:	f1bb 0f00 	cmp.w	fp, #0
 80022e2:	d0ac      	beq.n	800223e <log_output_process+0xa2>
		total += print_formatted(output,
 80022e4:	465a      	mov	r2, fp
 80022e6:	495a      	ldr	r1, [pc, #360]	; (8002450 <log_output_process+0x2b4>)
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff ff37 	bl	800215c <print_formatted>
 80022ee:	4405      	add	r5, r0
 80022f0:	e7a5      	b.n	800223e <log_output_process+0xa2>
	length += ids_print(output, level_on, func_on, thread_on, domain,
 80022f2:	f04f 0b00 	mov.w	fp, #0
 80022f6:	e7e1      	b.n	80022bc <log_output_process+0x120>
	int total = 0;
 80022f8:	9d07      	ldr	r5, [sp, #28]
 80022fa:	e7e7      	b.n	80022cc <log_output_process+0x130>
 80022fc:	4645      	mov	r5, r8
 80022fe:	e79e      	b.n	800223e <log_output_process+0xa2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8002300:	f1bb 0f01 	cmp.w	fp, #1
	if (package) {
 8002304:	9b06      	ldr	r3, [sp, #24]
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8002306:	d106      	bne.n	8002316 <log_output_process+0x17a>
	if (package) {
 8002308:	2b00      	cmp	r3, #0
 800230a:	d164      	bne.n	80023d6 <log_output_process+0x23a>
	if (data_len) {
 800230c:	9b04      	ldr	r3, [sp, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d07b      	beq.n	800240a <log_output_process+0x26e>
		prefix_offset = 0;
 8002312:	2500      	movs	r5, #0
 8002314:	e00c      	b.n	8002330 <log_output_process+0x194>
	if (package) {
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f8      	beq.n	800230c <log_output_process+0x170>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 800231a:	484e      	ldr	r0, [pc, #312]	; (8002454 <log_output_process+0x2b8>)
 800231c:	e05c      	b.n	80023d8 <log_output_process+0x23c>
		cb = out_func;
 800231e:	484e      	ldr	r0, [pc, #312]	; (8002458 <log_output_process+0x2bc>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8002320:	9b06      	ldr	r3, [sp, #24]
 8002322:	4622      	mov	r2, r4
 8002324:	494d      	ldr	r1, [pc, #308]	; (800245c <log_output_process+0x2c0>)
 8002326:	f004 fdc7 	bl	8006eb8 <cbpprintf_external>
	if (data_len) {
 800232a:	9b04      	ldr	r3, [sp, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d068      	beq.n	8002402 <log_output_process+0x266>
		print_formatted(output, " ");
 8002330:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800246c <log_output_process+0x2d0>
			print_formatted(output, "%02x ", data[i]);
 8002334:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8002470 <log_output_process+0x2d4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8002338:	9f04      	ldr	r7, [sp, #16]
	for (int i = 0; i < prefix_offset; i++) {
 800233a:	f04f 0b00 	mov.w	fp, #0
	newline_print(output, flags);
 800233e:	4631      	mov	r1, r6
 8002340:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8002342:	2f10      	cmp	r7, #16
 8002344:	bf28      	it	cs
 8002346:	2710      	movcs	r7, #16
	newline_print(output, flags);
 8002348:	f7ff ff1a 	bl	8002180 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
 800234c:	455d      	cmp	r5, fp
 800234e:	dc45      	bgt.n	80023dc <log_output_process+0x240>
			print_formatted(output, "%02x ", data[i]);
 8002350:	9b05      	ldr	r3, [sp, #20]
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002352:	f04f 0b01 	mov.w	fp, #1
			print_formatted(output, "%02x ", data[i]);
 8002356:	4649      	mov	r1, r9
 8002358:	4620      	mov	r0, r4
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	f7ff fefe 	bl	800215c <print_formatted>
		if (i > 0 && !(i % 8)) {
 8002360:	f01b 0f07 	tst.w	fp, #7
 8002364:	d103      	bne.n	800236e <log_output_process+0x1d2>
			print_formatted(output, " ");
 8002366:	4641      	mov	r1, r8
 8002368:	4620      	mov	r0, r4
 800236a:	f7ff fef7 	bl	800215c <print_formatted>
		if (i < length) {
 800236e:	455f      	cmp	r7, fp
 8002370:	d93b      	bls.n	80023ea <log_output_process+0x24e>
			print_formatted(output, "%02x ", data[i]);
 8002372:	9b05      	ldr	r3, [sp, #20]
 8002374:	4649      	mov	r1, r9
 8002376:	4620      	mov	r0, r4
 8002378:	f813 200b 	ldrb.w	r2, [r3, fp]
 800237c:	f7ff feee 	bl	800215c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002380:	f10b 0b01 	add.w	fp, fp, #1
 8002384:	f1bb 0f10 	cmp.w	fp, #16
 8002388:	d1ea      	bne.n	8002360 <log_output_process+0x1c4>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800238a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
 800238e:	4934      	ldr	r1, [pc, #208]	; (8002460 <log_output_process+0x2c4>)
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff fee3 	bl	800215c <print_formatted>
		if (i < length) {
 8002396:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
 8002398:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
 800239a:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
 800239c:	5c9a      	ldrb	r2, [r3, r2]
    return 'a' <= c && c <= 'z';
}

__declare_extern_inline(int) isprint (int c)
{
    return ' ' <= c && c <= '~';
 800239e:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
 80023a2:	295f      	cmp	r1, #95	; 0x5f
 80023a4:	492f      	ldr	r1, [pc, #188]	; (8002464 <log_output_process+0x2c8>)
 80023a6:	bf28      	it	cs
 80023a8:	222e      	movcs	r2, #46	; 0x2e
 80023aa:	f7ff fed7 	bl	800215c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80023ae:	f10b 0b01 	add.w	fp, fp, #1
 80023b2:	f1bb 0f10 	cmp.w	fp, #16
 80023b6:	d01d      	beq.n	80023f4 <log_output_process+0x258>
		if (i > 0 && !(i % 8)) {
 80023b8:	f01b 0f07 	tst.w	fp, #7
 80023bc:	d103      	bne.n	80023c6 <log_output_process+0x22a>
			print_formatted(output, " ");
 80023be:	4641      	mov	r1, r8
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff fecb 	bl	800215c <print_formatted>
		if (i < length) {
 80023c6:	455f      	cmp	r7, fp
 80023c8:	465a      	mov	r2, fp
 80023ca:	d8e5      	bhi.n	8002398 <log_output_process+0x1fc>
			print_formatted(output, " ");
 80023cc:	4641      	mov	r1, r8
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7ff fec4 	bl	800215c <print_formatted>
 80023d4:	e7eb      	b.n	80023ae <log_output_process+0x212>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 80023d6:	4820      	ldr	r0, [pc, #128]	; (8002458 <log_output_process+0x2bc>)
		prefix_offset = 0;
 80023d8:	4655      	mov	r5, sl
 80023da:	e7a1      	b.n	8002320 <log_output_process+0x184>
		print_formatted(output, " ");
 80023dc:	4641      	mov	r1, r8
 80023de:	4620      	mov	r0, r4
	for (int i = 0; i < prefix_offset; i++) {
 80023e0:	f10b 0b01 	add.w	fp, fp, #1
		print_formatted(output, " ");
 80023e4:	f7ff feba 	bl	800215c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80023e8:	e7b0      	b.n	800234c <log_output_process+0x1b0>
			print_formatted(output, "   ");
 80023ea:	491f      	ldr	r1, [pc, #124]	; (8002468 <log_output_process+0x2cc>)
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7ff feb5 	bl	800215c <print_formatted>
 80023f2:	e7c5      	b.n	8002380 <log_output_process+0x1e4>
		data += length;
 80023f4:	9b05      	ldr	r3, [sp, #20]
 80023f6:	443b      	add	r3, r7
 80023f8:	9305      	str	r3, [sp, #20]
	} while (len);
 80023fa:	9b04      	ldr	r3, [sp, #16]
 80023fc:	1bdb      	subs	r3, r3, r7
 80023fe:	9304      	str	r3, [sp, #16]
 8002400:	d19a      	bne.n	8002338 <log_output_process+0x19c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
 8002402:	f1ba 0f00 	cmp.w	sl, #0
 8002406:	f47f af21 	bne.w	800224c <log_output_process+0xb0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 800240a:	4620      	mov	r0, r4
}
 800240c:	b00b      	add	sp, #44	; 0x2c
 800240e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
 8002412:	f005 b8e8 	b.w	80075e6 <log_output_flush>
		print_formatted(output, "%s", log_color);
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <log_output_process+0x298>)
 8002418:	4620      	mov	r0, r4
 800241a:	4905      	ldr	r1, [pc, #20]	; (8002430 <log_output_process+0x294>)
 800241c:	f7ff fe9e 	bl	800215c <print_formatted>
}
 8002420:	e717      	b.n	8002252 <log_output_process+0xb6>
 8002422:	bf00      	nop
 8002424:	0800a0ce 	.word	0x0800a0ce
 8002428:	0800a0d2 	.word	0x0800a0d2
 800242c:	08009264 	.word	0x08009264
 8002430:	08009f4e 	.word	0x08009f4e
 8002434:	0800a0c9 	.word	0x0800a0c9
 8002438:	0800a0f7 	.word	0x0800a0f7
 800243c:	24000e50 	.word	0x24000e50
 8002440:	24000e4c 	.word	0x24000e4c
 8002444:	0800a0db 	.word	0x0800a0db
 8002448:	08009278 	.word	0x08009278
 800244c:	0800a0fb 	.word	0x0800a0fb
 8002450:	0800a101 	.word	0x0800a101
 8002454:	08007637 	.word	0x08007637
 8002458:	08007601 	.word	0x08007601
 800245c:	08003289 	.word	0x08003289
 8002460:	0800a110 	.word	0x0800a110
 8002464:	0800a112 	.word	0x0800a112
 8002468:	0800a10c 	.word	0x0800a10c
 800246c:	0800a10e 	.word	0x0800a10e
 8002470:	0800a106 	.word	0x0800a106

08002474 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002474:	f242 730f 	movw	r3, #9999	; 0x270f
 8002478:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <log_output_dropped_process+0x4c>)
 800247a:	428b      	cmp	r3, r1
{
 800247c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800247e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002480:	bf28      	it	cs
 8002482:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8002484:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002486:	2105      	movs	r1, #5
 8002488:	4668      	mov	r0, sp
 800248a:	f003 fa5b 	bl	8005944 <snprintf>

	log_output_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, output->control_block->ctx);
 800248e:	6863      	ldr	r3, [r4, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002490:	4606      	mov	r6, r0
	log_output_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, output->control_block->ctx);
 8002492:	220b      	movs	r2, #11
 8002494:	4628      	mov	r0, r5
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	490a      	ldr	r1, [pc, #40]	; (80024c4 <log_output_dropped_process+0x50>)
 800249a:	f005 f896 	bl	80075ca <log_output_write>
	log_output_write(outf, buf, len, output->control_block->ctx);
 800249e:	6863      	ldr	r3, [r4, #4]
 80024a0:	4632      	mov	r2, r6
 80024a2:	4669      	mov	r1, sp
 80024a4:	4628      	mov	r0, r5
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f005 f88f 	bl	80075ca <log_output_write>
	log_output_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1, output->control_block->ctx);
 80024ac:	6863      	ldr	r3, [r4, #4]
 80024ae:	221b      	movs	r2, #27
 80024b0:	4905      	ldr	r1, [pc, #20]	; (80024c8 <log_output_dropped_process+0x54>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4628      	mov	r0, r5
 80024b6:	f005 f888 	bl	80075ca <log_output_write>
}
 80024ba:	b002      	add	sp, #8
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
 80024be:	bf00      	nop
 80024c0:	0800a27a 	.word	0x0800a27a
 80024c4:	0800a131 	.word	0x0800a131
 80024c8:	0800a115 	.word	0x0800a115

080024cc <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80024cc:	2100      	movs	r1, #0
 80024ce:	2301      	movs	r3, #1
 80024d0:	4a06      	ldr	r2, [pc, #24]	; (80024ec <log_output_timestamp_freq_set+0x20>)
 80024d2:	4290      	cmp	r0, r2
 80024d4:	d806      	bhi.n	80024e4 <log_output_timestamp_freq_set+0x18>
 80024d6:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <log_output_timestamp_freq_set+0x24>)
 80024d8:	b901      	cbnz	r1, 80024dc <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
 80024da:	2301      	movs	r3, #1
 80024dc:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <log_output_timestamp_freq_set+0x28>)
 80024e0:	6018      	str	r0, [r3, #0]
}
 80024e2:	4770      	bx	lr
		frequency /= 2U;
 80024e4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80024e6:	2101      	movs	r1, #1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	e7f2      	b.n	80024d2 <log_output_timestamp_freq_set+0x6>
 80024ec:	000f4240 	.word	0x000f4240
 80024f0:	24000e4c 	.word	0x24000e4c
 80024f4:	24000e50 	.word	0x24000e50

080024f8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <log_backend_rtt_init+0x8>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
 80024fe:	4770      	bx	lr
 8002500:	24001026 	.word	0x24001026

08002504 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 8002504:	4b01      	ldr	r3, [pc, #4]	; (800250c <format_set+0x8>)
	return 0;
}
 8002506:	2000      	movs	r0, #0
	log_format_current = log_type;
 8002508:	6019      	str	r1, [r3, #0]
}
 800250a:	4770      	bx	lr
 800250c:	24000e68 	.word	0x24000e68

08002510 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8002510:	4801      	ldr	r0, [pc, #4]	; (8002518 <dropped+0x8>)
 8002512:	f7ff bfaf 	b.w	8002474 <log_output_dropped_process>
 8002516:	bf00      	nop
 8002518:	080092a8 	.word	0x080092a8

0800251c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <process+0x1c>)
{
 800251e:	b510      	push	{r4, lr}
 8002520:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f7ff fb5c 	bl	8001be0 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
 8002528:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 800252a:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
 800252c:	4621      	mov	r1, r4
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <process+0x20>)
}
 8002530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
 8002534:	4718      	bx	r3
 8002536:	bf00      	nop
 8002538:	24000e68 	.word	0x24000e68
 800253c:	080092a8 	.word	0x080092a8

08002540 <panic>:
{
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @param output Pointer to the log output instance.
 */
static inline void log_output_flush(const struct log_output *output)
{
	log_output_write(output->func, output->buf, output->control_block->offset,
 8002542:	4d09      	ldr	r5, [pc, #36]	; (8002568 <panic+0x28>)
	panic_mode = true;
 8002544:	2201      	movs	r2, #1
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <panic+0x2c>)
 8002548:	4e09      	ldr	r6, [pc, #36]	; (8002570 <panic+0x30>)
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e9d5 4700 	ldrd	r4, r7, [r5]
	while (len != 0) {
 8002550:	b90c      	cbnz	r4, 8002556 <panic+0x16>
			 output->control_block->ctx);
	output->control_block->offset = 0;
 8002552:	602c      	str	r4, [r5, #0]
}
 8002554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		processed = outf(buf, len, ctx);
 8002556:	4621      	mov	r1, r4
 8002558:	4630      	mov	r0, r6
 800255a:	463a      	mov	r2, r7
 800255c:	f000 f81e 	bl	800259c <data_out_block_mode>
		len -= processed;
 8002560:	1a24      	subs	r4, r4, r0
		buf += processed;
 8002562:	4406      	add	r6, r0
 8002564:	e7f4      	b.n	8002550 <panic+0x10>
 8002566:	bf00      	nop
 8002568:	24000e5c 	.word	0x24000e5c
 800256c:	24001027 	.word	0x24001027
 8002570:	24001028 	.word	0x24001028

08002574 <on_failed_write>:
	if (retry_cnt == 0) {
 8002574:	b910      	cbnz	r0, 800257c <on_failed_write+0x8>
		host_present = false;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <on_failed_write+0x20>)
 8002578:	7018      	strb	r0, [r3, #0]
}
 800257a:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b11b      	cbz	r3, 800258a <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
 8002582:	f241 3088 	movw	r0, #5000	; 0x1388
 8002586:	f005 bc1a 	b.w	8007dbe <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
 800258a:	2032      	movs	r0, #50	; 0x32
 800258c:	2100      	movs	r1, #0
 800258e:	f005 bd09 	b.w	8007fa4 <z_impl_k_sleep>
 8002592:	bf00      	nop
 8002594:	24001026 	.word	0x24001026
 8002598:	24001027 	.word	0x24001027

0800259c <data_out_block_mode>:
{
 800259c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025a0:	4680      	mov	r8, r0
 80025a2:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
 80025a4:	2404      	movs	r4, #4
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
 80025a6:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002620 <data_out_block_mode+0x84>
 80025aa:	4f1c      	ldr	r7, [pc, #112]	; (800261c <data_out_block_mode+0x80>)
		if (!is_sync_mode()) {
 80025ac:	f899 5000 	ldrb.w	r5, [r9]
 80025b0:	b9a5      	cbnz	r5, 80025dc <data_out_block_mode+0x40>
			RTT_LOCK();
 80025b2:	f005 fbf7 	bl	8007da4 <zephyr_rtt_irq_lock>
 80025b6:	4682      	mov	sl, r0
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
 80025b8:	4632      	mov	r2, r6
 80025ba:	4628      	mov	r0, r5
 80025bc:	4641      	mov	r1, r8
 80025be:	f002 f9ab 	bl	8004918 <SEGGER_RTT_WriteSkipNoLock>
 80025c2:	4605      	mov	r5, r0
			RTT_UNLOCK();
 80025c4:	4650      	mov	r0, sl
 80025c6:	f005 fbf5 	bl	8007db4 <zephyr_rtt_irq_unlock>
		if (ret) {
 80025ca:	b1e5      	cbz	r5, 8002606 <data_out_block_mode+0x6a>
	host_present = true;
 80025cc:	2301      	movs	r3, #1
 80025ce:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
 80025d0:	f899 3000 	ldrb.w	r3, [r9]
 80025d4:	b973      	cbnz	r3, 80025f4 <data_out_block_mode+0x58>
}
 80025d6:	4630      	mov	r0, r6
 80025d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
 80025dc:	4632      	mov	r2, r6
 80025de:	4641      	mov	r1, r8
 80025e0:	2000      	movs	r0, #0
 80025e2:	f002 f999 	bl	8004918 <SEGGER_RTT_WriteSkipNoLock>
 80025e6:	4605      	mov	r5, r0
 80025e8:	e7ef      	b.n	80025ca <data_out_block_mode+0x2e>
			on_failed_write(retry_cnt--);
 80025ea:	1e65      	subs	r5, r4, #1
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7ff ffc1 	bl	8002574 <on_failed_write>
 80025f2:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
 80025f4:	2000      	movs	r0, #0
 80025f6:	f002 f9d3 	bl	80049a0 <SEGGER_RTT_HasDataUp>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d0eb      	beq.n	80025d6 <data_out_block_mode+0x3a>
 80025fe:	783b      	ldrb	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f2      	bne.n	80025ea <data_out_block_mode+0x4e>
 8002604:	e7e7      	b.n	80025d6 <data_out_block_mode+0x3a>
		} else if (host_present) {
 8002606:	783b      	ldrb	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0e4      	beq.n	80025d6 <data_out_block_mode+0x3a>
			retry_cnt--;
 800260c:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
 800260e:	4620      	mov	r0, r4
 8002610:	f7ff ffb0 	bl	8002574 <on_failed_write>
	} while ((ret == 0) && host_present);
 8002614:	783b      	ldrb	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1c8      	bne.n	80025ac <data_out_block_mode+0x10>
 800261a:	e7dc      	b.n	80025d6 <data_out_block_mode+0x3a>
 800261c:	24001026 	.word	0x24001026
 8002620:	24001027 	.word	0x24001027

08002624 <mem_attr_get_regions>:
	DT_MEMORY_ATTR_FOREACH_STATUS_OKAY_NODE(_BUILD_MEM_ATTR_REGION)
};

size_t mem_attr_get_regions(const struct mem_attr_region_t **region)
{
	*region = mem_attr_region;
 8002624:	4b01      	ldr	r3, [pc, #4]	; (800262c <mem_attr_get_regions+0x8>)
 8002626:	6003      	str	r3, [r0, #0]

	return ARRAY_SIZE(mem_attr_region);
}
 8002628:	2001      	movs	r0, #1
 800262a:	4770      	bx	lr
 800262c:	080092b8 	.word	0x080092b8

08002630 <z_arm_fatal_error>:
		esf->basic.pc);
}
#endif /* CONFIG_EXCEPTION_DEBUG */

void z_arm_fatal_error(unsigned int reason, const struct arch_esf *esf)
{
 8002630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	4680      	mov	r8, r0
 8002636:	af00      	add	r7, sp, #0
#ifdef CONFIG_EXCEPTION_DEBUG
	if (esf != NULL) {
 8002638:	460c      	mov	r4, r1
 800263a:	2900      	cmp	r1, #0
 800263c:	d065      	beq.n	800270a <z_arm_fatal_error+0xda>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800263e:	46e9      	mov	r9, sp
 8002640:	b08a      	sub	sp, #40	; 0x28
 8002642:	68a3      	ldr	r3, [r4, #8]
 8002644:	466d      	mov	r5, sp
 8002646:	e9d1 1200 	ldrd	r1, r2, [r1]
 800264a:	4839      	ldr	r0, [pc, #228]	; (8002730 <z_arm_fatal_error+0x100>)
 800264c:	f04f 0a05 	mov.w	sl, #5
 8002650:	462e      	mov	r6, r5
 8002652:	e9c5 0105 	strd	r0, r1, [r5, #20]
 8002656:	e9c5 2307 	strd	r2, r3, [r5, #28]
 800265a:	f846 af10 	str.w	sl, [r6, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
 800265e:	2300      	movs	r3, #0
 8002660:	4632      	mov	r2, r6
 8002662:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8002666:	4833      	ldr	r0, [pc, #204]	; (8002734 <z_arm_fatal_error+0x104>)
 8002668:	f7ff fc98 	bl	8001f9c <z_impl_z_log_msg_static_create>
 800266c:	46cd      	mov	sp, r9
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800266e:	6963      	ldr	r3, [r4, #20]
 8002670:	46ad      	mov	sp, r5
 8002672:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8002676:	4830      	ldr	r0, [pc, #192]	; (8002738 <z_arm_fatal_error+0x108>)
 8002678:	f8c5 a010 	str.w	sl, [r5, #16]
 800267c:	e9c5 0105 	strd	r0, r1, [r5, #20]
 8002680:	e9c5 2307 	strd	r2, r3, [r5, #28]
 8002684:	2300      	movs	r3, #0
 8002686:	4632      	mov	r2, r6
 8002688:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800268c:	4829      	ldr	r0, [pc, #164]	; (8002734 <z_arm_fatal_error+0x104>)
 800268e:	f7ff fc85 	bl	8001f9c <z_impl_z_log_msg_static_create>
 8002692:	46cd      	mov	sp, r9
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8002694:	69e3      	ldr	r3, [r4, #28]
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
 8002696:	2500      	movs	r5, #0
 8002698:	4626      	mov	r6, r4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 800269a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800274c <z_arm_fatal_error+0x11c>
 800269e:	f04f 0a0a 	mov.w	sl, #10
	z_impl_z_log_msg_simple_create_1(source, level, fmt, arg);
 80026a2:	4a26      	ldr	r2, [pc, #152]	; (800273c <z_arm_fatal_error+0x10c>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	4823      	ldr	r0, [pc, #140]	; (8002734 <z_arm_fatal_error+0x104>)
 80026a8:	f004 ff85 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
 80026ac:	46e9      	mov	r9, sp
 80026ae:	b08e      	sub	sp, #56	; 0x38
 80026b0:	e9d6 e008 	ldrd	lr, r0, [r6, #32]
 80026b4:	e9d6 130a 	ldrd	r1, r3, [r6, #40]	; 0x28
 80026b8:	466a      	mov	r2, sp
 80026ba:	f8c2 e01c 	str.w	lr, [r2, #28]
 80026be:	f105 0e01 	add.w	lr, r5, #1
 80026c2:	e9c2 e008 	strd	lr, r0, [r2, #32]
 80026c6:	1ca8      	adds	r0, r5, #2
 80026c8:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
 80026cc:	1ce9      	adds	r1, r5, #3
 80026ce:	e9c2 b505 	strd	fp, r5, [r2, #20]
 80026d2:	e9c2 130c 	strd	r1, r3, [r2, #48]	; 0x30
 80026d6:	f842 af10 	str.w	sl, [r2, #16]!
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
 80026da:	3504      	adds	r5, #4
	z_impl_z_log_msg_static_create(source, desc, package, data);
 80026dc:	2300      	movs	r3, #0
 80026de:	f245 0140 	movw	r1, #20544	; 0x5040
 80026e2:	4814      	ldr	r0, [pc, #80]	; (8002734 <z_arm_fatal_error+0x104>)
 80026e4:	f7ff fc5a 	bl	8001f9c <z_impl_z_log_msg_static_create>
 80026e8:	2d10      	cmp	r5, #16
 80026ea:	f106 0610 	add.w	r6, r6, #16
 80026ee:	46cd      	mov	sp, r9
 80026f0:	d1dc      	bne.n	80026ac <z_arm_fatal_error+0x7c>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
 80026f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	z_impl_z_log_msg_simple_create_1(source, level, fmt, arg);
 80026f4:	4a12      	ldr	r2, [pc, #72]	; (8002740 <z_arm_fatal_error+0x110>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	480e      	ldr	r0, [pc, #56]	; (8002734 <z_arm_fatal_error+0x104>)
 80026fa:	f004 ff5c 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 80026fe:	69a3      	ldr	r3, [r4, #24]
 8002700:	4a10      	ldr	r2, [pc, #64]	; (8002744 <z_arm_fatal_error+0x114>)
 8002702:	2101      	movs	r1, #1
 8002704:	480b      	ldr	r0, [pc, #44]	; (8002734 <z_arm_fatal_error+0x104>)
 8002706:	f004 ff56 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
	}
#endif /* CONFIG_EXCEPTION_DEBUG */

	/* LOG the IRQn that was unhandled */
#if defined(CONFIG_CPU_CORTEX_M)
	if (reason == K_ERR_SPURIOUS_IRQ) {
 800270a:	f1b8 0f01 	cmp.w	r8, #1
 800270e:	d107      	bne.n	8002720 <z_arm_fatal_error+0xf0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002710:	f3ef 8305 	mrs	r3, IPSR
 8002714:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <z_arm_fatal_error+0x118>)
 8002716:	3b10      	subs	r3, #16
 8002718:	4641      	mov	r1, r8
 800271a:	4806      	ldr	r0, [pc, #24]	; (8002734 <z_arm_fatal_error+0x104>)
 800271c:	f004 ff4b 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>

		LOG_ERR("Unhandled IRQn: %d", irqn);
	}
#endif

	z_fatal_error(reason, esf);
 8002720:	4621      	mov	r1, r4
 8002722:	4640      	mov	r0, r8
 8002724:	f002 f96e 	bl	8004a04 <z_fatal_error>
}
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	0800a17d 	.word	0x0800a17d
 8002734:	08008cf4 	.word	0x08008cf4
 8002738:	0800a1ac 	.word	0x0800a1ac
 800273c:	0800a1db 	.word	0x0800a1db
 8002740:	0800a22d 	.word	0x0800a22d
 8002744:	0800a23c 	.word	0x0800a23c
 8002748:	0800a26a 	.word	0x0800a26a
 800274c:	0800a1ea 	.word	0x0800a1ea

08002750 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002750:	b508      	push	{r3, lr}
	handler();
 8002752:	4b03      	ldr	r3, [pc, #12]	; (8002760 <z_arm_nmi+0x10>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4798      	blx	r3
	z_arm_int_exit();
}
 8002758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800275c:	f000 b826 	b.w	80027ac <z_arm_exc_exit>
 8002760:	24000574 	.word	0x24000574

08002764 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8002764:	bf30      	wfi
    b z_SysNmiOnReset
 8002766:	f7ff bffd 	b.w	8002764 <z_SysNmiOnReset>
 800276a:	bf00      	nop

0800276c <arch_tls_stack_setup>:
 */
K_APP_DMEM(z_libc_partition) uintptr_t z_arm_tls_ptr;
#endif

size_t arch_tls_stack_setup(struct k_thread *new_thread, char *stack_ptr)
{
 800276c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Total size of TLS data/bss areas
 */
static inline size_t z_tls_data_size(void)
{
	return (size_t)(uintptr_t)__tdata_size +
 8002770:	4e0b      	ldr	r6, [pc, #44]	; (80027a0 <arch_tls_stack_setup+0x34>)
 8002772:	4605      	mov	r5, r0
	       (size_t)(uintptr_t)__tbss_size;
 8002774:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80027a8 <arch_tls_stack_setup+0x3c>
 * @param dest Pointer to destination
 */
static inline void z_tls_copy(char *dest)
{
	/* Copy initialized data (tdata) */
	memcpy(dest, __tdata_start, (size_t)(uintptr_t)__tdata_size);
 8002778:	4632      	mov	r2, r6
	return (size_t)(uintptr_t)__tdata_size +
 800277a:	eb06 0708 	add.w	r7, r6, r8

	/*
	 * Since we are populating things backwards,
	 * setup the TLS data/bss area first.
	 */
	stack_ptr -= z_tls_data_size();
 800277e:	1bcc      	subs	r4, r1, r7
	memcpy(dest, __tdata_start, (size_t)(uintptr_t)__tdata_size);
 8002780:	4908      	ldr	r1, [pc, #32]	; (80027a4 <arch_tls_stack_setup+0x38>)
 8002782:	4620      	mov	r0, r4
 8002784:	f005 fc8f 	bl	80080a6 <memcpy>

	/* Clear BSS data (tbss) */
	dest += (size_t)(uintptr_t)__tdata_size;
	memset(dest, 0, (size_t)(uintptr_t)__tbss_size);
 8002788:	19a0      	adds	r0, r4, r6
	z_tls_copy(stack_ptr);

#ifndef __IAR_SYSTEMS_ICC__
	/* Skip two pointers due to toolchain */
	stack_ptr -= sizeof(uintptr_t) * 2;
 800278a:	3c08      	subs	r4, #8
 800278c:	4642      	mov	r2, r8
 800278e:	2100      	movs	r1, #0
 8002790:	f005 fc97 	bl	80080c2 <memset>
	 * context switch to point to TLS area.
	 */
	new_thread->tls = POINTER_TO_UINT(stack_ptr);

	return (z_tls_data_size() + (sizeof(uintptr_t) * 2));
}
 8002794:	f107 0008 	add.w	r0, r7, #8
	new_thread->tls = POINTER_TO_UINT(stack_ptr);
 8002798:	672c      	str	r4, [r5, #112]	; 0x70
}
 800279a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800279e:	bf00      	nop
 80027a0:	00000000 	.word	0x00000000
 80027a4:	08008d24 	.word	0x08008d24
 80027a8:	00000004 	.word	0x00000004

080027ac <z_arm_exc_exit>:
 *
 */
Z_GENERIC_SECTION(.text._HandlerModeExit) void z_arm_exc_exit(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	if (_kernel.ready_q.cache != _kernel.cpus->current) {
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <z_arm_exc_exit+0x18>)
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d004      	beq.n	80027c0 <z_arm_exc_exit+0x14>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <z_arm_exc_exit+0x1c>)
 80027b8:	6853      	ldr	r3, [r2, #4]
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6053      	str	r3, [r2, #4]
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	z_check_stack_sentinel();
#endif /* CONFIG_STACK_SENTINEL */
}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	24000fec 	.word	0x24000fec
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(struct arch_esf *esf, int from_hard_fault, bool *recoverable)
 80027cc:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80027ce:	4c29      	ldr	r4, [pc, #164]	; (8002874 <bus_fault.constprop.0+0xa8>)
static int bus_fault(struct arch_esf *esf, int from_hard_fault, bool *recoverable)
 80027d0:	4606      	mov	r6, r0
 80027d2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 80027d4:	4828      	ldr	r0, [pc, #160]	; (8002878 <bus_fault.constprop.0+0xac>)
 80027d6:	4929      	ldr	r1, [pc, #164]	; (800287c <bus_fault.constprop.0+0xb0>)
 80027d8:	f004 ff75 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80027dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027de:	04d9      	lsls	r1, r3, #19
 80027e0:	d53c      	bpl.n	800285c <bus_fault.constprop.0+0x90>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
 80027e2:	4825      	ldr	r0, [pc, #148]	; (8002878 <bus_fault.constprop.0+0xac>)
 80027e4:	4926      	ldr	r1, [pc, #152]	; (8002880 <bus_fault.constprop.0+0xb4>)
 80027e6:	f004 ff6e 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
 80027ea:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80027ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027ee:	051a      	lsls	r2, r3, #20
 80027f0:	d504      	bpl.n	80027fc <bus_fault.constprop.0+0x30>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
 80027f2:	4821      	ldr	r0, [pc, #132]	; (8002878 <bus_fault.constprop.0+0xac>)
 80027f4:	4923      	ldr	r1, [pc, #140]	; (8002884 <bus_fault.constprop.0+0xb8>)
 80027f6:	f004 ff66 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80027fa:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80027fc:	4c1d      	ldr	r4, [pc, #116]	; (8002874 <bus_fault.constprop.0+0xa8>)
 80027fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002800:	059b      	lsls	r3, r3, #22
 8002802:	d512      	bpl.n	800282a <bus_fault.constprop.0+0x5e>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
 8002804:	481c      	ldr	r0, [pc, #112]	; (8002878 <bus_fault.constprop.0+0xac>)
 8002806:	4920      	ldr	r1, [pc, #128]	; (8002888 <bus_fault.constprop.0+0xbc>)
 8002808:	f004 ff5d 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 800280c:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800280e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002810:	0410      	lsls	r0, r2, #16
 8002812:	d509      	bpl.n	8002828 <bus_fault.constprop.0+0x5c>
 8002814:	4a1d      	ldr	r2, [pc, #116]	; (800288c <bus_fault.constprop.0+0xc0>)
 8002816:	2101      	movs	r1, #1
 8002818:	4817      	ldr	r0, [pc, #92]	; (8002878 <bus_fault.constprop.0+0xac>)
 800281a:	f004 fecc 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 800281e:	b11e      	cbz	r6, 8002828 <bus_fault.constprop.0+0x5c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8002820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002826:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 8002828:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800282a:	4c12      	ldr	r4, [pc, #72]	; (8002874 <bus_fault.constprop.0+0xa8>)
 800282c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800282e:	0559      	lsls	r1, r3, #21
 8002830:	d504      	bpl.n	800283c <bus_fault.constprop.0+0x70>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
 8002832:	4811      	ldr	r0, [pc, #68]	; (8002878 <bus_fault.constprop.0+0xac>)
 8002834:	4916      	ldr	r1, [pc, #88]	; (8002890 <bus_fault.constprop.0+0xc4>)
 8002836:	f004 ff46 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 800283a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800283c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800283e:	05da      	lsls	r2, r3, #23
 8002840:	d50e      	bpl.n	8002860 <bus_fault.constprop.0+0x94>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
 8002842:	480d      	ldr	r0, [pc, #52]	; (8002878 <bus_fault.constprop.0+0xac>)
 8002844:	4913      	ldr	r1, [pc, #76]	; (8002894 <bus_fault.constprop.0+0xc8>)
 8002846:	f004 ff3e 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 800284a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_SYSMPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800284c:	4a09      	ldr	r2, [pc, #36]	; (8002874 <bus_fault.constprop.0+0xa8>)
 800284e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002850:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8002854:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8002856:	2300      	movs	r3, #0
 8002858:	702b      	strb	r3, [r5, #0]

	return reason;
}
 800285a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 800285c:	2016      	movs	r0, #22
 800285e:	e7c5      	b.n	80027ec <bus_fault.constprop.0+0x20>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8002860:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002862:	049b      	lsls	r3, r3, #18
 8002864:	d5f2      	bpl.n	800284c <bus_fault.constprop.0+0x80>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8002866:	4804      	ldr	r0, [pc, #16]	; (8002878 <bus_fault.constprop.0+0xac>)
 8002868:	490b      	ldr	r1, [pc, #44]	; (8002898 <bus_fault.constprop.0+0xcc>)
 800286a:	f004 ff2c 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 800286e:	201c      	movs	r0, #28
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8002870:	e7ec      	b.n	800284c <bus_fault.constprop.0+0x80>
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	08008cf4 	.word	0x08008cf4
 800287c:	0800a27d 	.word	0x0800a27d
 8002880:	0800a293 	.word	0x0800a293
 8002884:	0800a2a4 	.word	0x0800a2a4
 8002888:	0800a2b7 	.word	0x0800a2b7
 800288c:	0800a2d0 	.word	0x0800a2d0
 8002890:	0800a2e5 	.word	0x0800a2e5
 8002894:	0800a300 	.word	0x0800a300
 8002898:	0800a318 	.word	0x0800a318

0800289c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const struct arch_esf *esf)
 800289c:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800289e:	4c20      	ldr	r4, [pc, #128]	; (8002920 <usage_fault.constprop.0+0x84>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
 80028a0:	4920      	ldr	r1, [pc, #128]	; (8002924 <usage_fault.constprop.0+0x88>)
 80028a2:	4821      	ldr	r0, [pc, #132]	; (8002928 <usage_fault.constprop.0+0x8c>)
 80028a4:	f004 ff0f 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80028a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028aa:	0199      	lsls	r1, r3, #6
 80028ac:	d536      	bpl.n	800291c <usage_fault.constprop.0+0x80>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
 80028ae:	481e      	ldr	r0, [pc, #120]	; (8002928 <usage_fault.constprop.0+0x8c>)
 80028b0:	491e      	ldr	r1, [pc, #120]	; (800292c <usage_fault.constprop.0+0x90>)
 80028b2:	f004 ff08 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
 80028b6:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80028b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028ba:	01da      	lsls	r2, r3, #7
 80028bc:	d504      	bpl.n	80028c8 <usage_fault.constprop.0+0x2c>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
 80028be:	481a      	ldr	r0, [pc, #104]	; (8002928 <usage_fault.constprop.0+0x8c>)
 80028c0:	491b      	ldr	r1, [pc, #108]	; (8002930 <usage_fault.constprop.0+0x94>)
 80028c2:	f004 ff00 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 80028c6:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80028c8:	4c15      	ldr	r4, [pc, #84]	; (8002920 <usage_fault.constprop.0+0x84>)
 80028ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028cc:	031b      	lsls	r3, r3, #12
 80028ce:	d504      	bpl.n	80028da <usage_fault.constprop.0+0x3e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
 80028d0:	4815      	ldr	r0, [pc, #84]	; (8002928 <usage_fault.constprop.0+0x8c>)
 80028d2:	4918      	ldr	r1, [pc, #96]	; (8002934 <usage_fault.constprop.0+0x98>)
 80028d4:	f004 fef7 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 80028d8:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80028da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028dc:	0359      	lsls	r1, r3, #13
 80028de:	d504      	bpl.n	80028ea <usage_fault.constprop.0+0x4e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 80028e0:	4811      	ldr	r0, [pc, #68]	; (8002928 <usage_fault.constprop.0+0x8c>)
 80028e2:	4915      	ldr	r1, [pc, #84]	; (8002938 <usage_fault.constprop.0+0x9c>)
 80028e4:	f004 feef 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 80028e8:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80028ea:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <usage_fault.constprop.0+0x84>)
 80028ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028ee:	039a      	lsls	r2, r3, #14
 80028f0:	d504      	bpl.n	80028fc <usage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <usage_fault.constprop.0+0x8c>)
 80028f4:	4911      	ldr	r1, [pc, #68]	; (800293c <usage_fault.constprop.0+0xa0>)
 80028f6:	f004 fee6 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 80028fa:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80028fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028fe:	03db      	lsls	r3, r3, #15
 8002900:	d504      	bpl.n	800290c <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8002902:	4809      	ldr	r0, [pc, #36]	; (8002928 <usage_fault.constprop.0+0x8c>)
 8002904:	490e      	ldr	r1, [pc, #56]	; (8002940 <usage_fault.constprop.0+0xa4>)
 8002906:	f004 fede 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 800290a:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <usage_fault.constprop.0+0x84>)
 800290e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002910:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002914:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002918:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 800291a:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 800291c:	201d      	movs	r0, #29
 800291e:	e7cb      	b.n	80028b8 <usage_fault.constprop.0+0x1c>
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	0800a347 	.word	0x0800a347
 8002928:	08008cf4 	.word	0x08008cf4
 800292c:	0800a35f 	.word	0x0800a35f
 8002930:	0800a372 	.word	0x0800a372
 8002934:	0800a38c 	.word	0x0800a38c
 8002938:	0800a3aa 	.word	0x0800a3aa
 800293c:	0800a3cf 	.word	0x0800a3cf
 8002940:	0800a3e9 	.word	0x0800a3e9

08002944 <mem_manage_fault>:
{
 8002944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8002948:	4d36      	ldr	r5, [pc, #216]	; (8002a24 <mem_manage_fault+0xe0>)
{
 800294a:	4680      	mov	r8, r0
 800294c:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 800294e:	4836      	ldr	r0, [pc, #216]	; (8002a28 <mem_manage_fault+0xe4>)
 8002950:	4936      	ldr	r1, [pc, #216]	; (8002a2c <mem_manage_fault+0xe8>)
{
 8002952:	4617      	mov	r7, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8002954:	f004 feb7 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8002958:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800295a:	06de      	lsls	r6, r3, #27
 800295c:	d527      	bpl.n	80029ae <mem_manage_fault+0x6a>
		reason = K_ERR_ARM_MEM_STACKING;
 800295e:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
 8002960:	4933      	ldr	r1, [pc, #204]	; (8002a30 <mem_manage_fault+0xec>)
 8002962:	4831      	ldr	r0, [pc, #196]	; (8002a28 <mem_manage_fault+0xe4>)
 8002964:	f004 feaf 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8002968:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800296a:	071d      	lsls	r5, r3, #28
 800296c:	d504      	bpl.n	8002978 <mem_manage_fault+0x34>
		reason = K_ERR_ARM_MEM_UNSTACKING;
 800296e:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
 8002970:	4930      	ldr	r1, [pc, #192]	; (8002a34 <mem_manage_fault+0xf0>)
 8002972:	482d      	ldr	r0, [pc, #180]	; (8002a28 <mem_manage_fault+0xe4>)
 8002974:	f004 fea7 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002978:	4d2a      	ldr	r5, [pc, #168]	; (8002a24 <mem_manage_fault+0xe0>)
 800297a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800297c:	0798      	lsls	r0, r3, #30
 800297e:	d518      	bpl.n	80029b2 <mem_manage_fault+0x6e>
		PR_FAULT_INFO("  Data Access Violation");
 8002980:	492d      	ldr	r1, [pc, #180]	; (8002a38 <mem_manage_fault+0xf4>)
 8002982:	4829      	ldr	r0, [pc, #164]	; (8002a28 <mem_manage_fault+0xe4>)
 8002984:	f004 fe9f 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
		uint32_t temp = SCB->MMFAR;
 8002988:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800298a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800298c:	0619      	lsls	r1, r3, #24
 800298e:	d546      	bpl.n	8002a1e <mem_manage_fault+0xda>
 8002990:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <mem_manage_fault+0xf8>)
 8002992:	4633      	mov	r3, r6
 8002994:	2101      	movs	r1, #1
 8002996:	4824      	ldr	r0, [pc, #144]	; (8002a28 <mem_manage_fault+0xe4>)
 8002998:	f004 fe0d 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
			if (from_hard_fault != 0) {
 800299c:	f1b9 0f00 	cmp.w	r9, #0
 80029a0:	d003      	beq.n	80029aa <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80029a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80029a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a8:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 80029aa:	2413      	movs	r4, #19
 80029ac:	e003      	b.n	80029b6 <mem_manage_fault+0x72>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 80029ae:	2410      	movs	r4, #16
 80029b0:	e7da      	b.n	8002968 <mem_manage_fault+0x24>
	uint32_t mmfar = -EINVAL;
 80029b2:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80029b6:	4d1b      	ldr	r5, [pc, #108]	; (8002a24 <mem_manage_fault+0xe0>)
 80029b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80029ba:	07da      	lsls	r2, r3, #31
 80029bc:	d504      	bpl.n	80029c8 <mem_manage_fault+0x84>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 80029be:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
 80029c0:	491f      	ldr	r1, [pc, #124]	; (8002a40 <mem_manage_fault+0xfc>)
 80029c2:	4819      	ldr	r0, [pc, #100]	; (8002a28 <mem_manage_fault+0xe4>)
 80029c4:	f004 fe7f 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80029c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80029ca:	069b      	lsls	r3, r3, #26
 80029cc:	d504      	bpl.n	80029d8 <mem_manage_fault+0x94>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 80029ce:	2415      	movs	r4, #21
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80029d0:	491c      	ldr	r1, [pc, #112]	; (8002a44 <mem_manage_fault+0x100>)
 80029d2:	4815      	ldr	r0, [pc, #84]	; (8002a28 <mem_manage_fault+0xe4>)
 80029d4:	f004 fe77 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) || (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <mem_manage_fault+0xe0>)
 80029da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029dc:	06d5      	lsls	r5, r2, #27
 80029de:	d402      	bmi.n	80029e6 <mem_manage_fault+0xa2>
 80029e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029e2:	0790      	lsls	r0, r2, #30
 80029e4:	d50a      	bpl.n	80029fc <mem_manage_fault+0xb8>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	0519      	lsls	r1, r3, #20
 80029ea:	d507      	bpl.n	80029fc <mem_manage_fault+0xb8>
				z_check_thread_stack_fail(mmfar, ((uint32_t)&esf[0]));
 80029ec:	4641      	mov	r1, r8
 80029ee:	4630      	mov	r0, r6
 80029f0:	f000 fa46 	bl	8002e80 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80029f4:	b110      	cbz	r0, 80029fc <mem_manage_fault+0xb8>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80029f6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80029fa:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <mem_manage_fault+0xe0>)
 80029fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a00:	0692      	lsls	r2, r2, #26
 8002a02:	d503      	bpl.n	8002a0c <mem_manage_fault+0xc8>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8002a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
 8002a0e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002a10:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002a16:	2300      	movs	r3, #0
 8002a18:	703b      	strb	r3, [r7, #0]
}
 8002a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mmfar = -EINVAL;
 8002a1e:	f06f 0615 	mvn.w	r6, #21
 8002a22:	e7c2      	b.n	80029aa <mem_manage_fault+0x66>
 8002a24:	e000ed00 	.word	0xe000ed00
 8002a28:	08008cf4 	.word	0x08008cf4
 8002a2c:	0800a414 	.word	0x0800a414
 8002a30:	0800a42a 	.word	0x0800a42a
 8002a34:	0800a2a4 	.word	0x0800a2a4
 8002a38:	0800a45d 	.word	0x0800a45d
 8002a3c:	0800a475 	.word	0x0800a475
 8002a40:	0800a48b 	.word	0x0800a48b
 8002a44:	0800a318 	.word	0x0800a318

08002a48 <z_arm_fault>:
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return, _callee_saved_t *callee_regs)
{
 8002a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002a4c:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <z_arm_fault+0x194>)
{
 8002a4e:	b09c      	sub	sp, #112	; 0x70
 8002a50:	4605      	mov	r5, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002a52:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002a54:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	f3c8 0408 	ubfx	r4, r8, #0, #9
 8002a5e:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 8002a62:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) != EXC_RETURN_INDICATOR_PREFIX) {
 8002a66:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8002a6a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8002a6e:	d107      	bne.n	8002a80 <z_arm_fault+0x38>
	if ((exc_return & EXC_RETURN_MODE_THREAD) && (!(exc_return & EXC_RETURN_SPSEL_PROCESS))) {
 8002a70:	f002 030c 	and.w	r3, r2, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d112      	bne.n	8002a9e <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8002a78:	4959      	ldr	r1, [pc, #356]	; (8002be0 <z_arm_fault+0x198>)
 8002a7a:	485a      	ldr	r0, [pc, #360]	; (8002be4 <z_arm_fault+0x19c>)
 8002a7c:	f004 fe23 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	*nested_exc = false;
 8002a80:	2600      	movs	r6, #0
		return NULL;
 8002a82:	4635      	mov	r5, r6
	*recoverable = false;
 8002a84:	2300      	movs	r3, #0
 8002a86:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
 8002a88:	1ee3      	subs	r3, r4, #3
 8002a8a:	2b09      	cmp	r3, #9
 8002a8c:	f200 8084 	bhi.w	8002b98 <z_arm_fault+0x150>
 8002a90:	e8df f003 	tbb	[pc, r3]
 8002a94:	767d7a0a 	.word	0x767d7a0a
 8002a98:	82828282 	.word	0x82828282
 8002a9c:	8082      	.short	0x8082
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8002a9e:	0710      	lsls	r0, r2, #28
			ptr_esf = (struct arch_esf *)psp;
 8002aa0:	bf4c      	ite	mi
 8002aa2:	460d      	movmi	r5, r1
			*nested_exc = true;
 8002aa4:	2601      	movpl	r6, #1
 8002aa6:	e7ed      	b.n	8002a84 <z_arm_fault+0x3c>
	PR_FAULT_INFO("***** HARD FAULT *****");
 8002aa8:	494f      	ldr	r1, [pc, #316]	; (8002be8 <z_arm_fault+0x1a0>)
 8002aaa:	484e      	ldr	r0, [pc, #312]	; (8002be4 <z_arm_fault+0x19c>)
 8002aac:	f004 fe0b 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002ab0:	4c4a      	ldr	r4, [pc, #296]	; (8002bdc <z_arm_fault+0x194>)
	*recoverable = false;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002ab6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ab8:	079a      	lsls	r2, r3, #30
 8002aba:	d505      	bpl.n	8002ac8 <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
 8002abc:	494b      	ldr	r1, [pc, #300]	; (8002bec <z_arm_fault+0x1a4>)
	PR_FAULT_INFO("***** Debug monitor exception *****");
 8002abe:	4849      	ldr	r0, [pc, #292]	; (8002be4 <z_arm_fault+0x19c>)
 8002ac0:	f004 fe01 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8002ac4:	2400      	movs	r4, #0
 8002ac6:	e032      	b.n	8002b2e <z_arm_fault+0xe6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8002ac8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	da01      	bge.n	8002ad2 <z_arm_fault+0x8a>
		PR_EXC("  Debug event");
 8002ace:	4948      	ldr	r1, [pc, #288]	; (8002bf0 <z_arm_fault+0x1a8>)
 8002ad0:	e7f5      	b.n	8002abe <z_arm_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8002ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	d5f5      	bpl.n	8002ac4 <z_arm_fault+0x7c>
		PR_EXC("  Fault escalation (see below)");
 8002ad8:	4946      	ldr	r1, [pc, #280]	; (8002bf4 <z_arm_fault+0x1ac>)
 8002ada:	4842      	ldr	r0, [pc, #264]	; (8002be4 <z_arm_fault+0x19c>)
 8002adc:	f004 fdf3 	bl	80076c6 <z_log_msg_simple_create_0.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8002ae0:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8002ae2:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002aea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aee:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8002af2:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8002af4:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8002af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002afe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b02:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8002b06:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d008      	beq.n	8002b20 <z_arm_fault+0xd8>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8002b0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	b343      	cbz	r3, 8002b66 <z_arm_fault+0x11e>
			reason = mem_manage_fault(esf, 1, recoverable);
 8002b14:	1dfa      	adds	r2, r7, #7
 8002b16:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f7ff ff13 	bl	8002944 <mem_manage_fault>
 8002b1e:	e031      	b.n	8002b84 <z_arm_fault+0x13c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	4a35      	ldr	r2, [pc, #212]	; (8002bf8 <z_arm_fault+0x1b0>)
 8002b24:	2101      	movs	r1, #1
 8002b26:	482f      	ldr	r0, [pc, #188]	; (8002be4 <z_arm_fault+0x19c>)
 8002b28:	f004 fd45 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
			reason = esf->basic.r0;
 8002b2c:	682c      	ldr	r4, [r5, #0]
	__ASSERT(esf != NULL, "ESF could not be retrieved successfully. Shall never occur.");

	z_arm_set_fault_sp(esf, exc_return);

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	b9ab      	cbnz	r3, 8002b5e <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(struct arch_esf));
 8002b32:	2268      	movs	r2, #104	; 0x68
 8002b34:	4629      	mov	r1, r5
 8002b36:	f107 0008 	add.w	r0, r7, #8
 8002b3a:	f005 fab4 	bl	80080a6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	2e00      	cmp	r6, #0
 8002b42:	d045      	beq.n	8002bd0 <z_arm_fault+0x188>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b48:	b922      	cbnz	r2, 8002b54 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002b4a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8002b4e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 8002b54:	f107 0108 	add.w	r1, r7, #8
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fd69 	bl	8002630 <z_arm_fatal_error>
}
 8002b5e:	3770      	adds	r7, #112	; 0x70
 8002b60:	46bd      	mov	sp, r7
 8002b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8002b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b68:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8002b6c:	d004      	beq.n	8002b78 <z_arm_fault+0x130>
			reason = bus_fault(esf, 1, recoverable);
 8002b6e:	1df9      	adds	r1, r7, #7
 8002b70:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8002b72:	f7ff fe2b 	bl	80027cc <bus_fault.constprop.0>
 8002b76:	e005      	b.n	8002b84 <z_arm_fault+0x13c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8002b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7e:	d3a1      	bcc.n	8002ac4 <z_arm_fault+0x7c>
			reason = usage_fault(esf);
 8002b80:	f7ff fe8c 	bl	800289c <usage_fault.constprop.0>
 8002b84:	4604      	mov	r4, r0
 8002b86:	e7d2      	b.n	8002b2e <z_arm_fault+0xe6>
		reason = mem_manage_fault(esf, 0, recoverable);
 8002b88:	1dfa      	adds	r2, r7, #7
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	e7c4      	b.n	8002b18 <z_arm_fault+0xd0>
		reason = bus_fault(esf, 0, recoverable);
 8002b8e:	1df9      	adds	r1, r7, #7
 8002b90:	2000      	movs	r0, #0
 8002b92:	e7ee      	b.n	8002b72 <z_arm_fault+0x12a>
	PR_FAULT_INFO("***** Debug monitor exception *****");
 8002b94:	4919      	ldr	r1, [pc, #100]	; (8002bfc <z_arm_fault+0x1b4>)
 8002b96:	e792      	b.n	8002abe <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
 8002b98:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
 8002b9c:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <z_arm_fault+0x1b8>)
 8002b9e:	46e8      	mov	r8, sp
 8002ba0:	b08a      	sub	sp, #40	; 0x28
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <z_arm_fault+0x1bc>)
 8002ba4:	bf18      	it	ne
 8002ba6:	4613      	movne	r3, r2
 8002ba8:	466a      	mov	r2, sp
 8002baa:	4917      	ldr	r1, [pc, #92]	; (8002c08 <z_arm_fault+0x1c0>)
 8002bac:	3c10      	subs	r4, #16
 8002bae:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8002bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb6:	61d4      	str	r4, [r2, #28]
 8002bb8:	8413      	strh	r3, [r2, #32]
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <z_arm_fault+0x1c4>)
 8002bbc:	f842 3f10 	str.w	r3, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8002bc6:	4807      	ldr	r0, [pc, #28]	; (8002be4 <z_arm_fault+0x19c>)
 8002bc8:	f7ff f9e8 	bl	8001f9c <z_impl_z_log_msg_static_create>
 8002bcc:	46c5      	mov	sp, r8
}
 8002bce:	e779      	b.n	8002ac4 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002bd0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	e7bb      	b.n	8002b52 <z_arm_fault+0x10a>
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00
 8002be0:	0800a4d8 	.word	0x0800a4d8
 8002be4:	08008cf4 	.word	0x08008cf4
 8002be8:	0800a503 	.word	0x0800a503
 8002bec:	0800a51a 	.word	0x0800a51a
 8002bf0:	0800a53b 	.word	0x0800a53b
 8002bf4:	0800a549 	.word	0x0800a549
 8002bf8:	0800a568 	.word	0x0800a568
 8002bfc:	0800a584 	.word	0x0800a584
 8002c00:	0800a4bf 	.word	0x0800a4bf
 8002c04:	0800a4aa 	.word	0x0800a4aa
 8002c08:	0800a5a8 	.word	0x0800a5a8
 8002c0c:	01000004 	.word	0x01000004

08002c10 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <z_arm_fault_init+0x14>)
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	f042 0210 	orr.w	r2, r2, #16
 8002c18:	615a      	str	r2, [r3, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#else
	SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk;
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	f022 0208 	bic.w	r2, r2, #8
 8002c20:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8002c28:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8002c2c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8002c30:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8002c32:	4672      	mov	r2, lr
	bl z_arm_fault
 8002c34:	f7ff ff08 	bl	8002a48 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8002c38:	bd01      	pop	{r0, pc}
 8002c3a:	bf00      	nop

08002c3c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002c3c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002c3e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8002c42:	4808      	ldr	r0, [pc, #32]	; (8002c64 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8002c44:	f44f 6108 	mov.w	r1, #2176	; 0x880
    adds r0, r0, r1
 8002c48:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8002c4a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002c4e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002c52:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002c54:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002c56:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002c5a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_prep_c
     * (even though we do not intend to return).
     */
    bl z_prep_c
 8002c5e:	f000 f89d 	bl	8002d9c <z_prep_c>
 8002c62:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002c64:	24001400 	.word	0x24001400

08002c68 <z_impl_k_thread_abort>:

void z_impl_k_thread_abort(k_tid_t thread)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	if (_current == thread) {
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <z_impl_k_thread_abort+0x24>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4283      	cmp	r3, r0
 8002c6e:	d10b      	bne.n	8002c88 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c70:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002c74:	b143      	cbz	r3, 8002c88 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <z_impl_k_thread_abort+0x28>)
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c7e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8002c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8002c88:	f002 bb56 	b.w	8005338 <z_thread_abort>
 8002c8c:	24000fec 	.word	0x24000fec
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002c94:	4923      	ldr	r1, [pc, #140]	; (8002d24 <z_arm_pendsv+0x90>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002c96:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8002c98:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8002c9c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8002ca0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
 8002ca2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {r4-r11, ip}
 8002ca6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8002caa:	f01e 0f10 	tst.w	lr, #16
    bne .L_out_fp_endif
 8002cae:	d103      	bne.n	8002cb8 <z_arm_pendsv+0x24>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8002cb0:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
 8002cb4:	ec80 8a10 	vstmia	r0, {s16-s31}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002cb8:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8002cba:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8002cbe:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr r7, =_SCS_ICSR
 8002cc2:	4f19      	ldr	r7, [pc, #100]	; (8002d28 <z_arm_pendsv+0x94>)
    ldr r6, =_SCS_ICSR_UNPENDSV
 8002cc4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8002cc8:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8002cca:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in r7 and _SCS_ICSR_UNPENDSV in r6 */
    str r6, [r7, #0]
 8002ccc:	603e      	str	r6, [r7, #0]
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    ldr r4, =_thread_offset_to_tls
    adds r4, r2, r4
    ldr r0, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_tls]
 8002cce:	6f10      	ldr	r0, [r2, #112]	; 0x70

    /* For Cortex-M, store TLS pointer in a global variable,
     * as it lacks the process ID or thread ID register
     * to be used by toolchain to access thread data.
     */
    ldr r4, =z_arm_tls_ptr
 8002cd0:	4c16      	ldr	r4, [pc, #88]	; (8002d2c <z_arm_pendsv+0x98>)
    str r0, [r4]
 8002cd2:	6020      	str	r0, [r4, #0]
#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 8002cd4:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8002cd8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8002cda:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8002cdc:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8002cde:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8002ce2:	f01e 0f10 	tst.w	lr, #16
    beq .L_in_fp_active
 8002ce6:	d003      	beq.n	8002cf0 <z_arm_pendsv+0x5c>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 8002ce8:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8002cea:	eee1 3a10 	vmsr	fpscr, r3
    b .L_in_fp_endif
 8002cee:	e003      	b.n	8002cf8 <z_arm_pendsv+0x64>
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8002cf0:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
 8002cf4:	ec90 8a10 	vldmia	r0, {s16-s31}
.L_in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 8002cf8:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8002d00:	f383 8814 	msr	CONTROL, r3
    isb
 8002d04:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8002d08:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8002d0a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8002d0c:	f000 f94e 	bl	8002fac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8002d10:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8002d14:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {r4-r11, ip}
 8002d18:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
 8002d1c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /*
     * Cortex-M: return from PendSV exception
     */
    bx lr
 8002d20:	4770      	bx	lr
 8002d22:	0000      	.short	0x0000
    ldr r1, =_kernel
 8002d24:	24000fec 	.word	0x24000fec
    ldr r7, =_SCS_ICSR
 8002d28:	e000ed04 	.word	0xe000ed04
    ldr r4, =z_arm_tls_ptr
 8002d2c:	24000e6c 	.word	0x24000e6c

08002d30 <z_arm_svc>:
  bne .L_stack_frame_endif
.L_stack_frame_msp:
  mrs r0, MSP
.L_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8002d30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8002d34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8002d36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8002d3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8002d3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8002d40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne .L_oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8002d44:	2902      	cmp	r1, #2
    beq .L_oops
 8002d46:	d0ff      	beq.n	8002d48 <z_arm_svc+0x18>
    bx r0

#endif

.L_oops:
    push {r0, lr}
 8002d48:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    mov r2, lr /* EXC_RETURN */
 8002d4a:	4672      	mov	r2, lr
    bl z_do_kernel_oops
 8002d4c:	f004 fcb7 	bl	80076be <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8002d50:	bd01      	pop	{r0, pc}
 8002d52:	bf00      	nop

08002d54 <arch_irq_enable>:

#if !defined(CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8002d54:	b200      	sxth	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002d56:	2800      	cmp	r0, #0
 8002d58:	db07      	blt.n	8002d6a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	0941      	lsrs	r1, r0, #5
 8002d5e:	f000 001f 	and.w	r0, r0, #31
 8002d62:	4a02      	ldr	r2, [pc, #8]	; (8002d6c <arch_irq_enable+0x18>)
 8002d64:	4083      	lsls	r3, r0
 8002d66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8002d6a:	4770      	bx	lr
 8002d6c:	e000e100 	.word	0xe000e100

08002d70 <z_arm_irq_priority_set>:
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq, BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8002d70:	b200      	sxth	r0, r0
		prio += _IRQ_PRIO_OFFSET;
 8002d72:	3101      	adds	r1, #1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002d74:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8002d7a:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	db06      	blt.n	8002d8c <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d82:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d86:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8002d8a:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8c:	f000 000f 	and.w	r0, r0, #15
 8002d90:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <z_arm_irq_priority_set+0x28>)
 8002d92:	5419      	strb	r1, [r3, r0]
}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed14 	.word	0xe000ed14

08002d9c <z_prep_c>:
#define VTOR_MASK SCB_VTOR_TBLOFF_Msk
#endif

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & VTOR_MASK;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <z_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_prep_c(void)
{
 8002d9e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & VTOR_MASK;
 8002da0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <z_prep_c+0x58>)
 8002da6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8002da8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002dac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002db0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002db4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8002dbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dc0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8002dc8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002dcc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 8002dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002dd4:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	eee1 3a10 	vmsr	fpscr, r3

	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8002dde:	f001 fefd 	bl	8004bdc <z_bss_zero>
	z_data_copy();
 8002de2:	f002 fbc3 	bl	800556c <z_data_copy>
#if defined(CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER)
	/* Invoke SoC-specific interrupt controller initialization */
	z_soc_irq_init();
#else
	z_arm_interrupt_init();
 8002de6:	f000 f8b7 	bl	8002f58 <z_arm_interrupt_init>
#endif

#ifdef CONFIG_NULL_POINTER_EXCEPTION_DETECTION_DWT
	z_arm_debug_enable_null_pointer_detection();
#endif
	z_cstart();
 8002dea:	f001 ff43 	bl	8004c74 <z_cstart>
 8002dee:	bf00      	nop
 8002df0:	08000000 	.word	0x08000000
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <arch_new_thread>:
	iframe->pc = (uint32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
	iframe->a1 = (uint32_t)entry;
 8002df8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8002dfc:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
 8002dfe:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 8002e00:	4909      	ldr	r1, [pc, #36]	; (8002e28 <arch_new_thread+0x30>)
	iframe->a2 = (uint32_t)p1;
 8002e02:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 8002e04:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 8002e06:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8002e0a:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 8002e0c:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8002e0e:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
 8002e10:	60d3      	str	r3, [r2, #12]

	iframe->xpsr = 0x01000000UL; /* clear all, thumb bit is 1, even if RO */
 8002e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e16:	61d3      	str	r3, [r2, #28]

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8002e18:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
 8002e1a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8002e1c:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 8002e1e:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002e22:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8002e26:	4770      	bx	lr
 8002e28:	080019ad 	.word	0x080019ad

08002e2c <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8002e2c:	7b03      	ldrb	r3, [r0, #12]
 8002e2e:	f013 0f02 	tst.w	r3, #2
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <z_arm_mpu_stack_guard_and_fpu_adjust+0x50>)
 8002e34:	d103      	bne.n	8002e3e <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
 8002e36:	f890 20bd 	ldrb.w	r2, [r0, #189]	; 0xbd
 8002e3a:	06d2      	lsls	r2, r2, #27
 8002e3c:	d411      	bmi.n	8002e62 <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 8002e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) == 0) {
 8002e46:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8002e4a:	0719      	lsls	r1, r3, #28
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8002e4c:	bf5c      	itt	pl
 8002e4e:	f043 0308 	orrpl.w	r3, r3, #8
 8002e52:	f8c0 30bc 	strpl.w	r3, [r0, #188]	; 0xbc

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 8002e56:	7b03      	ldrb	r3, [r0, #12]
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	7303      	strb	r3, [r0, #12]
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
 8002e5e:	2080      	movs	r0, #128	; 0x80
 8002e60:	4770      	bx	lr
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 8002e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e64:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002e68:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) {
 8002e6a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8002e6e:	071a      	lsls	r2, r3, #28
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8002e70:	bf44      	itt	mi
 8002e72:	f023 0308 	bicmi.w	r3, r3, #8
 8002e76:	f8c0 30bc 	strmi.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.size += FP_GUARD_EXTRA_SIZE;
 8002e7a:	e7f0      	b.n	8002e5e <z_arm_mpu_stack_guard_and_fpu_adjust+0x32>
 8002e7c:	e000ef00 	.word	0xe000ef00

08002e80 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8002e80:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <z_check_thread_stack_fail+0x28>)
{
 8002e82:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8002e84:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8002e86:	b170      	cbz	r0, 8002ea6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len, guard_len, fault_addr,
 8002e88:	f113 0f16 	cmn.w	r3, #22
 8002e8c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8002e8e:	d005      	beq.n	8002e9c <z_check_thread_stack_fail+0x1c>
 8002e90:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d805      	bhi.n	8002ea4 <z_check_thread_stack_fail+0x24>
 8002e98:	4283      	cmp	r3, r0
 8002e9a:	d203      	bcs.n	8002ea4 <z_check_thread_stack_fail+0x24>
		return 0;
 8002e9c:	4281      	cmp	r1, r0
 8002e9e:	bf28      	it	cs
 8002ea0:	2000      	movcs	r0, #0
 8002ea2:	4770      	bx	lr
 8002ea4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 8002ea6:	4770      	bx	lr
 8002ea8:	24000fec 	.word	0x24000fec

08002eac <arch_float_disable>:
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
int arch_float_disable(struct k_thread *thread)
{
	if (thread != _current) {
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <arch_float_disable+0x44>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4283      	cmp	r3, r0
 8002eb2:	d11a      	bne.n	8002eea <arch_float_disable+0x3e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eb4:	f3ef 8005 	mrs	r0, IPSR
		return -EINVAL;
	}

	if (arch_is_in_isr()) {
 8002eb8:	b9b8      	cbnz	r0, 8002eea <arch_float_disable+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002eba:	f3ef 8111 	mrs	r1, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	f382 8812 	msr	BASEPRI_MAX, r2
  __ASM volatile ("isb 0xF":::"memory");
 8002ec4:	f3bf 8f6f 	isb	sy
	 * fault to take an outdated thread user_options flag into
	 * account.
	 */
	int key = arch_irq_lock();

	thread->base.user_options &= ~K_FP_REGS;
 8002ec8:	7b1a      	ldrb	r2, [r3, #12]
 8002eca:	f022 0202 	bic.w	r2, r2, #2
 8002ece:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002ed0:	f3ef 8314 	mrs	r3, CONTROL

	__set_CONTROL(__get_CONTROL() & (~CONTROL_FPCA_Msk));
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002ed8:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002edc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002ee0:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("isb 0xF":::"memory");
 8002ee4:	f3bf 8f6f 	isb	sy
	 * register; arch_irq_unlock() already adds one.
	 */

	arch_irq_unlock(key);

	return 0;
 8002ee8:	4770      	bx	lr
		return -EINVAL;
 8002eea:	f06f 0015 	mvn.w	r0, #21
}
 8002eee:	4770      	bx	lr
 8002ef0:	24000fec 	.word	0x24000fec

08002ef4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8002ef4:	4615      	mov	r5, r2
 8002ef6:	460e      	mov	r6, r1
  __builtin_arm_set_fpscr(fpscr);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	b508      	push	{r3, lr}
 8002efc:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002f00:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8002f04:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002f08:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	z_current_thread_set(main_thread);
 8002f14:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <arch_switch_to_main_thread+0x48>)
	 * thread for the first time, as the pointer is only set
	 * during context switching.
	 */
	extern uintptr_t z_arm_tls_ptr;

	z_arm_tls_ptr = main_thread->tls;
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <arch_switch_to_main_thread+0x4c>)
	z_current_thread_set(main_thread);
 8002f18:	6090      	str	r0, [r2, #8]
	z_arm_tls_ptr = main_thread->tls;
 8002f1a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002f1c:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8002f1e:	f000 f845 	bl	8002fac <z_arm_configure_dynamic_mpu_regions>
	 * with the thread entry process.
	 *
	 * When calling arch_irq_unlock_outlined, LR is lost which is fine since
	 * we do not intend to return after calling z_thread_entry.
	 */
	__asm__ volatile("mov   r4,  %0\n" /* force _main to be stored in a register */
 8002f22:	462c      	mov	r4, r5
 8002f24:	f386 8809 	msr	PSP, r6
 8002f28:	2000      	movs	r0, #0
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <arch_switch_to_main_thread+0x50>)
 8002f2c:	4798      	blx	r3
 8002f2e:	4620      	mov	r0, r4
 8002f30:	2100      	movs	r1, #0
 8002f32:	2200      	movs	r2, #0
 8002f34:	2300      	movs	r3, #0
 8002f36:	4c04      	ldr	r4, [pc, #16]	; (8002f48 <arch_switch_to_main_thread+0x54>)
 8002f38:	4720      	bx	r4
			 "bx    r4\n"
			 :
			 : "r"(_main), "r"(stack_ptr)
			 : "r0", "r1", "r2", "r3", "r4", "ip", "lr", "memory");

	CODE_UNREACHABLE;
 8002f3a:	bf00      	nop
 8002f3c:	24000fec 	.word	0x24000fec
 8002f40:	24000e6c 	.word	0x24000e6c
 8002f44:	080076d7 	.word	0x080076d7
 8002f48:	080019ad 	.word	0x080019ad

08002f4c <z_arm_cpu_idle_init>:
 * Only called by arch_kernel_init(). Sets SEVONPEND bit once for the system's
 * duration.
 */
void z_arm_cpu_idle_init(void)
{
	SCB->SCR = SCB_SCR_SEVONPEND_Msk;
 8002f4c:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <z_arm_cpu_idle_init+0x8>)
 8002f4e:	2210      	movs	r2, #16
 8002f50:	611a      	str	r2, [r3, #16]
}
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002f58:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	4804      	ldr	r0, [pc, #16]	; (8002f6c <z_arm_interrupt_init+0x14>)
 8002f5c:	2110      	movs	r1, #16
 8002f5e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002f60:	3301      	adds	r3, #1
 8002f62:	2ba3      	cmp	r3, #163	; 0xa3
 8002f64:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002f68:	d1f9      	bne.n	8002f5e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <_isr_wrapper>:
 * z_arm_pendsv()) and pends the PendSV exception if so: the latter will
 * perform the context switch itself.
 *
 */
void _isr_wrapper(void)
{
 8002f70:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f72:	f3ef 8305 	mrs	r3, IPSR
	int32_t irq_number = __get_IPSR();
#endif
	irq_number -= 16;

	struct _isr_table_entry *entry = &_sw_isr_table[irq_number];
	(entry->isr)(entry->arg);
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <_isr_wrapper+0x20>)
	irq_number -= 16;
 8002f78:	3b10      	subs	r3, #16
	(entry->isr)(entry->arg);
 8002f7a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8002f7e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002f82:	6849      	ldr	r1, [r1, #4]
 8002f84:	4788      	blx	r1
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif /* CONFIG_TRACING_ISR */

	z_arm_exc_exit();
}
 8002f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 8002f8a:	f7ff bc0f 	b.w	80027ac <z_arm_exc_exit>
 8002f8e:	bf00      	nop
 8002f90:	08008728 	.word	0x08008728

08002f94 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <z_arm_configure_static_mpu_regions+0xc>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	4a02      	ldr	r2, [pc, #8]	; (8002fa4 <z_arm_configure_static_mpu_regions+0x10>)
 8002f9a:	4803      	ldr	r0, [pc, #12]	; (8002fa8 <z_arm_configure_static_mpu_regions+0x14>)
 8002f9c:	f000 b890 	b.w	80030c0 <arm_core_mpu_configure_static_mpu_regions>
 8002fa0:	24050000 	.word	0x24050000
 8002fa4:	24000000 	.word	0x24000000
 8002fa8:	080092c8 	.word	0x080092c8

08002fac <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8002fac:	b510      	push	{r4, lr}
 8002fae:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 8002fb0:	f7ff ff3c 	bl	8002e2c <z_arm_mpu_stack_guard_and_fpu_adjust>
 8002fb4:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8002fb6:	4806      	ldr	r0, [pc, #24]	; (8002fd0 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
 8002fb8:	6e22      	ldr	r2, [r4, #96]	; 0x60

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002fba:	2101      	movs	r1, #1
		guard_start = thread->stack_info.start - guard_size;
 8002fbc:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
 8002fbe:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <z_arm_configure_dynamic_mpu_regions+0x28>)
 8002fc4:	6083      	str	r3, [r0, #8]
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
 8002fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002fca:	f000 b883 	b.w	80030d4 <arm_core_mpu_configure_dynamic_mpu_regions>
 8002fce:	bf00      	nop
 8002fd0:	24000e70 	.word	0x24000e70
 8002fd4:	150b0000 	.word	0x150b0000

08002fd8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8002fd8:	b508      	push	{r3, lr}
 8002fda:	4603      	mov	r3, r0
/**
 *  Get the number of supported MPU regions.
 */
static inline uint8_t get_num_regions(void)
{
	uint32_t type = MPU->TYPE;
 8002fdc:	4810      	ldr	r0, [pc, #64]	; (8003020 <region_allocate_and_init+0x48>)
 8002fde:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8002fe2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d907      	bls.n	8002ffc <region_allocate_and_init+0x24>
	z_impl_z_log_msg_simple_create_1(source, level, fmt, arg);
 8002fec:	480d      	ldr	r0, [pc, #52]	; (8003024 <region_allocate_and_init+0x4c>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <region_allocate_and_init+0x50>)
 8002ff2:	f004 fae0 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
		return -EINVAL;
 8002ff6:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
 8002ffa:	bd08      	pop	{r3, pc}
	return (uint8_t)type;
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8002ffc:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003000:	680a      	ldr	r2, [r1, #0]
 8003002:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 8003006:	431a      	orrs	r2, r3
 8003008:	f042 0210 	orr.w	r2, r2, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800300c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003010:	688a      	ldr	r2, [r1, #8]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	return index;
 800301a:	4618      	mov	r0, r3
 800301c:	e7ed      	b.n	8002ffa <region_allocate_and_init+0x22>
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00
 8003024:	08008cec 	.word	0x08008cec
 8003028:	0800a5bf 	.word	0x0800a5bf

0800302c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 800302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302e:	460e      	mov	r6, r1
 8003030:	b085      	sub	sp, #20
 8003032:	461f      	mov	r7, r3
 8003034:	4604      	mov	r4, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8003036:	2500      	movs	r5, #0
 8003038:	42b5      	cmp	r5, r6
 800303a:	da0d      	bge.n	8003058 <mpu_configure_regions+0x2c>
		if (regions[i].size == 0U) {
 800303c:	6860      	ldr	r0, [r4, #4]
 800303e:	b310      	cbz	r0, 8003086 <mpu_configure_regions+0x5a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8003040:	b197      	cbz	r7, 8003068 <mpu_configure_regions+0x3c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8003042:	1e43      	subs	r3, r0, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8003044:	4218      	tst	r0, r3
 8003046:	d00a      	beq.n	800305e <mpu_configure_regions+0x32>
 8003048:	4a10      	ldr	r2, [pc, #64]	; (800308c <mpu_configure_regions+0x60>)
 800304a:	462b      	mov	r3, r5
 800304c:	2101      	movs	r1, #1
 800304e:	4810      	ldr	r0, [pc, #64]	; (8003090 <mpu_configure_regions+0x64>)
 8003050:	f004 fab1 	bl	80075b6 <z_impl_z_log_msg_simple_create_1>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
 8003054:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8003058:	4610      	mov	r0, r2
 800305a:	b005      	add	sp, #20
 800305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
 800305e:	287f      	cmp	r0, #127	; 0x7f
 8003060:	d9f2      	bls.n	8003048 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
 8003062:	6821      	ldr	r1, [r4, #0]
		&&
 8003064:	420b      	tst	r3, r1
 8003066:	d1ef      	bne.n	8003048 <mpu_configure_regions+0x1c>
	region_conf.base = new_region->start;
 8003068:	6823      	ldr	r3, [r4, #0]
	return region_allocate_and_init(index,
 800306a:	a901      	add	r1, sp, #4
	region_conf.base = new_region->start;
 800306c:	9301      	str	r3, [sp, #4]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800306e:	f004 fb46 	bl	80076fe <size_to_mpu_rasr_size>
 8003072:	68a3      	ldr	r3, [r4, #8]
 8003074:	4303      	orrs	r3, r0
	return region_allocate_and_init(index,
 8003076:	b2d0      	uxtb	r0, r2
 8003078:	9303      	str	r3, [sp, #12]
 800307a:	f7ff ffad 	bl	8002fd8 <region_allocate_and_init>
		if (reg_index == -EINVAL) {
 800307e:	f110 0f16 	cmn.w	r0, #22
 8003082:	d0e7      	beq.n	8003054 <mpu_configure_regions+0x28>
		reg_index++;
 8003084:	1c42      	adds	r2, r0, #1
	for (i = 0; i < regions_num; i++) {
 8003086:	3501      	adds	r5, #1
 8003088:	340c      	adds	r4, #12
 800308a:	e7d5      	b.n	8003038 <mpu_configure_regions+0xc>
 800308c:	0800a5e5 	.word	0x0800a5e5
 8003090:	08008cec 	.word	0x08008cec

08003094 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <arm_core_mpu_enable+0x14>)
 8003096:	2205      	movs	r2, #5
 8003098:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 800309c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030a0:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80030ac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
 80030b0:	4b02      	ldr	r3, [pc, #8]	; (80030bc <arm_core_mpu_disable+0x10>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 80030c0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80030c2:	4c03      	ldr	r4, [pc, #12]	; (80030d0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80030c4:	2301      	movs	r3, #1
 80030c6:	7822      	ldrb	r2, [r4, #0]
 80030c8:	f7ff ffb0 	bl	800302c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80030cc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 80030ce:	bd10      	pop	{r4, pc}
 80030d0:	24001038 	.word	0x24001038

080030d4 <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80030d4:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <arm_core_mpu_configure_dynamic_mpu_regions+0x30>)
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 80030d6:	b508      	push	{r3, lr}
 80030d8:	2300      	movs	r3, #0
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	f7ff ffa6 	bl	800302c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80030e0:	f110 0f16 	cmn.w	r0, #22
 80030e4:	d007      	beq.n	80030f6 <arm_core_mpu_configure_dynamic_mpu_regions+0x22>
	uint32_t type = MPU->TYPE;
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
 80030e8:	2100      	movs	r1, #0
 80030ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80030ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80030f2:	4298      	cmp	r0, r3
 80030f4:	db00      	blt.n	80030f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 80030f6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 80030f8:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 80030fc:	3001      	adds	r0, #1
  MPU->RASR = 0U;
 80030fe:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8003102:	e7f2      	b.n	80030ea <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8003104:	24001038 	.word	0x24001038
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <z_arm_mpu_init>:
 800310c:	4858      	ldr	r0, [pc, #352]	; (8003270 <z_arm_mpu_init+0x164>)
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800310e:	4959      	ldr	r1, [pc, #356]	; (8003274 <z_arm_mpu_init+0x168>)
{
 8003110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003114:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8003118:	b085      	sub	sp, #20
	if (mpu_config.num_regions > get_num_regions()) {
 800311a:	680d      	ldr	r5, [r1, #0]
 800311c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003120:	429d      	cmp	r5, r3
 8003122:	f200 80a1 	bhi.w	8003268 <z_arm_mpu_init+0x15c>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8003126:	f7ff ffc1 	bl	80030ac <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800312a:	6849      	ldr	r1, [r1, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	4295      	cmp	r5, r2
 8003130:	f101 010c 	add.w	r1, r1, #12
 8003134:	d11a      	bne.n	800316c <z_arm_mpu_init+0x60>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8003136:	4c50      	ldr	r4, [pc, #320]	; (8003278 <z_arm_mpu_init+0x16c>)
	num_regions = mem_attr_get_regions(&region);
 8003138:	4668      	mov	r0, sp
		switch (DT_MEM_ARM_GET(region[idx].dt_attr)) {
 800313a:	4f50      	ldr	r7, [pc, #320]	; (800327c <z_arm_mpu_init+0x170>)
	static_regions_num = mpu_config.num_regions;
 800313c:	7025      	strb	r5, [r4, #0]
	num_regions = mem_attr_get_regions(&region);
 800313e:	f7ff fa71 	bl	8002624 <mem_attr_get_regions>
	for (size_t idx = 0; idx < num_regions; idx++) {
 8003142:	2500      	movs	r5, #0
	num_regions = mem_attr_get_regions(&region);
 8003144:	4606      	mov	r6, r0
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_RAM_NOCACHE_ATTR);
 8003146:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8003280 <z_arm_mpu_init+0x174>
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_FLASH_ATTR);
 800314a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8003284 <z_arm_mpu_init+0x178>
	for (size_t idx = 0; idx < num_regions; idx++) {
 800314e:	42ae      	cmp	r6, r5
 8003150:	d11f      	bne.n	8003192 <z_arm_mpu_init+0x86>
		__ASSERT(0, "Failed to allocate MPU regions from DT\n");
		return -EINVAL;
	}
#endif /* CONFIG_MEM_ATTR */
	/* Clear all regions before enabling MPU */
	for (int i = static_regions_num; i < get_num_regions(); i++) {
 8003152:	7823      	ldrb	r3, [r4, #0]
 8003154:	2000      	movs	r0, #0
 8003156:	4946      	ldr	r1, [pc, #280]	; (8003270 <z_arm_mpu_init+0x164>)
 8003158:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800315c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003160:	4293      	cmp	r3, r2
 8003162:	db7b      	blt.n	800325c <z_arm_mpu_init+0x150>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8003164:	2000      	movs	r0, #0
	arm_core_mpu_enable();
 8003166:	f7ff ff95 	bl	8003094 <arm_core_mpu_enable>
	return 0;
 800316a:	e04c      	b.n	8003206 <z_arm_mpu_init+0xfa>
	MPU->RNR = index;
 800316c:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003170:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8003174:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8003178:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800317a:	3201      	adds	r2, #1
 800317c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003180:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8003190:	e7cd      	b.n	800312e <z_arm_mpu_init+0x22>
		switch (DT_MEM_ARM_GET(region[idx].dt_attr)) {
 8003192:	9800      	ldr	r0, [sp, #0]
 8003194:	ea4f 1c05 	mov.w	ip, r5, lsl #4
 8003198:	eb00 1105 	add.w	r1, r0, r5, lsl #4
 800319c:	68cb      	ldr	r3, [r1, #12]
 800319e:	403b      	ands	r3, r7
 80031a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031a4:	d044      	beq.n	8003230 <z_arm_mpu_init+0x124>
 80031a6:	d80a      	bhi.n	80031be <z_arm_mpu_init+0xb2>
 80031a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ac:	d02e      	beq.n	800320c <z_arm_mpu_init+0x100>
 80031ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b2:	d034      	beq.n	800321e <z_arm_mpu_init+0x112>
 80031b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b8:	d010      	beq.n	80031dc <z_arm_mpu_init+0xd0>
	for (size_t idx = 0; idx < num_regions; idx++) {
 80031ba:	3501      	adds	r5, #1
 80031bc:	e7c7      	b.n	800314e <z_arm_mpu_init+0x42>
		switch (DT_MEM_ARM_GET(region[idx].dt_attr)) {
 80031be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c2:	d03e      	beq.n	8003242 <z_arm_mpu_init+0x136>
 80031c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c8:	d1f7      	bne.n	80031ba <z_arm_mpu_init+0xae>
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_EXTMEM_ATTR);
 80031ca:	f850 300c 	ldr.w	r3, [r0, ip]
 80031ce:	6888      	ldr	r0, [r1, #8]
 80031d0:	f004 fa95 	bl	80076fe <size_to_mpu_rasr_size>
 80031d4:	684a      	ldr	r2, [r1, #4]
 80031d6:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
			break;
 80031da:	e009      	b.n	80031f0 <z_arm_mpu_init+0xe4>
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_RAM_ATTR);
 80031dc:	f850 300c 	ldr.w	r3, [r0, ip]
 80031e0:	6888      	ldr	r0, [r1, #8]
 80031e2:	f004 fa8c 	bl	80076fe <size_to_mpu_rasr_size>
 80031e6:	f040 5088 	orr.w	r0, r0, #285212672	; 0x11000000
 80031ea:	684a      	ldr	r2, [r1, #4]
 80031ec:	f440 2030 	orr.w	r0, r0, #720896	; 0xb0000
 80031f0:	9003      	str	r0, [sp, #12]
		if (region_allocate_and_init((*reg_index),
 80031f2:	a901      	add	r1, sp, #4
 80031f4:	7820      	ldrb	r0, [r4, #0]
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_RAM_ATTR);
 80031f6:	e9cd 2301 	strd	r2, r3, [sp, #4]
		if (region_allocate_and_init((*reg_index),
 80031fa:	f7ff feed 	bl	8002fd8 <region_allocate_and_init>
 80031fe:	2800      	cmp	r0, #0
 8003200:	da28      	bge.n	8003254 <z_arm_mpu_init+0x148>
		return -EINVAL;
 8003202:	f06f 0015 	mvn.w	r0, #21
}
 8003206:	b005      	add	sp, #20
 8003208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_RAM_NOCACHE_ATTR);
 800320c:	f850 300c 	ldr.w	r3, [r0, ip]
 8003210:	6888      	ldr	r0, [r1, #8]
 8003212:	f004 fa74 	bl	80076fe <size_to_mpu_rasr_size>
 8003216:	684a      	ldr	r2, [r1, #4]
 8003218:	ea40 0008 	orr.w	r0, r0, r8
			break;
 800321c:	e7e8      	b.n	80031f0 <z_arm_mpu_init+0xe4>
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_FLASH_ATTR);
 800321e:	f850 300c 	ldr.w	r3, [r0, ip]
 8003222:	6888      	ldr	r0, [r1, #8]
 8003224:	f004 fa6b 	bl	80076fe <size_to_mpu_rasr_size>
 8003228:	684a      	ldr	r2, [r1, #4]
 800322a:	ea40 0009 	orr.w	r0, r0, r9
			break;
 800322e:	e7df      	b.n	80031f0 <z_arm_mpu_init+0xe4>
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_PPB_ATTR);
 8003230:	f850 300c 	ldr.w	r3, [r0, ip]
 8003234:	6888      	ldr	r0, [r1, #8]
 8003236:	f004 fa62 	bl	80076fe <size_to_mpu_rasr_size>
 800323a:	684a      	ldr	r2, [r1, #4]
 800323c:	f040 7082 	orr.w	r0, r0, #17039360	; 0x1040000
			break;
 8003240:	e7d6      	b.n	80031f0 <z_arm_mpu_init+0xe4>
			region_conf = _BUILD_REGION_CONF(region[idx], REGION_IO_ATTR);
 8003242:	f850 300c 	ldr.w	r3, [r0, ip]
 8003246:	6888      	ldr	r0, [r1, #8]
 8003248:	f004 fa59 	bl	80076fe <size_to_mpu_rasr_size>
 800324c:	684a      	ldr	r2, [r1, #4]
 800324e:	f040 7088 	orr.w	r0, r0, #17825792	; 0x1100000
			break;
 8003252:	e7cd      	b.n	80031f0 <z_arm_mpu_init+0xe4>
		(*reg_index)++;
 8003254:	7823      	ldrb	r3, [r4, #0]
 8003256:	3301      	adds	r3, #1
 8003258:	7023      	strb	r3, [r4, #0]
 800325a:	e7ae      	b.n	80031ba <z_arm_mpu_init+0xae>
  MPU->RNR = rnr;
 800325c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
	for (int i = static_regions_num; i < get_num_regions(); i++) {
 8003260:	3301      	adds	r3, #1
  MPU->RASR = 0U;
 8003262:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
 8003266:	e777      	b.n	8003158 <z_arm_mpu_init+0x4c>
		return -1;
 8003268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800326c:	e7cb      	b.n	8003206 <z_arm_mpu_init+0xfa>
 800326e:	bf00      	nop
 8003270:	e000ed00 	.word	0xe000ed00
 8003274:	08009214 	.word	0x08009214
 8003278:	24001038 	.word	0x24001038
 800327c:	fff00000 	.word	0xfff00000
 8003280:	11080000 	.word	0x11080000
 8003284:	07020000 	.word	0x07020000

08003288 <cbvprintf>:
	(*s->out) (c, s->ctx);
	return 0;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328a:	b087      	sub	sp, #28
 800328c:	4607      	mov	r7, r0
 800328e:	460e      	mov	r6, r1
 8003290:	4614      	mov	r4, r2
	struct cb_bits	s = {
 8003292:	2100      	movs	r1, #0
 8003294:	2210      	movs	r2, #16
 8003296:	4668      	mov	r0, sp
{
 8003298:	461d      	mov	r5, r3
	struct cb_bits	s = {
 800329a:	f004 ff12 	bl	80080c2 <memset>
 800329e:	2302      	movs	r3, #2
		.f = FDEV_SETUP_STREAM(cbputc, NULL, NULL, _FDEV_SETUP_WRITE),
		.out = out,
		.ctx = ctx,
	};
	return vfprintf(&s.f, fp, ap);
 80032a0:	462a      	mov	r2, r5
 80032a2:	4621      	mov	r1, r4
	struct cb_bits	s = {
 80032a4:	f88d 3002 	strb.w	r3, [sp, #2]
	return vfprintf(&s.f, fp, ap);
 80032a8:	4668      	mov	r0, sp
	struct cb_bits	s = {
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <cbvprintf+0x34>)
 80032ac:	e9cd 7604 	strd	r7, r6, [sp, #16]
 80032b0:	9301      	str	r3, [sp, #4]
	return vfprintf(&s.f, fp, ap);
 80032b2:	f002 fc0f 	bl	8005ad4 <__d_vfprintf>
}
 80032b6:	b007      	add	sp, #28
 80032b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	0800771f 	.word	0x0800771f

080032c0 <malloc_prepare>:
			break;
		}
		heap_size >>= 1;
	}
#else
	heap_base = UINT_TO_POINTER(HEAP_BASE);
 80032c0:	4906      	ldr	r1, [pc, #24]	; (80032dc <malloc_prepare+0x1c>)
	z_malloc_partition.start = POINTER_TO_UINT(heap_base);
	z_malloc_partition.size = heap_size;
	z_malloc_partition.attr = K_MEM_PARTITION_P_RW_U_RW;
#endif

	sys_heap_init(&z_malloc_heap, heap_base, heap_size);
 80032c2:	4807      	ldr	r0, [pc, #28]	; (80032e0 <malloc_prepare+0x20>)
	heap_base = UINT_TO_POINTER(HEAP_BASE);
 80032c4:	f021 0107 	bic.w	r1, r1, #7
	sys_heap_init(&z_malloc_heap, heap_base, heap_size);
 80032c8:	f1c1 5210 	rsb	r2, r1, #603979776	; 0x24000000
{
 80032cc:	b508      	push	{r3, lr}
	sys_heap_init(&z_malloc_heap, heap_base, heap_size);
 80032ce:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
 80032d2:	f003 fd99 	bl	8006e08 <sys_heap_init>

	return 0;
}
 80032d6:	2000      	movs	r0, #0
 80032d8:	bd08      	pop	{r3, pc}
 80032da:	bf00      	nop
 80032dc:	24002307 	.word	0x24002307
 80032e0:	24000e7c 	.word	0x24000e7c

080032e4 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 80032e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e8:	4605      	mov	r5, r0
 80032ea:	2400      	movs	r4, #0
	return BIT(linenum);
 80032ec:	f04f 0801 	mov.w	r8, #1
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1U : 0U);
 80032f0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
		if (stm32_exti_is_pending(line) != 0) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line_num].cb) {
 80032f4:	4f0e      	ldr	r7, [pc, #56]	; (8003330 <stm32_exti_isr+0x4c>)
		line_num = range->start + i;
 80032f6:	782a      	ldrb	r2, [r5, #0]
		line = linenum_to_ll_exti_line(line_num);
 80032f8:	1913      	adds	r3, r2, r4
	return BIT(linenum);
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	fa08 f003 	lsl.w	r0, r8, r3
 8003300:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8003304:	ea30 0303 	bics.w	r3, r0, r3
 8003308:	d10a      	bne.n	8003320 <stm32_exti_isr+0x3c>
		line_num = range->start + i;
 800330a:	fa52 f384 	uxtab	r3, r2, r4
  *         @arg @ref LL_EXTI_LINE_21
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800330e:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
			if (!data->cb[line_num].cb) {
 8003312:	f857 2033 	ldr.w	r2, [r7, r3, lsl #3]
 8003316:	b11a      	cbz	r2, 8003320 <stm32_exti_isr+0x3c>
				continue;
			}

			/* `line` can be passed as-is because LL_EXTI_LINE_n is (1 << n) */
			data->cb[line_num].cb(line, data->cb[line_num].data);
 8003318:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	4790      	blx	r2
	for (uint8_t i = 0; i <= range->len; i++) {
 8003320:	3401      	adds	r4, #1
 8003322:	786a      	ldrb	r2, [r5, #1]
 8003324:	b2e3      	uxtb	r3, r4
 8003326:	429a      	cmp	r2, r3
 8003328:	d2e5      	bcs.n	80032f6 <stm32_exti_isr+0x12>
		}
	}
}
 800332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800332e:	bf00      	nop
 8003330:	24000e88 	.word	0x24000e88

08003334 <stm32_fill_irq_table>:
	return ret;
}

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <stm32_fill_irq_table+0x14>)
 8003336:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800333a:	2300      	movs	r3, #0
 800333c:	3301      	adds	r3, #1
		exti_irq_table[start + i] = irqn;
 800333e:	f820 2b02 	strh.w	r2, [r0], #2
	for (int i = 0; i < len; i++) {
 8003342:	4299      	cmp	r1, r3
 8003344:	dcfa      	bgt.n	800333c <stm32_fill_irq_table+0x8>
	}
}
 8003346:	4770      	bx	lr
 8003348:	24000594 	.word	0x24000594

0800334c <stm32_exti_init>:

/**
 * @brief Initializes the EXTI GPIO interrupt controller driver
 */
static int stm32_exti_init(const struct device *dev)
{
 800334c:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(dev);

	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 800334e:	2206      	movs	r2, #6
 8003350:	2101      	movs	r1, #1
 8003352:	2000      	movs	r0, #0
 8003354:	f7ff ffee 	bl	8003334 <stm32_fill_irq_table>
 8003358:	2200      	movs	r2, #0
 800335a:	2006      	movs	r0, #6
 800335c:	4611      	mov	r1, r2
 800335e:	f7ff fd07 	bl	8002d70 <z_arm_irq_priority_set>
 8003362:	2101      	movs	r1, #1
 8003364:	2207      	movs	r2, #7
 8003366:	4608      	mov	r0, r1
 8003368:	f7ff ffe4 	bl	8003334 <stm32_fill_irq_table>
 800336c:	2200      	movs	r2, #0
 800336e:	2007      	movs	r0, #7
 8003370:	4611      	mov	r1, r2
 8003372:	f7ff fcfd 	bl	8002d70 <z_arm_irq_priority_set>
 8003376:	2208      	movs	r2, #8
 8003378:	2101      	movs	r1, #1
 800337a:	2002      	movs	r0, #2
 800337c:	f7ff ffda 	bl	8003334 <stm32_fill_irq_table>
 8003380:	2200      	movs	r2, #0
 8003382:	2008      	movs	r0, #8
 8003384:	4611      	mov	r1, r2
 8003386:	f7ff fcf3 	bl	8002d70 <z_arm_irq_priority_set>
 800338a:	2209      	movs	r2, #9
 800338c:	2101      	movs	r1, #1
 800338e:	2003      	movs	r0, #3
 8003390:	f7ff ffd0 	bl	8003334 <stm32_fill_irq_table>
 8003394:	2200      	movs	r2, #0
 8003396:	2009      	movs	r0, #9
 8003398:	4611      	mov	r1, r2
 800339a:	f7ff fce9 	bl	8002d70 <z_arm_irq_priority_set>
 800339e:	220a      	movs	r2, #10
 80033a0:	2101      	movs	r1, #1
 80033a2:	2004      	movs	r0, #4
 80033a4:	f7ff ffc6 	bl	8003334 <stm32_fill_irq_table>
 80033a8:	2200      	movs	r2, #0
 80033aa:	200a      	movs	r0, #10
 80033ac:	4611      	mov	r1, r2
 80033ae:	f7ff fcdf 	bl	8002d70 <z_arm_irq_priority_set>
 80033b2:	2105      	movs	r1, #5
 80033b4:	2217      	movs	r2, #23
 80033b6:	4608      	mov	r0, r1
 80033b8:	f7ff ffbc 	bl	8003334 <stm32_fill_irq_table>
 80033bc:	2200      	movs	r2, #0
 80033be:	2017      	movs	r0, #23
 80033c0:	4611      	mov	r1, r2
 80033c2:	f7ff fcd5 	bl	8002d70 <z_arm_irq_priority_set>
 80033c6:	2228      	movs	r2, #40	; 0x28
 80033c8:	2106      	movs	r1, #6
 80033ca:	200a      	movs	r0, #10
 80033cc:	f7ff ffb2 	bl	8003334 <stm32_fill_irq_table>
 80033d0:	2200      	movs	r2, #0
 80033d2:	2028      	movs	r0, #40	; 0x28
 80033d4:	4611      	mov	r1, r2
 80033d6:	f7ff fccb 	bl	8002d70 <z_arm_irq_priority_set>
	struct stm32_pclken pclken = {
 80033da:	22f4      	movs	r2, #244	; 0xf4
 80033dc:	2302      	movs	r3, #2
 80033de:	4805      	ldr	r0, [pc, #20]	; (80033f4 <stm32_exti_init+0xa8>)
 80033e0:	4669      	mov	r1, sp
 80033e2:	e9cd 2300 	strd	r2, r3, [sp]
 80033e6:	6883      	ldr	r3, [r0, #8]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4798      	blx	r3
			     interrupt_names,
			     STM32_EXTI_INIT_LINE_RANGE);

	return stm32_exti_enable_registers();
}
 80033ec:	b003      	add	sp, #12
 80033ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80033f2:	bf00      	nop
 80033f4:	0800855c 	.word	0x0800855c

080033f8 <stm32_gpio_intc_enable_line>:
	return LOG2(line);
 80033f8:	4603      	mov	r3, r0
 80033fa:	b180      	cbz	r0, 800341e <stm32_gpio_intc_enable_line+0x26>
 80033fc:	fab0 f280 	clz	r2, r0
 8003400:	f1c2 021f 	rsb	r2, r2, #31
 8003404:	b2d2      	uxtb	r2, r2
	uint32_t line_num = ll_exti_line_to_linenum(line);

	__ASSERT_NO_MSG(line_num < NUM_EXTI_LINES);

	/* Get matching exti irq provided line thanks to irq_table */
	irqnum = exti_irq_table[line_num];
 8003406:	4907      	ldr	r1, [pc, #28]	; (8003424 <stm32_gpio_intc_enable_line+0x2c>)
 8003408:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800340c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003410:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8003414:	430b      	orrs	r3, r1
 8003416:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#else
	LL_EXTI_EnableIT_0_31(line);
#endif

	/* Enable exti irq interrupt */
	irq_enable(irqnum);
 800341a:	f7ff bc9b 	b.w	8002d54 <arch_irq_enable>
	return LOG2(line);
 800341e:	22ff      	movs	r2, #255	; 0xff
 8003420:	e7f1      	b.n	8003406 <stm32_gpio_intc_enable_line+0xe>
 8003422:	bf00      	nop
 8003424:	24000594 	.word	0x24000594

08003428 <stm32_gpio_intc_set_irq_callback>:
	}
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}

int stm32_gpio_intc_set_irq_callback(stm32_gpio_irq_line_t line, stm32_gpio_irq_cb_t cb, void *user)
{
 8003428:	b530      	push	{r4, r5, lr}
	return LOG2(line);
 800342a:	b1b0      	cbz	r0, 800345a <stm32_gpio_intc_set_irq_callback+0x32>
 800342c:	fab0 f380 	clz	r3, r0
 8003430:	f1c3 031f 	rsb	r3, r3, #31
 8003434:	b2db      	uxtb	r3, r3
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;
	uint32_t line_num = ll_exti_line_to_linenum(line);

	if ((data->cb[line_num].cb == cb) && (data->cb[line_num].data == user)) {
 8003436:	480b      	ldr	r0, [pc, #44]	; (8003464 <stm32_gpio_intc_set_irq_callback+0x3c>)
 8003438:	f850 4033 	ldr.w	r4, [r0, r3, lsl #3]
 800343c:	428c      	cmp	r4, r1
 800343e:	d104      	bne.n	800344a <stm32_gpio_intc_set_irq_callback+0x22>
 8003440:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 8003444:	686d      	ldr	r5, [r5, #4]
 8003446:	4295      	cmp	r5, r2
 8003448:	d005      	beq.n	8003456 <stm32_gpio_intc_set_irq_callback+0x2e>
		return 0;
	}

	/* if callback already exists/maybe-running return busy */
	if (data->cb[line_num].cb != NULL) {
 800344a:	b944      	cbnz	r4, 800345e <stm32_gpio_intc_set_irq_callback+0x36>
		return -EBUSY;
	}

	data->cb[line_num].cb = cb;
 800344c:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
	data->cb[line_num].data = user;
 8003450:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8003454:	6042      	str	r2, [r0, #4]
		return 0;
 8003456:	2000      	movs	r0, #0

	return 0;
}
 8003458:	bd30      	pop	{r4, r5, pc}
	return LOG2(line);
 800345a:	23ff      	movs	r3, #255	; 0xff
 800345c:	e7eb      	b.n	8003436 <stm32_gpio_intc_set_irq_callback+0xe>
		return -EBUSY;
 800345e:	f06f 000f 	mvn.w	r0, #15
 8003462:	e7f9      	b.n	8003458 <stm32_gpio_intc_set_irq_callback+0x30>
 8003464:	24000e88 	.word	0x24000e88

08003468 <stm32_gpio_intc_remove_irq_callback>:
	return LOG2(line);
 8003468:	b160      	cbz	r0, 8003484 <stm32_gpio_intc_remove_irq_callback+0x1c>
 800346a:	fab0 f380 	clz	r3, r0
 800346e:	f1c3 031f 	rsb	r3, r3, #31
 8003472:	b2db      	uxtb	r3, r3
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;
	uint32_t line_num = ll_exti_line_to_linenum(line);

	data->cb[line_num].cb = NULL;
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <stm32_gpio_intc_remove_irq_callback+0x20>)
 8003476:	2100      	movs	r1, #0
 8003478:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	data->cb[line_num].data = NULL;
 800347c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003480:	6051      	str	r1, [r2, #4]
}
 8003482:	4770      	bx	lr
	return LOG2(line);
 8003484:	23ff      	movs	r3, #255	; 0xff
 8003486:	e7f5      	b.n	8003474 <stm32_gpio_intc_remove_irq_callback+0xc>
 8003488:	24000e88 	.word	0x24000e88

0800348c <stm32_exti_get_line_src_port>:
	return (0xF << ((linenum % 4 * 4) + 16)) | (linenum / 4);
 800348c:	f000 0203 	and.w	r2, r0, #3
 8003490:	230f      	movs	r3, #15
 8003492:	3204      	adds	r2, #4
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	4093      	lsls	r3, r2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 31U));
 8003498:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <stm32_exti_get_line_src_port+0x34>)
 800349a:	ea43 0090 	orr.w	r0, r3, r0, lsr #2
 800349e:	f000 0303 	and.w	r3, r0, #3
 80034a2:	3302      	adds	r3, #2
 80034a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034a8:	0c03      	lsrs	r3, r0, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	ea02 4010 	and.w	r0, r2, r0, lsr #16
 80034b6:	f003 031f 	and.w	r3, r3, #31
		port = STM32_PORTH;
	}
#endif

	return port;
}
 80034ba:	40d8      	lsrs	r0, r3
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	58000400 	.word	0x58000400

080034c4 <get_pllsrc_frequency>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <get_pllsrc_frequency+0x14>)
		return STM32_HSE_FREQ;
	case LL_RCC_PLLSOURCE_NONE:
	default:
		return 0;
	}
}
 80034c6:	4805      	ldr	r0, [pc, #20]	; (80034dc <get_pllsrc_frequency+0x18>)
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	f003 0303 	and.w	r3, r3, #3
		return STM32_HSI_FREQ;
 80034ce:	2b02      	cmp	r3, #2
}
 80034d0:	bf18      	it	ne
 80034d2:	2000      	movne	r0, #0
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	58024400 	.word	0x58024400
 80034dc:	00b71b00 	.word	0x00b71b00

080034e0 <get_hclk_frequency>:

__unused
static uint32_t get_hclk_frequency(void)
{
 80034e0:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <get_hclk_frequency+0x30>)
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
	uint32_t sysclk = 0;

	/* Get the current system clock source */
	switch (LL_RCC_GetSysClkSource()) {
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d00b      	beq.n	8003506 <get_hclk_frequency+0x26>
 80034ee:	2b18      	cmp	r3, #24
 80034f0:	d10b      	bne.n	800350a <get_hclk_frequency+0x2a>
	case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
		sysclk = STM32_HSE_FREQ;
		break;
#if defined(STM32_PLL_ENABLED)
	case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
		sysclk = get_pllout_frequency(get_pllsrc_frequency(),
 80034f2:	f7ff ffe7 	bl	80034c4 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 80034f6:	2306      	movs	r3, #6
 80034f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80034fc:	f240 1313 	movw	r3, #275	; 0x113
 8003500:	4358      	muls	r0, r3
		break;
#endif /* STM32_PLL_ENABLED */
	}

	return get_bus_clock(sysclk, STM32_HPRE);
}
 8003502:	0840      	lsrs	r0, r0, #1
 8003504:	bd08      	pop	{r3, pc}
	switch (LL_RCC_GetSysClkSource()) {
 8003506:	4803      	ldr	r0, [pc, #12]	; (8003514 <get_hclk_frequency+0x34>)
 8003508:	e7fb      	b.n	8003502 <get_hclk_frequency+0x22>
	uint32_t sysclk = 0;
 800350a:	2000      	movs	r0, #0
 800350c:	e7f9      	b.n	8003502 <get_hclk_frequency+0x22>
 800350e:	bf00      	nop
 8003510:	58024400 	.word	0x58024400
 8003514:	00b71b00 	.word	0x00b71b00

08003518 <stm32_clock_control_get_subsys_rate>:
	 * more likely to contain actual clock speed
	 */
#if defined(CONFIG_CPU_CORTEX_M4)
	uint32_t ahb_clock = SystemCoreClock;
#else
	uint32_t ahb_clock = get_bus_clock(SystemCoreClock, STM32_HPRE);
 8003518:	4b3c      	ldr	r3, [pc, #240]	; (800360c <stm32_clock_control_get_subsys_rate+0xf4>)
{
 800351a:	b510      	push	{r4, lr}
	uint32_t ahb_clock = get_bus_clock(SystemCoreClock, STM32_HPRE);
 800351c:	6818      	ldr	r0, [r3, #0]
	uint32_t apb4_clock = get_bus_clock(ahb_clock, STM32_D3PPRE);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800351e:	880b      	ldrh	r3, [r1, #0]
 8003520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003524:	2b0d      	cmp	r3, #13
 8003526:	d82b      	bhi.n	8003580 <stm32_clock_control_get_subsys_rate+0x68>
 8003528:	b913      	cbnz	r3, 8003530 <stm32_clock_control_get_subsys_rate+0x18>
 800352a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800352e:	e026      	b.n	800357e <stm32_clock_control_get_subsys_rate+0x66>
 8003530:	3b01      	subs	r3, #1
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d8f9      	bhi.n	800352a <stm32_clock_control_get_subsys_rate+0x12>
 8003536:	a001      	add	r0, pc, #4	; (adr r0, 800353c <stm32_clock_control_get_subsys_rate+0x24>)
 8003538:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800353c:	080035a9 	.word	0x080035a9
 8003540:	08003571 	.word	0x08003571
 8003544:	080035af 	.word	0x080035af
 8003548:	080035f9 	.word	0x080035f9
 800354c:	080035b5 	.word	0x080035b5
 8003550:	0800352b 	.word	0x0800352b
 8003554:	0800352b 	.word	0x0800352b
 8003558:	080035b9 	.word	0x080035b9
 800355c:	080035cb 	.word	0x080035cb
 8003560:	080035df 	.word	0x080035df
 8003564:	080035f1 	.word	0x080035f1
 8003568:	080035f1 	.word	0x080035f1
 800356c:	080035f1 	.word	0x080035f1
 8003570:	2000      	movs	r0, #0
	case STM32_CLOCK_BUS_AHB1:
	case STM32_CLOCK_BUS_AHB2:
	case STM32_CLOCK_BUS_AHB3:
	case STM32_CLOCK_BUS_AHB4:
		*rate = ahb_clock;
 8003572:	6010      	str	r0, [r2, #0]
#endif /* STM32_PLL3_ENABLED */
	default:
		return -ENOTSUP;
	}

	if (pclken->div) {
 8003574:	680b      	ldr	r3, [r1, #0]
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	d23f      	bcs.n	80035fc <stm32_clock_control_get_subsys_rate+0xe4>
		*rate /= (pclken->div + 1);
	}

	return 0;
 800357c:	2000      	movs	r0, #0
}
 800357e:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 8003580:	2bd4      	cmp	r3, #212	; 0xd4
 8003582:	d00f      	beq.n	80035a4 <stm32_clock_control_get_subsys_rate+0x8c>
 8003584:	f603 7328 	addw	r3, r3, #3880	; 0xf28
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	2b1c      	cmp	r3, #28
 800358e:	d8cc      	bhi.n	800352a <stm32_clock_control_get_subsys_rate+0x12>
 8003590:	2401      	movs	r4, #1
 8003592:	fa04 f303 	lsl.w	r3, r4, r3
 8003596:	4c1e      	ldr	r4, [pc, #120]	; (8003610 <stm32_clock_control_get_subsys_rate+0xf8>)
 8003598:	4223      	tst	r3, r4
 800359a:	d11e      	bne.n	80035da <stm32_clock_control_get_subsys_rate+0xc2>
 800359c:	f240 1411 	movw	r4, #273	; 0x111
 80035a0:	4223      	tst	r3, r4
 80035a2:	d0c2      	beq.n	800352a <stm32_clock_control_get_subsys_rate+0x12>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 80035a4:	0840      	lsrs	r0, r0, #1
		break;
 80035a6:	e7e4      	b.n	8003572 <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_hclk_frequency();
 80035a8:	f7ff ff9a 	bl	80034e0 <get_hclk_frequency>
		break;
 80035ac:	e7e1      	b.n	8003572 <stm32_clock_control_get_subsys_rate+0x5a>
		break;
 80035ae:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80035b2:	e7de      	b.n	8003572 <stm32_clock_control_get_subsys_rate+0x5a>
		break;
 80035b4:	4817      	ldr	r0, [pc, #92]	; (8003614 <stm32_clock_control_get_subsys_rate+0xfc>)
 80035b6:	e7dc      	b.n	8003572 <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 80035b8:	f7ff ff84 	bl	80034c4 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 80035bc:	2306      	movs	r3, #6
 80035be:	fbb0 f0f3 	udiv	r0, r0, r3
 80035c2:	f240 1313 	movw	r3, #275	; 0x113
 80035c6:	4358      	muls	r0, r3
		break;
 80035c8:	e7d3      	b.n	8003572 <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 80035ca:	f7ff ff7b 	bl	80034c4 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 80035ce:	2306      	movs	r3, #6
 80035d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80035d4:	f240 1313 	movw	r3, #275	; 0x113
 80035d8:	4358      	muls	r0, r3
 80035da:	0880      	lsrs	r0, r0, #2
		break;
 80035dc:	e7c9      	b.n	8003572 <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 80035de:	f7ff ff71 	bl	80034c4 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 80035e2:	2306      	movs	r3, #6
 80035e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80035e8:	f240 1313 	movw	r3, #275	; 0x113
 80035ec:	4358      	muls	r0, r3
 80035ee:	e7d9      	b.n	80035a4 <stm32_clock_control_get_subsys_rate+0x8c>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 80035f0:	f7ff ff68 	bl	80034c4 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 80035f4:	230a      	movs	r3, #10
 80035f6:	e7e6      	b.n	80035c6 <stm32_clock_control_get_subsys_rate+0xae>
	switch (pclken->bus) {
 80035f8:	4807      	ldr	r0, [pc, #28]	; (8003618 <stm32_clock_control_get_subsys_rate+0x100>)
 80035fa:	e7ba      	b.n	8003572 <stm32_clock_control_get_subsys_rate+0x5a>
		*rate /= (pclken->div + 1);
 80035fc:	f3c3 3313 	ubfx	r3, r3, #12, #20
 8003600:	3301      	adds	r3, #1
 8003602:	fbb0 f0f3 	udiv	r0, r0, r3
 8003606:	6010      	str	r0, [r2, #0]
 8003608:	e7b8      	b.n	800357c <stm32_clock_control_get_subsys_rate+0x64>
 800360a:	bf00      	nop
 800360c:	24000588 	.word	0x24000588
 8003610:	11111000 	.word	0x11111000
 8003614:	02dc6c00 	.word	0x02dc6c00
 8003618:	00b71b00 	.word	0x00b71b00

0800361c <stm32_clock_control_init>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 800361c:	4b96      	ldr	r3, [pc, #600]	; (8003878 <stm32_clock_control_init+0x25c>)
	}
}
#endif /* CONFIG_SOC_SERIES_STM32H7RSX */

int stm32_clock_control_init(const struct device *dev)
{
 800361e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003624:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003628:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 800362c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003630:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003634:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8003636:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800363e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003646:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	0394      	lsls	r4, r2, #14
 800364c:	d5fc      	bpl.n	8003648 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800364e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	675a      	str	r2, [r3, #116]	; 0x74
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003656:	4b88      	ldr	r3, [pc, #544]	; (8003878 <stm32_clock_control_init+0x25c>)
 8003658:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800365a:	0790      	lsls	r0, r2, #30
 800365c:	d5fc      	bpl.n	8003658 <stm32_clock_control_init+0x3c>
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003664:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == (RCC_CR_HSI48RDY)) ? 1UL : 0UL);
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	0491      	lsls	r1, r2, #18
 800366a:	d5fc      	bpl.n	8003666 <stm32_clock_control_init+0x4a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	f002 0238 	and.w	r2, r2, #56	; 0x38
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 8003672:	2a18      	cmp	r2, #24
 8003674:	d117      	bne.n	80036a6 <stm32_clock_control_init+0x8a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	0752      	lsls	r2, r2, #29
 800367a:	d407      	bmi.n	800368c <stm32_clock_control_init+0x70>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003684:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <stm32_clock_control_init+0x25c>)
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	075d      	lsls	r5, r3, #29
 800368a:	d5fc      	bpl.n	8003686 <stm32_clock_control_init+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800368c:	4b7a      	ldr	r3, [pc, #488]	; (8003878 <stm32_clock_control_init+0x25c>)
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	f022 0207 	bic.w	r2, r2, #7
 8003694:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003696:	691a      	ldr	r2, [r3, #16]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8003698:	f012 0f38 	tst.w	r2, #56	; 0x38
 800369c:	d1fb      	bne.n	8003696 <stm32_clock_control_init+0x7a>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	f022 020f 	bic.w	r2, r2, #15
 80036a4:	619a      	str	r2, [r3, #24]
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 80036a6:	4b74      	ldr	r3, [pc, #464]	; (8003878 <stm32_clock_control_init+0x25c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80036ae:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           PLL2ON         LL_RCC_PLL2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80036b6:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           PLL3ON         LL_RCC_PLL3_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL3_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80036be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 80036c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c2:	f022 0203 	bic.w	r2, r2, #3
 80036c6:	f042 0202 	orr.w	r2, r2, #2
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 80036cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ce:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 80036d2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 80036d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036da:	f022 020c 	bic.w	r2, r2, #12
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	f042 0202 	orr.w	r2, r2, #2
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 80036e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	f442 7289 	orr.w	r2, r2, #274	; 0x112
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 8003700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003702:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 8003710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003712:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003716:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 800371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 8003724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003726:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800372a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 8003730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003732:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800373e:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	0194      	lsls	r4, r2, #6
 8003744:	d5fc      	bpl.n	8003740 <stm32_clock_control_init+0x124>
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2, M << RCC_PLLCKSELR_DIVM2_Pos);
 8003746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003748:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800374c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003750:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2RGE, InputRange << RCC_PLLCFGR_PLL2RGE_Pos);
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2VCOSEL, VCORange << RCC_PLLCFGR_PLL2VCOSEL_Pos);
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	f022 0220 	bic.w	r2, r2, #32
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_N2, (N - 1UL) << RCC_PLL2DIVR_N2_Pos);
 8003762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003764:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	f042 0209 	orr.w	r2, r2, #9
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN);
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	f022 0210 	bic.w	r2, r2, #16
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_P2, (P - 1UL) << RCC_PLL2DIVR_P2_Pos);
 800377a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377c:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN);
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2, (Q - 1UL) << RCC_PLL2DIVR_Q2_Pos);
 800378a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003790:	639a      	str	r2, [r3, #56]	; 0x38
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN);
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_R2, (R - 1UL) << RCC_PLL2DIVR_R2_Pos);
 800379a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN);
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLL2ON);
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037b0:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 80037b2:	4a31      	ldr	r2, [pc, #196]	; (8003878 <stm32_clock_control_init+0x25c>)
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	0118      	lsls	r0, r3, #4
 80037b8:	d5fc      	bpl.n	80037b4 <stm32_clock_control_init+0x198>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80037ba:	4b30      	ldr	r3, [pc, #192]	; (800387c <stm32_clock_control_init+0x260>)
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	f022 0207 	bic.w	r2, r2, #7
 80037c2:	f042 0202 	orr.w	r2, r2, #2
 80037c6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80037ce:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	0491      	lsls	r1, r2, #18
 80037d4:	d5fc      	bpl.n	80037d0 <stm32_clock_control_init+0x1b4>

	/* Set flash latency */

	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq increases, set flash latency before any clock setting */
	if (new_hclk_freq > old_hclk_freq) {
 80037d6:	4d2a      	ldr	r5, [pc, #168]	; (8003880 <stm32_clock_control_init+0x264>)
	old_hclk_freq = get_hclk_frequency();
 80037d8:	f7ff fe82 	bl	80034e0 <get_hclk_frequency>
 80037dc:	4604      	mov	r4, r0
	if (new_hclk_freq > old_hclk_freq) {
 80037de:	42a8      	cmp	r0, r5
 80037e0:	d802      	bhi.n	80037e8 <stm32_clock_control_init+0x1cc>
		LL_SetFlashLatency(new_hclk_freq);
 80037e2:	4828      	ldr	r0, [pc, #160]	; (8003884 <stm32_clock_control_init+0x268>)
 80037e4:	f000 ff9c 	bl	8004720 <LL_SetFlashLatency>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 80037e8:	4b23      	ldr	r3, [pc, #140]	; (8003878 <stm32_clock_control_init+0x25c>)
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80037f0:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	f022 020f 	bic.w	r2, r2, #15
 80037f8:	f042 0208 	orr.w	r2, r2, #8
 80037fc:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003808:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003814:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800381c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003820:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800382c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	f022 0207 	bic.w	r2, r2, #7
 8003834:	f042 0203 	orr.w	r2, r2, #3
 8003838:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	f002 0238 	and.w	r2, r2, #56	; 0x38
#endif
	/* Set up sys clock */
	if (IS_ENABLED(STM32_SYSCLK_SRC_PLL)) {
		/* Set PLL1 as System Clock Source */
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
		while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 8003840:	2a18      	cmp	r2, #24
 8003842:	d1fa      	bne.n	800383a <stm32_clock_control_init+0x21e>
	}

	/* Set FLASH latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq not increased, set flash latency after all clock setting */
	if (new_hclk_freq <= old_hclk_freq) {
 8003844:	42ac      	cmp	r4, r5
 8003846:	d902      	bls.n	800384e <stm32_clock_control_init+0x232>
		LL_SetFlashLatency(new_hclk_freq);
 8003848:	480e      	ldr	r0, [pc, #56]	; (8003884 <stm32_clock_control_init+0x268>)
 800384a:	f000 ff69 	bl	8004720 <LL_SetFlashLatency>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <stm32_clock_control_init+0x260>)
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	f022 0207 	bic.w	r2, r2, #7
 8003856:	f042 0202 	orr.w	r2, r2, #2
 800385a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003862:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	0492      	lsls	r2, r2, #18
 8003868:	d5fc      	bpl.n	8003864 <stm32_clock_control_init+0x248>
#endif /* CONFIG_CPU_CORTEX_M7 */

	ARG_UNUSED(dev);

	/* Update CMSIS variable */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800386a:	4b07      	ldr	r3, [pc, #28]	; (8003888 <stm32_clock_control_init+0x26c>)

	return r;
}
 800386c:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <stm32_clock_control_init+0x270>)
 8003870:	601a      	str	r2, [r3, #0]
}
 8003872:	b003      	add	sp, #12
 8003874:	bd30      	pop	{r4, r5, pc}
 8003876:	bf00      	nop
 8003878:	58024400 	.word	0x58024400
 800387c:	58024800 	.word	0x58024800
 8003880:	10642abf 	.word	0x10642abf
 8003884:	10642ac0 	.word	0x10642ac0
 8003888:	24000588 	.word	0x24000588
 800388c:	20c85580 	.word	0x20c85580

08003890 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8003890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8003894:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8003898:	4617      	mov	r7, r2
	struct gpio_stm32_data *data = dev->data;
 800389a:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
 800389e:	460d      	mov	r5, r1
	const stm32_gpio_irq_line_t irq_line = stm32_gpio_intc_get_pin_irq_line(cfg->port, pin);
 80038a0:	f8d8 0008 	ldr.w	r0, [r8, #8]
{
 80038a4:	461e      	mov	r6, r3
	const stm32_gpio_irq_line_t irq_line = stm32_gpio_intc_get_pin_irq_line(cfg->port, pin);
 80038a6:	f003 ff40 	bl	800772a <stm32_gpio_intc_get_pin_irq_line>
		stm32_gpio_intc_enable_line(irq_line);
		goto exit;
	}
#endif /* CONFIG_GPIO_ENABLE_DISABLE_INTERRUPT */

	if (mode == GPIO_INT_MODE_DISABLED) {
 80038aa:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const stm32_gpio_irq_line_t irq_line = stm32_gpio_intc_get_pin_irq_line(cfg->port, pin);
 80038ae:	4604      	mov	r4, r0
	if (mode == GPIO_INT_MODE_DISABLED) {
 80038b0:	d116      	bne.n	80038e0 <gpio_stm32_pin_interrupt_configure+0x50>
		gpio_stm32_disable_pin_irqs(cfg->port, pin);
 80038b2:	f8d8 4008 	ldr.w	r4, [r8, #8]
	if (port != stm32_exti_get_line_src_port(pin)) {
 80038b6:	4628      	mov	r0, r5
 80038b8:	f7ff fde8 	bl	800348c <stm32_exti_get_line_src_port>
 80038bc:	4284      	cmp	r4, r0
 80038be:	d10c      	bne.n	80038da <gpio_stm32_pin_interrupt_configure+0x4a>
	stm32_gpio_irq_line_t irq_line = stm32_gpio_intc_get_pin_irq_line(port, pin);
 80038c0:	4629      	mov	r1, r5
 80038c2:	f003 ff32 	bl	800772a <stm32_gpio_intc_get_pin_irq_line>
 80038c6:	4604      	mov	r4, r0
	stm32_gpio_intc_disable_line(irq_line);
 80038c8:	f003 ff32 	bl	8007730 <stm32_gpio_intc_disable_line>
	stm32_gpio_intc_remove_irq_callback(irq_line);
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7ff fdcb 	bl	8003468 <stm32_gpio_intc_remove_irq_callback>
	stm32_gpio_intc_select_line_trigger(irq_line, STM32_GPIO_IRQ_TRIG_NONE);
 80038d2:	2100      	movs	r1, #0
 80038d4:	4620      	mov	r0, r4
 80038d6:	f003 ff34 	bl	8007742 <stm32_gpio_intc_select_line_trigger>
	int err = 0;
 80038da:	2000      	movs	r0, #0

	stm32_gpio_intc_enable_line(irq_line);

exit:
	return err;
}
 80038dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 80038e0:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 80038e4:	d020      	beq.n	8003928 <gpio_stm32_pin_interrupt_configure+0x98>
		switch (trig) {
 80038e6:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 80038ea:	d019      	beq.n	8003920 <gpio_stm32_pin_interrupt_configure+0x90>
 80038ec:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 80038f0:	d018      	beq.n	8003924 <gpio_stm32_pin_interrupt_configure+0x94>
 80038f2:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 80038f6:	d11a      	bne.n	800392e <gpio_stm32_pin_interrupt_configure+0x9e>
			irq_trigger = STM32_GPIO_IRQ_TRIG_FALLING;
 80038f8:	2602      	movs	r6, #2
	if (stm32_gpio_intc_set_irq_callback(irq_line, gpio_stm32_isr, data) != 0) {
 80038fa:	464a      	mov	r2, r9
 80038fc:	490f      	ldr	r1, [pc, #60]	; (800393c <gpio_stm32_pin_interrupt_configure+0xac>)
 80038fe:	4620      	mov	r0, r4
 8003900:	f7ff fd92 	bl	8003428 <stm32_gpio_intc_set_irq_callback>
 8003904:	b9b0      	cbnz	r0, 8003934 <gpio_stm32_pin_interrupt_configure+0xa4>
	stm32_exti_set_line_src_port(pin, cfg->port);
 8003906:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800390a:	4628      	mov	r0, r5
 800390c:	f003 ff42 	bl	8007794 <stm32_exti_set_line_src_port>
	stm32_gpio_intc_select_line_trigger(irq_line, irq_trigger);
 8003910:	4620      	mov	r0, r4
 8003912:	4631      	mov	r1, r6
 8003914:	f003 ff15 	bl	8007742 <stm32_gpio_intc_select_line_trigger>
	stm32_gpio_intc_enable_line(irq_line);
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff fd6d 	bl	80033f8 <stm32_gpio_intc_enable_line>
 800391e:	e7dc      	b.n	80038da <gpio_stm32_pin_interrupt_configure+0x4a>
		switch (trig) {
 8003920:	2601      	movs	r6, #1
 8003922:	e7ea      	b.n	80038fa <gpio_stm32_pin_interrupt_configure+0x6a>
			irq_trigger = STM32_GPIO_IRQ_TRIG_BOTH;
 8003924:	2603      	movs	r6, #3
 8003926:	e7e8      	b.n	80038fa <gpio_stm32_pin_interrupt_configure+0x6a>
			err = -ENOTSUP;
 8003928:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800392c:	e7d6      	b.n	80038dc <gpio_stm32_pin_interrupt_configure+0x4c>
		switch (trig) {
 800392e:	f06f 0015 	mvn.w	r0, #21
 8003932:	e7d3      	b.n	80038dc <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8003934:	f06f 000f 	mvn.w	r0, #15
	return err;
 8003938:	e7d0      	b.n	80038dc <gpio_stm32_pin_interrupt_configure+0x4c>
 800393a:	bf00      	nop
 800393c:	08007abb 	.word	0x08007abb

08003940 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8003940:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8003942:	6903      	ldr	r3, [r0, #16]
{
 8003944:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8003946:	6058      	str	r0, [r3, #4]
 8003948:	4d08      	ldr	r5, [pc, #32]	; (800396c <gpio_stm32_init+0x2c>)
 800394a:	4628      	mov	r0, r5
 800394c:	f004 fa47 	bl	8007dde <z_impl_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8003950:	b140      	cbz	r0, 8003964 <gpio_stm32_init+0x24>
					(clock_control_subsys_t)&cfg->pclken);
 8003952:	6861      	ldr	r1, [r4, #4]
 8003954:	4628      	mov	r0, r5
 8003956:	68ab      	ldr	r3, [r5, #8]
 8003958:	310c      	adds	r1, #12
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 800395e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		pm_device_init_suspended(dev);
	}
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8003962:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8003964:	f06f 0012 	mvn.w	r0, #18
 8003968:	e7fb      	b.n	8003962 <gpio_stm32_init+0x22>
 800396a:	bf00      	nop
 800396c:	0800855c 	.word	0x0800855c

08003970 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8003970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003974:	4604      	mov	r4, r0
 8003976:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 800397a:	2500      	movs	r5, #0
	port_device = gpio_ports[STM32_PORT(pin)];
 800397c:	4f1c      	ldr	r7, [pc, #112]	; (80039f0 <pinctrl_configure_pins+0x80>)
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800397e:	42b4      	cmp	r4, r6
 8003980:	d101      	bne.n	8003986 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8003982:	2000      	movs	r0, #0
 8003984:	e014      	b.n	80039b0 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8003986:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8003988:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800398a:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800398e:	d411      	bmi.n	80039b4 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8003990:	6865      	ldr	r5, [r4, #4]
 8003992:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8003996:	f3c0 1a48 	ubfx	sl, r0, #5, #9
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800399a:	f3c0 2044 	ubfx	r0, r0, #9, #5
 800399e:	2810      	cmp	r0, #16
 80039a0:	d823      	bhi.n	80039ea <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 80039a2:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80039a6:	f1b8 0f00 	cmp.w	r8, #0
 80039aa:	d10d      	bne.n	80039c8 <pinctrl_configure_pins+0x58>
		return -ENODEV;
 80039ac:	f06f 0012 	mvn.w	r0, #18
}
 80039b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 80039b4:	f1b9 0f10 	cmp.w	r9, #16
 80039b8:	d004      	beq.n	80039c4 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 80039ba:	f1b9 0f11 	cmp.w	r9, #17
 80039be:	d1ea      	bne.n	8003996 <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 80039c0:	6865      	ldr	r5, [r4, #4]
 80039c2:	e7e8      	b.n	8003996 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 80039c4:	2530      	movs	r5, #48	; 0x30
 80039c6:	e7e6      	b.n	8003996 <pinctrl_configure_pins+0x26>
 80039c8:	4640      	mov	r0, r8
 80039ca:	f004 fa08 	bl	8007dde <z_impl_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d0ec      	beq.n	80039ac <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 80039d2:	464b      	mov	r3, r9
 80039d4:	462a      	mov	r2, r5
 80039d6:	f00a 010f 	and.w	r1, sl, #15
 80039da:	4640      	mov	r0, r8
 80039dc:	f004 f883 	bl	8007ae6 <gpio_stm32_configure>
		if (ret < 0) {
 80039e0:	2800      	cmp	r0, #0
 80039e2:	f104 0408 	add.w	r4, r4, #8
 80039e6:	daca      	bge.n	800397e <pinctrl_configure_pins+0xe>
 80039e8:	e7e2      	b.n	80039b0 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 80039ea:	f06f 0015 	mvn.w	r0, #21
 80039ee:	e7df      	b.n	80039b0 <pinctrl_configure_pins+0x40>
 80039f0:	080093b0 	.word	0x080093b0

080039f4 <uart_stm32_set_baudrate.part.0>:
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 80039f4:	4a02      	ldr	r2, [pc, #8]	; (8003a00 <uart_stm32_set_baudrate.part.0+0xc>)
 80039f6:	2101      	movs	r1, #1
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <uart_stm32_set_baudrate.part.0+0x10>)
 80039fa:	f003 bdd3 	b.w	80075a4 <z_impl_z_log_msg_simple_create_0>
 80039fe:	bf00      	nop
 8003a00:	0800a6ec 	.word	0x0800a6ec
 8003a04:	08008d0c 	.word	0x08008d0c

08003a08 <uart_stm32_parameters_set>:
	return UART_CFG_FLOW_CTRL_NONE;
}

static void uart_stm32_parameters_set(const struct device *dev,
				      const struct uart_config *cfg)
{
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	struct uart_config *uart_cfg = data->uart_cfg;
 8003a0c:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8003a0e:	6841      	ldr	r1, [r0, #4]
	struct uart_config *uart_cfg = data->uart_cfg;
 8003a10:	685d      	ldr	r5, [r3, #4]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8003a12:	7923      	ldrb	r3, [r4, #4]
	switch (parity) {
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d015      	beq.n	8003a44 <uart_stm32_parameters_set+0x3c>
 8003a18:	1e9f      	subs	r7, r3, #2
 8003a1a:	427e      	negs	r6, r7
 8003a1c:	417e      	adcs	r6, r7
 8003a1e:	02b6      	lsls	r6, r6, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(config, cfg->stop_bits);
 8003a20:	7962      	ldrb	r2, [r4, #5]
	switch (sb) {
 8003a22:	2a02      	cmp	r2, #2
 8003a24:	bf96      	itet	ls
 8003a26:	4f44      	ldrls	r7, [pc, #272]	; (8003b38 <uart_stm32_parameters_set+0x130>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(config, cfg->stop_bits);
 8003a28:	f44f 5700 	movhi.w	r7, #8192	; 0x2000
 8003a2c:	f837 7012 	ldrhls.w	r7, [r7, r2, lsl #1]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8003a30:	79a2      	ldrb	r2, [r4, #6]
	switch (db) {
 8003a32:	2a02      	cmp	r2, #2
 8003a34:	d009      	beq.n	8003a4a <uart_stm32_parameters_set+0x42>
 8003a36:	2a04      	cmp	r2, #4
 8003a38:	d02f      	beq.n	8003a9a <uart_stm32_parameters_set+0x92>
		if (p == UART_CFG_PARITY_NONE) {
 8003a3a:	3b00      	subs	r3, #0
 8003a3c:	bf18      	it	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	e006      	b.n	8003a52 <uart_stm32_parameters_set+0x4a>
	switch (parity) {
 8003a44:	f44f 66c0 	mov.w	r6, #1536	; 0x600
 8003a48:	e7ea      	b.n	8003a20 <uart_stm32_parameters_set+0x18>
		if (p == UART_CFG_PARITY_NONE) {
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	071b      	lsls	r3, r3, #28
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8003a52:	79e2      	ldrb	r2, [r4, #7]
	if (cfg == uart_cfg) {
		/* Called via (re-)init function, so the SoC either just booted,
		 * or is returning from a low-power state where it lost register
		 * contents
		 */
		LL_USART_ConfigCharacter(config->usart,
 8003a54:	6809      	ldr	r1, [r1, #0]
		return LL_USART_HWCONTROL_RTS_CTS;
 8003a56:	2a01      	cmp	r2, #1
 8003a58:	bf14      	ite	ne
 8003a5a:	f04f 0c00 	movne.w	ip, #0
 8003a5e:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if (cfg == uart_cfg) {
 8003a62:	42a5      	cmp	r5, r4
 8003a64:	d11c      	bne.n	8003aa0 <uart_stm32_parameters_set+0x98>
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8003a66:	680a      	ldr	r2, [r1, #0]
 8003a68:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003a6c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003a70:	4332      	orrs	r2, r6
 8003a72:	431a      	orrs	r2, r3
 8003a74:	600a      	str	r2, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a76:	684b      	ldr	r3, [r1, #4]
 8003a78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a7c:	433b      	orrs	r3, r7
 8003a7e:	604b      	str	r3, [r1, #4]
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8003a80:	6843      	ldr	r3, [r0, #4]
 8003a82:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003a84:	6893      	ldr	r3, [r2, #8]
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	ea43 030c 	orr.w	r3, r3, ip
 8003a8e:	6093      	str	r3, [r2, #8]
					 databits,
					 parity,
					 stopbits);
		uart_stm32_set_hwctrl(dev, flowctrl);
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8003a90:	6829      	ldr	r1, [r5, #0]
		if (cfg->baudrate != uart_cfg->baudrate) {
			uart_stm32_set_baudrate(dev, cfg->baudrate);
			uart_cfg->baudrate = cfg->baudrate;
		}
	}
}
 8003a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8003a96:	f004 b941 	b.w	8007d1c <uart_stm32_set_baudrate>
	switch (db) {
 8003a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9e:	e7d8      	b.n	8003a52 <uart_stm32_parameters_set+0x4a>
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003aa0:	f8d1 e000 	ldr.w	lr, [r1]
 8003aa4:	f40e 6ec0 	and.w	lr, lr, #1536	; 0x600
		if (parity != uart_stm32_get_parity(dev)) {
 8003aa8:	4576      	cmp	r6, lr
 8003aaa:	d006      	beq.n	8003aba <uart_stm32_parameters_set+0xb2>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8003aac:	f8d1 e000 	ldr.w	lr, [r1]
 8003ab0:	f42e 6ec0 	bic.w	lr, lr, #1536	; 0x600
 8003ab4:	ea4e 0606 	orr.w	r6, lr, r6
 8003ab8:	600e      	str	r6, [r1, #0]
	return LL_USART_GetStopBitsLength(config->usart);
 8003aba:	6841      	ldr	r1, [r0, #4]
 8003abc:	680e      	ldr	r6, [r1, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003abe:	6871      	ldr	r1, [r6, #4]
 8003ac0:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
		if (stopbits != uart_stm32_get_stopbits(dev)) {
 8003ac4:	428f      	cmp	r7, r1
 8003ac6:	d004      	beq.n	8003ad2 <uart_stm32_parameters_set+0xca>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003ac8:	6871      	ldr	r1, [r6, #4]
 8003aca:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003ace:	4339      	orrs	r1, r7
 8003ad0:	6071      	str	r1, [r6, #4]
	return LL_USART_GetDataWidth(config->usart);
 8003ad2:	6841      	ldr	r1, [r0, #4]
 8003ad4:	680e      	ldr	r6, [r1, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003ad6:	6831      	ldr	r1, [r6, #0]
 8003ad8:	f001 2110 	and.w	r1, r1, #268439552	; 0x10001000
		if (databits != uart_stm32_get_databits(dev)) {
 8003adc:	428b      	cmp	r3, r1
 8003ade:	d004      	beq.n	8003aea <uart_stm32_parameters_set+0xe2>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8003ae0:	6831      	ldr	r1, [r6, #0]
 8003ae2:	f021 2110 	bic.w	r1, r1, #268439552	; 0x10001000
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6033      	str	r3, [r6, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8003aea:	6843      	ldr	r3, [r0, #4]
 8003aec:	6819      	ldr	r1, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(const USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003aee:	688b      	ldr	r3, [r1, #8]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8003af4:	459c      	cmp	ip, r3
 8003af6:	d005      	beq.n	8003b04 <uart_stm32_parameters_set+0xfc>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003af8:	688b      	ldr	r3, [r1, #8]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	ea43 030c 	orr.w	r3, r3, ip
 8003b02:	608b      	str	r3, [r1, #8]
	return LL_USART_IsEnabledDEMode(config->usart);
 8003b04:	6843      	ldr	r3, [r0, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
 8003b08:	6899      	ldr	r1, [r3, #8]
 8003b0a:	0449      	lsls	r1, r1, #17
 8003b0c:	d505      	bpl.n	8003b1a <uart_stm32_parameters_set+0x112>
		if (driver_enable != uart_stm32_get_driver_enable(dev)) {
 8003b0e:	2a03      	cmp	r2, #3
 8003b10:	d009      	beq.n	8003b26 <uart_stm32_parameters_set+0x11e>
  CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b18:	e004      	b.n	8003b24 <uart_stm32_parameters_set+0x11c>
 8003b1a:	2a03      	cmp	r2, #3
 8003b1c:	d103      	bne.n	8003b26 <uart_stm32_parameters_set+0x11e>
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
 8003b24:	609a      	str	r2, [r3, #8]
		if (cfg->baudrate != uart_cfg->baudrate) {
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	4299      	cmp	r1, r3
 8003b2c:	d003      	beq.n	8003b36 <uart_stm32_parameters_set+0x12e>
			uart_stm32_set_baudrate(dev, cfg->baudrate);
 8003b2e:	f004 f8f5 	bl	8007d1c <uart_stm32_set_baudrate>
			uart_cfg->baudrate = cfg->baudrate;
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	602b      	str	r3, [r5, #0]
}
 8003b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b38:	08009d1c 	.word	0x08009d1c

08003b3c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8003b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 8003b44:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8003b46:	6904      	ldr	r4, [r0, #16]
{
 8003b48:	af00      	add	r7, sp, #0
	data->clock = clk;
 8003b4a:	486c      	ldr	r0, [pc, #432]	; (8003cfc <uart_stm32_init+0x1c0>)
 8003b4c:	6020      	str	r0, [r4, #0]
 8003b4e:	f004 f946 	bl	8007dde <z_impl_device_is_ready>
	if (!device_is_ready(data->clock)) {
 8003b52:	b938      	cbnz	r0, 8003b64 <uart_stm32_init+0x28>
 8003b54:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <uart_stm32_init+0x1c4>)
 8003b56:	2101      	movs	r1, #1
 8003b58:	486a      	ldr	r0, [pc, #424]	; (8003d04 <uart_stm32_init+0x1c8>)
		return -ENODEV;
 8003b5a:	f06f 0412 	mvn.w	r4, #18
 8003b5e:	f003 fd21 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
 8003b62:	e00d      	b.n	8003b80 <uart_stm32_init+0x44>
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	68e9      	ldr	r1, [r5, #12]
 8003b68:	6883      	ldr	r3, [r0, #8]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4798      	blx	r3
	if (err != 0) {
 8003b6e:	4604      	mov	r4, r0
 8003b70:	b958      	cbnz	r0, 8003b8a <uart_stm32_init+0x4e>
	ret = pinctrl_lookup_state(config, id, &state);
 8003b72:	1d3a      	adds	r2, r7, #4
 8003b74:	2100      	movs	r1, #0
 8003b76:	6a28      	ldr	r0, [r5, #32]
 8003b78:	f003 ffcd 	bl	8007b16 <pinctrl_lookup_state>
	if (ret < 0) {
 8003b7c:	1e04      	subs	r4, r0, #0
 8003b7e:	da0c      	bge.n	8003b9a <uart_stm32_init+0x5e>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8003b80:	4620      	mov	r0, r4
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b8a:	4a5f      	ldr	r2, [pc, #380]	; (8003d08 <uart_stm32_init+0x1cc>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	485d      	ldr	r0, [pc, #372]	; (8003d04 <uart_stm32_init+0x1c8>)
 8003b90:	f003 fd08 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
	if (err < 0) {
 8003b94:	2c00      	cmp	r4, #0
 8003b96:	dbf3      	blt.n	8003b80 <uart_stm32_init+0x44>
 8003b98:	e7eb      	b.n	8003b72 <uart_stm32_init+0x36>
	return pinctrl_apply_state_direct(config, state);
 8003b9a:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	7919      	ldrb	r1, [r3, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	f7ff fee5 	bl	8003970 <pinctrl_configure_pins>
	if (err < 0) {
 8003ba6:	1e04      	subs	r4, r0, #0
 8003ba8:	dbea      	blt.n	8003b80 <uart_stm32_init+0x44>
	const struct uart_stm32_config *config = dev->config;
 8003baa:	6875      	ldr	r5, [r6, #4]
	struct uart_config *uart_cfg = data->uart_cfg;
 8003bac:	6933      	ldr	r3, [r6, #16]
	USART_TypeDef *usart = config->usart;
 8003bae:	682c      	ldr	r4, [r5, #0]
	struct uart_config *uart_cfg = data->uart_cfg;
 8003bb0:	f8d3 8004 	ldr.w	r8, [r3, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6023      	str	r3, [r4, #0]
	if (!device_is_ready(config->reset.dev)) {
 8003bbc:	6868      	ldr	r0, [r5, #4]
 8003bbe:	f004 f90e 	bl	8007dde <z_impl_device_is_ready>
 8003bc2:	b908      	cbnz	r0, 8003bc8 <uart_stm32_init+0x8c>
 8003bc4:	4a51      	ldr	r2, [pc, #324]	; (8003d0c <uart_stm32_init+0x1d0>)
 8003bc6:	e7c6      	b.n	8003b56 <uart_stm32_init+0x1a>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 8003bc8:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
	if (api->line_toggle == NULL) {
 8003bcc:	6883      	ldr	r3, [r0, #8]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	b103      	cbz	r3, 8003bd4 <uart_stm32_init+0x98>
	return api->line_toggle(dev, id);
 8003bd2:	4798      	blx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	e854 3f00 	ldrex	r3, [r4]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8003bd8:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	e844 3200 	strex	r2, r3, [r4]
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	d1f7      	bne.n	8003bd4 <uart_stm32_init+0x98>
	uart_stm32_parameters_set(dev, uart_cfg);
 8003be4:	4641      	mov	r1, r8
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff ff0e 	bl	8003a08 <uart_stm32_parameters_set>
	if (config->single_wire) {
 8003bec:	7d2b      	ldrb	r3, [r5, #20]
 8003bee:	b11b      	cbz	r3, 8003bf8 <uart_stm32_init+0xbc>
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8003bf0:	68a3      	ldr	r3, [r4, #8]
 8003bf2:	f043 0308 	orr.w	r3, r3, #8
 8003bf6:	60a3      	str	r3, [r4, #8]
	if (config->tx_rx_swap) {
 8003bf8:	7d6b      	ldrb	r3, [r5, #21]
 8003bfa:	b11b      	cbz	r3, 8003c04 <uart_stm32_init+0xc8>
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8003bfc:	6863      	ldr	r3, [r4, #4]
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	6063      	str	r3, [r4, #4]
	if (config->rx_invert) {
 8003c04:	7dab      	ldrb	r3, [r5, #22]
 8003c06:	b11b      	cbz	r3, 8003c10 <uart_stm32_init+0xd4>
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8003c08:	6863      	ldr	r3, [r4, #4]
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6063      	str	r3, [r4, #4]
	if (config->tx_invert) {
 8003c10:	7deb      	ldrb	r3, [r5, #23]
 8003c12:	b11b      	cbz	r3, 8003c1c <uart_stm32_init+0xe0>
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1a:	6063      	str	r3, [r4, #4]
	if (config->de_enable) {
 8003c1c:	7e2b      	ldrb	r3, [r5, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d05a      	beq.n	8003cd8 <uart_stm32_init+0x19c>
		if (!IS_UART_DRIVER_ENABLE_INSTANCE(usart)) {
 8003c22:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <uart_stm32_init+0x1d4>)
 8003c24:	429c      	cmp	r4, r3
 8003c26:	d03d      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c28:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8003c2c:	429c      	cmp	r4, r3
 8003c2e:	d039      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c34:	429c      	cmp	r4, r3
 8003c36:	d035      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c3c:	429c      	cmp	r4, r3
 8003c3e:	d031      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c44:	429c      	cmp	r4, r3
 8003c46:	d02d      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c48:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8003c4c:	429c      	cmp	r4, r3
 8003c4e:	d029      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c50:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8003c54:	429c      	cmp	r4, r3
 8003c56:	d025      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c5c:	429c      	cmp	r4, r3
 8003c5e:	d021      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c60:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003c64:	429c      	cmp	r4, r3
 8003c66:	d01d      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c6c:	429c      	cmp	r4, r3
 8003c6e:	d019      	beq.n	8003ca4 <uart_stm32_init+0x168>
 8003c70:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <uart_stm32_init+0x1d8>)
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d016      	beq.n	8003ca4 <uart_stm32_init+0x168>
			LOG_ERR("%s does not support driver enable", dev->name);
 8003c76:	466c      	mov	r4, sp
 8003c78:	b088      	sub	sp, #32
 8003c7a:	6833      	ldr	r3, [r6, #0]
 8003c7c:	466a      	mov	r2, sp
 8003c7e:	4926      	ldr	r1, [pc, #152]	; (8003d18 <uart_stm32_init+0x1dc>)
 8003c80:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8003c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c88:	8393      	strh	r3, [r2, #28]
 8003c8a:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <uart_stm32_init+0x1e0>)
 8003c8c:	f842 3f10 	str.w	r3, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8003c90:	2300      	movs	r3, #0
 8003c92:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 8003c96:	481b      	ldr	r0, [pc, #108]	; (8003d04 <uart_stm32_init+0x1c8>)
 8003c98:	f7fe f980 	bl	8001f9c <z_impl_z_log_msg_static_create>
 8003c9c:	46a5      	mov	sp, r4
			return -EINVAL;
 8003c9e:	f06f 0415 	mvn.w	r4, #21
 8003ca2:	e76d      	b.n	8003b80 <uart_stm32_init+0x44>
		LL_USART_EnableDEMode(config->usart);
 8003ca4:	6873      	ldr	r3, [r6, #4]
 8003ca6:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 8003ca8:	6893      	ldr	r3, [r2, #8]
 8003caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cae:	6093      	str	r3, [r2, #8]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 8003cb0:	6823      	ldr	r3, [r4, #0]
		LL_USART_SetDEAssertionTime(usart, config->de_assert_time);
 8003cb2:	7e6a      	ldrb	r2, [r5, #25]
 8003cb4:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8003cb8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003cbc:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 8003cbe:	6823      	ldr	r3, [r4, #0]
		LL_USART_SetDEDeassertionTime(usart, config->de_deassert_time);
 8003cc0:	7eaa      	ldrb	r2, [r5, #26]
 8003cc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cca:	6023      	str	r3, [r4, #0]
		if (config->de_invert) {
 8003ccc:	7eeb      	ldrb	r3, [r5, #27]
 8003cce:	b11b      	cbz	r3, 8003cd8 <uart_stm32_init+0x19c>
  *         @arg @ref LL_USART_DE_POLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 8003cd0:	68a3      	ldr	r3, [r4, #8]
 8003cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd6:	60a3      	str	r3, [r4, #8]
	if (config->fifo_enable) {
 8003cd8:	7f2b      	ldrb	r3, [r5, #28]
 8003cda:	b11b      	cbz	r3, 8003ce4 <uart_stm32_init+0x1a8>
  SET_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ce2:	6023      	str	r3, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003cec:	69e3      	ldr	r3, [r4, #28]
 8003cee:	029a      	lsls	r2, r3, #10
 8003cf0:	d5fc      	bpl.n	8003cec <uart_stm32_init+0x1b0>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003cf2:	69e3      	ldr	r3, [r4, #28]
 8003cf4:	025b      	lsls	r3, r3, #9
 8003cf6:	d5fc      	bpl.n	8003cf2 <uart_stm32_init+0x1b6>
	return 0;
 8003cf8:	2400      	movs	r4, #0
 8003cfa:	e741      	b.n	8003b80 <uart_stm32_init+0x44>
 8003cfc:	0800855c 	.word	0x0800855c
 8003d00:	0800a71a 	.word	0x0800a71a
 8003d04:	08008d0c 	.word	0x08008d0c
 8003d08:	0800a739 	.word	0x0800a739
 8003d0c:	0800a759 	.word	0x0800a759
 8003d10:	40011000 	.word	0x40011000
 8003d14:	58000c00 	.word	0x58000c00
 8003d18:	0800a774 	.word	0x0800a774
 8003d1c:	01000003 	.word	0x01000003

08003d20 <uart_stm32_configure>:
{
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USART_TypeDef *usart = config->usart;
 8003d22:	6843      	ldr	r3, [r0, #4]
{
 8003d24:	4602      	mov	r2, r0
 8003d26:	460e      	mov	r6, r1
 8003d28:	f891 e005 	ldrb.w	lr, [r1, #5]
	USART_TypeDef *usart = config->usart;
 8003d2c:	681c      	ldr	r4, [r3, #0]
	struct uart_config *uart_cfg = data->uart_cfg;
 8003d2e:	6903      	ldr	r3, [r0, #16]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8003d30:	7908      	ldrb	r0, [r1, #4]
	struct uart_config *uart_cfg = data->uart_cfg;
 8003d32:	685d      	ldr	r5, [r3, #4]
	switch (parity) {
 8003d34:	2801      	cmp	r0, #1
 8003d36:	798b      	ldrb	r3, [r1, #6]
 8003d38:	d122      	bne.n	8003d80 <uart_stm32_configure+0x60>
	switch (sb) {
 8003d3a:	f1be 0f02 	cmp.w	lr, #2
 8003d3e:	f240 8081 	bls.w	8003e44 <uart_stm32_configure+0x124>
	switch (db) {
 8003d42:	2b02      	cmp	r3, #2
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8003d44:	461f      	mov	r7, r3
	switch (db) {
 8003d46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d4a:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8003d4e:	f000 8093 	beq.w	8003e78 <uart_stm32_configure+0x158>
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	f000 808a 	beq.w	8003e6c <uart_stm32_configure+0x14c>
		if (p == UART_CFG_PARITY_NONE) {
 8003d58:	b128      	cbz	r0, 8003d66 <uart_stm32_configure+0x46>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003d5a:	1ec3      	subs	r3, r0, #3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	f240 8088 	bls.w	8003e72 <uart_stm32_configure+0x152>
		return LL_USART_DATAWIDTH_9B;
 8003d62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	switch (sb) {
 8003d66:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 8003d6a:	f000 808f 	beq.w	8003e8c <uart_stm32_configure+0x16c>
 8003d6e:	f5bc 5f40 	cmp.w	ip, #12288	; 0x3000
 8003d72:	f000 808d 	beq.w	8003e90 <uart_stm32_configure+0x170>
 8003d76:	f1bc 0f00 	cmp.w	ip, #0
 8003d7a:	d11c      	bne.n	8003db6 <uart_stm32_configure+0x96>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e01b      	b.n	8003db8 <uart_stm32_configure+0x98>
	switch (parity) {
 8003d80:	2802      	cmp	r0, #2
 8003d82:	d10a      	bne.n	8003d9a <uart_stm32_configure+0x7a>
	switch (sb) {
 8003d84:	f1be 0f02 	cmp.w	lr, #2
 8003d88:	d969      	bls.n	8003e5e <uart_stm32_configure+0x13e>
	switch (db) {
 8003d8a:	2b02      	cmp	r3, #2
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8003d8c:	461f      	mov	r7, r3
		return LL_USART_PARITY_EVEN;
 8003d8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
	switch (db) {
 8003d92:	d00b      	beq.n	8003dac <uart_stm32_configure+0x8c>
 8003d94:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8003d98:	e7db      	b.n	8003d52 <uart_stm32_configure+0x32>
	switch (sb) {
 8003d9a:	f1be 0f02 	cmp.w	lr, #2
 8003d9e:	d961      	bls.n	8003e64 <uart_stm32_configure+0x144>
	switch (db) {
 8003da0:	2b02      	cmp	r3, #2
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8003da2:	461f      	mov	r7, r3
	switch (db) {
 8003da4:	d160      	bne.n	8003e68 <uart_stm32_configure+0x148>
		if (p == UART_CFG_PARITY_NONE) {
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d06c      	beq.n	8003e84 <uart_stm32_configure+0x164>
		return LL_USART_PARITY_NONE;
 8003daa:	2100      	movs	r1, #0
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003dac:	1ec3      	subs	r3, r0, #3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d95f      	bls.n	8003e72 <uart_stm32_configure+0x152>
			return LL_USART_DATAWIDTH_8B;
 8003db2:	2000      	movs	r0, #0
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003db4:	2702      	movs	r7, #2
		return UART_CFG_STOP_BITS_2;
 8003db6:	2303      	movs	r3, #3
	if (uart_stm32_ll2cfg_stopbits(stopbits) != cfg->stop_bits) {
 8003db8:	4573      	cmp	r3, lr
 8003dba:	d15a      	bne.n	8003e72 <uart_stm32_configure+0x152>
	if (uart_stm32_ll2cfg_databits(databits, parity) != cfg->data_bits) {
 8003dbc:	f003 fef7 	bl	8007bae <uart_stm32_ll2cfg_databits>
 8003dc0:	42b8      	cmp	r0, r7
 8003dc2:	d156      	bne.n	8003e72 <uart_stm32_configure+0x152>
	if (!(cfg->flow_ctrl == UART_CFG_FLOW_CTRL_NONE
 8003dc4:	79f3      	ldrb	r3, [r6, #7]
 8003dc6:	b35b      	cbz	r3, 8003e20 <uart_stm32_configure+0x100>
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS &&
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d163      	bne.n	8003e94 <uart_stm32_configure+0x174>
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485 &&
 8003dcc:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <uart_stm32_configure+0x17c>)
 8003dce:	429c      	cmp	r4, r3
 8003dd0:	d026      	beq.n	8003e20 <uart_stm32_configure+0x100>
			IS_UART_DRIVER_ENABLE_INSTANCE(usart))
 8003dd2:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8003dd6:	429c      	cmp	r4, r3
 8003dd8:	d022      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dde:	429c      	cmp	r4, r3
 8003de0:	d01e      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003de6:	429c      	cmp	r4, r3
 8003de8:	d01a      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dee:	429c      	cmp	r4, r3
 8003df0:	d016      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003df2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8003df6:	429c      	cmp	r4, r3
 8003df8:	d012      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003dfa:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8003dfe:	429c      	cmp	r4, r3
 8003e00:	d00e      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e06:	429c      	cmp	r4, r3
 8003e08:	d00a      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003e0a:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003e0e:	429c      	cmp	r4, r3
 8003e10:	d006      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e16:	429c      	cmp	r4, r3
 8003e18:	d002      	beq.n	8003e20 <uart_stm32_configure+0x100>
 8003e1a:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <uart_stm32_configure+0x180>)
 8003e1c:	429c      	cmp	r4, r3
 8003e1e:	d128      	bne.n	8003e72 <uart_stm32_configure+0x152>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003e20:	6823      	ldr	r3, [r4, #0]
	uart_stm32_parameters_set(dev, cfg);
 8003e22:	4631      	mov	r1, r6
 8003e24:	4610      	mov	r0, r2
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	6023      	str	r3, [r4, #0]
 8003e2c:	f7ff fdec 	bl	8003a08 <uart_stm32_parameters_set>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6023      	str	r3, [r4, #0]
	*uart_cfg = *cfg;
 8003e38:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003e3c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
 8003e40:	2000      	movs	r0, #0
};
 8003e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(config, cfg->stop_bits);
 8003e44:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e48:	4f16      	ldr	r7, [pc, #88]	; (8003ea4 <uart_stm32_configure+0x184>)
	switch (db) {
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	f837 c01e 	ldrh.w	ip, [r7, lr, lsl #1]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8003e50:	461f      	mov	r7, r3
	switch (db) {
 8003e52:	f47f af7e 	bne.w	8003d52 <uart_stm32_configure+0x32>
		if (p == UART_CFG_PARITY_NONE) {
 8003e56:	b978      	cbnz	r0, 8003e78 <uart_stm32_configure+0x158>
			return LL_USART_DATAWIDTH_7B;
 8003e58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e5c:	e783      	b.n	8003d66 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 8003e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e62:	e7f1      	b.n	8003e48 <uart_stm32_configure+0x128>
		return LL_USART_PARITY_NONE;
 8003e64:	2100      	movs	r1, #0
 8003e66:	e7ef      	b.n	8003e48 <uart_stm32_configure+0x128>
 8003e68:	2100      	movs	r1, #0
 8003e6a:	e793      	b.n	8003d94 <uart_stm32_configure+0x74>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	f43f af78 	beq.w	8003d62 <uart_stm32_configure+0x42>
		return -ENOTSUP;
 8003e72:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003e76:	e7e4      	b.n	8003e42 <uart_stm32_configure+0x122>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003e78:	1ec3      	subs	r3, r0, #3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d9f9      	bls.n	8003e72 <uart_stm32_configure+0x152>
 8003e7e:	2702      	movs	r7, #2
			return LL_USART_DATAWIDTH_8B;
 8003e80:	2000      	movs	r0, #0
 8003e82:	e770      	b.n	8003d66 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_NONE;
 8003e84:	4601      	mov	r1, r0
			return LL_USART_DATAWIDTH_7B;
 8003e86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e8a:	e794      	b.n	8003db6 <uart_stm32_configure+0x96>
		return UART_CFG_STOP_BITS_0_5;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e793      	b.n	8003db8 <uart_stm32_configure+0x98>
		return UART_CFG_STOP_BITS_1_5;
 8003e90:	2302      	movs	r3, #2
 8003e92:	e791      	b.n	8003db8 <uart_stm32_configure+0x98>
	if (!(cfg->flow_ctrl == UART_CFG_FLOW_CTRL_NONE
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d099      	beq.n	8003dcc <uart_stm32_configure+0xac>
 8003e98:	e7eb      	b.n	8003e72 <uart_stm32_configure+0x152>
 8003e9a:	bf00      	nop
 8003e9c:	40011000 	.word	0x40011000
 8003ea0:	58000c00 	.word	0x58000c00
 8003ea4:	08009d1c 	.word	0x08009d1c

08003ea8 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8003ea8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if (val1 == 0) {
		val1 = last_load;
 8003eac:	490f      	ldr	r1, [pc, #60]	; (8003eec <elapsed+0x44>)
{
 8003eae:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8003eb0:	699c      	ldr	r4, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8003eb2:	691a      	ldr	r2, [r3, #16]
		val1 = last_load;
 8003eb4:	6808      	ldr	r0, [r1, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 8003eb6:	699b      	ldr	r3, [r3, #24]
	if (val1 == 0) {
 8003eb8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003ebc:	490c      	ldr	r1, [pc, #48]	; (8003ef0 <elapsed+0x48>)
 8003ebe:	b934      	cbnz	r4, 8003ece <elapsed+0x26>
	}
	if (val2 == 0) {
 8003ec0:	b993      	cbnz	r3, 8003ee8 <elapsed+0x40>
		val2 = last_load;
 8003ec2:	4603      	mov	r3, r0
	}

	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003ec4:	b94a      	cbnz	r2, 8003eda <elapsed+0x32>
		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
	}

	return (last_load - val2) + overflow_cyc;
 8003ec6:	680a      	ldr	r2, [r1, #0]
 8003ec8:	4410      	add	r0, r2
}
 8003eca:	1ac0      	subs	r0, r0, r3
 8003ecc:	bd10      	pop	{r4, pc}
		val2 = last_load;
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf08      	it	eq
 8003ed2:	4603      	moveq	r3, r0
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003ed4:	b90a      	cbnz	r2, 8003eda <elapsed+0x32>
	    || (val1 < val2)) {
 8003ed6:	42a3      	cmp	r3, r4
 8003ed8:	d9f5      	bls.n	8003ec6 <elapsed+0x1e>
		overflow_cyc += last_load;
 8003eda:	680a      	ldr	r2, [r1, #0]
 8003edc:	4402      	add	r2, r0
 8003ede:	600a      	str	r2, [r1, #0]
		(void)SysTick->CTRL;
 8003ee0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003ee4:	6912      	ldr	r2, [r2, #16]
 8003ee6:	e7ee      	b.n	8003ec6 <elapsed+0x1e>
		val1 = last_load;
 8003ee8:	4604      	mov	r4, r0
 8003eea:	e7f3      	b.n	8003ed4 <elapsed+0x2c>
 8003eec:	24000fe8 	.word	0x24000fe8
 8003ef0:	24000fe4 	.word	0x24000fe4

08003ef4 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <sys_clock_driver_init+0x2c>)
 8003ef6:	2210      	movs	r2, #16
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK;
	overflow_cyc = 0U;
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK;
 8003efe:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <sys_clock_driver_init+0x30>)
 8003f04:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load - 1;
 8003f06:	f24d 62d7 	movw	r2, #54999	; 0xd6d7
	overflow_cyc = 0U;
 8003f0a:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <sys_clock_driver_init+0x34>)
 8003f0c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load - 1;
 8003f0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f12:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003f14:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	f042 0207 	orr.w	r2, r2, #7
 8003f1c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8003f1e:	4770      	bx	lr
 8003f20:	e000ed00 	.word	0xe000ed00
 8003f24:	24000fe8 	.word	0x24000fe8
 8003f28:	24000fe4 	.word	0x24000fe4

08003f2c <sys_clock_isr>:
{
 8003f2c:	4668      	mov	r0, sp
 8003f2e:	f020 0107 	bic.w	r1, r0, #7
 8003f32:	468d      	mov	sp, r1
 8003f34:	b519      	push	{r0, r3, r4, lr}
	elapsed();
 8003f36:	f7ff ffb7 	bl	8003ea8 <elapsed>
	cycle_count += overflow_cyc;
 8003f3a:	4911      	ldr	r1, [pc, #68]	; (8003f80 <sys_clock_isr+0x54>)
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <sys_clock_isr+0x58>)
 8003f3e:	6808      	ldr	r0, [r1, #0]
 8003f40:	e9d3 4200 	ldrd	r4, r2, [r3]
 8003f44:	1900      	adds	r0, r0, r4
 8003f46:	f142 0200 	adc.w	r2, r2, #0
 8003f4a:	e9c3 0200 	strd	r0, r2, [r3]
		dcycles = cycle_count - announced_cycles;
 8003f4e:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <sys_clock_isr+0x5c>)
	overflow_cyc = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	600b      	str	r3, [r1, #0]
		dticks = dcycles / CYC_PER_TICK;
 8003f54:	f24d 63d8 	movw	r3, #55000	; 0xd6d8
		dcycles = cycle_count - announced_cycles;
 8003f58:	e9d2 4100 	ldrd	r4, r1, [r2]
 8003f5c:	1b00      	subs	r0, r0, r4
		dticks = dcycles / CYC_PER_TICK;
 8003f5e:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8003f62:	4343      	muls	r3, r0
 8003f64:	191b      	adds	r3, r3, r4
 8003f66:	f141 0100 	adc.w	r1, r1, #0
 8003f6a:	e9c2 3100 	strd	r3, r1, [r2]
		sys_clock_announce(dticks);
 8003f6e:	f001 fbc9 	bl	8005704 <sys_clock_announce>
	z_arm_int_exit();
 8003f72:	f7fe fc1b 	bl	80027ac <z_arm_exc_exit>
}
 8003f76:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 8003f7a:	4685      	mov	sp, r0
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	24000fe4 	.word	0x24000fe4
 8003f84:	24000b38 	.word	0x24000b38
 8003f88:	24000b30 	.word	0x24000b30

08003f8c <sys_clock_set_timeout>:
{
 8003f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f90:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004084 <sys_clock_set_timeout+0xf8>
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8003f94:	b199      	cbz	r1, 8003fbe <sys_clock_set_timeout+0x32>
 8003f96:	1c42      	adds	r2, r0, #1
 8003f98:	d10b      	bne.n	8003fb2 <sys_clock_set_timeout+0x26>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003f9a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003f9e:	6913      	ldr	r3, [r2, #16]
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8003fa6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003faa:	f8c8 3000 	str.w	r3, [r8]
}
 8003fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8003fb2:	f8d8 6000 	ldr.w	r6, [r8]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8003fb6:	2801      	cmp	r0, #1
 8003fb8:	dc07      	bgt.n	8003fca <sys_clock_set_timeout+0x3e>
 8003fba:	2700      	movs	r7, #0
 8003fbc:	e00b      	b.n	8003fd6 <sys_clock_set_timeout+0x4a>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8003fbe:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8003fc0:	f8d8 6000 	ldr.w	r6, [r8]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8003fc4:	d1f7      	bne.n	8003fb6 <sys_clock_set_timeout+0x2a>
 8003fc6:	f44f 7098 	mov.w	r0, #304	; 0x130
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8003fca:	f240 1331 	movw	r3, #305	; 0x131
 8003fce:	4298      	cmp	r0, r3
 8003fd0:	bfa8      	it	ge
 8003fd2:	4618      	movge	r0, r3
 8003fd4:	1e47      	subs	r7, r0, #1
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fd6:	f3ef 8511 	mrs	r5, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8003fda:	2310      	movs	r3, #16
 8003fdc:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8003fe0:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8003fe4:	f7ff ff60 	bl	8003ea8 <elapsed>
	cycle_count += pending;
 8003fe8:	4c22      	ldr	r4, [pc, #136]	; (8004074 <sys_clock_set_timeout+0xe8>)
	val1 = SysTick->VAL;
 8003fea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fee:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
 8003ff0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003ff4:	1880      	adds	r0, r0, r2
	overflow_cyc = 0U;
 8003ff6:	f04f 0200 	mov.w	r2, #0
	cycle_count += pending;
 8003ffa:	f143 0300 	adc.w	r3, r3, #0
 8003ffe:	e9c4 0300 	strd	r0, r3, [r4]
	overflow_cyc = 0U;
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <sys_clock_set_timeout+0xec>)
 8004004:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <sys_clock_set_timeout+0xf0>)
 8004008:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800400a:	1a83      	subs	r3, r0, r2
 800400c:	d42e      	bmi.n	800406c <sys_clock_set_timeout+0xe0>
		delay = ticks * CYC_PER_TICK;
 800400e:	f24d 6cd8 	movw	ip, #55000	; 0xd6d8
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
 8004012:	fb0c 3307 	mla	r3, ip, r7, r3
 8004016:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 800401a:	33d7      	adds	r3, #215	; 0xd7
 800401c:	fbb3 f7fc 	udiv	r7, r3, ip
		delay -= unannounced;
 8004020:	1a13      	subs	r3, r2, r0
		delay = MAX(delay, MIN_DELAY);
 8004022:	f640 526d 	movw	r2, #3437	; 0xd6d
		delay -= unannounced;
 8004026:	fb0c 3307 	mla	r3, ip, r7, r3
		delay = MAX(delay, MIN_DELAY);
 800402a:	4293      	cmp	r3, r2
 800402c:	bf38      	it	cc
 800402e:	4613      	movcc	r3, r2
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <sys_clock_set_timeout+0xf4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	bf28      	it	cs
 8004036:	4613      	movcs	r3, r2
		last_load = MIN_DELAY;
 8004038:	f8c8 3000 	str.w	r3, [r8]
	val2 = SysTick->VAL;
 800403c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8004040:	3b01      	subs	r3, #1
	val2 = SysTick->VAL;
 8004042:	6990      	ldr	r0, [r2, #24]
	SysTick->LOAD = last_load - 1;
 8004044:	6153      	str	r3, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8004046:	2300      	movs	r3, #0
	if (val1 < val2) {
 8004048:	4281      	cmp	r1, r0
	SysTick->VAL = 0; /* resets timer to last_load */
 800404a:	6193      	str	r3, [r2, #24]
	if (val1 < val2) {
 800404c:	eba1 0300 	sub.w	r3, r1, r0
		cycle_count += (val1 - val2);
 8004050:	e9d4 1200 	ldrd	r1, r2, [r4]
		cycle_count += (val1 + (last_load_ - val2));
 8004054:	bf38      	it	cc
 8004056:	199b      	addcc	r3, r3, r6
		cycle_count += (val1 - val2);
 8004058:	185b      	adds	r3, r3, r1
 800405a:	f142 0200 	adc.w	r2, r2, #0
 800405e:	e9c4 3200 	strd	r3, r2, [r4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004062:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("isb 0xF":::"memory");
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	e7a0      	b.n	8003fae <sys_clock_set_timeout+0x22>
 800406c:	f640 536d 	movw	r3, #3437	; 0xd6d
 8004070:	e7e2      	b.n	8004038 <sys_clock_set_timeout+0xac>
 8004072:	bf00      	nop
 8004074:	24000b38 	.word	0x24000b38
 8004078:	24000fe4 	.word	0x24000fe4
 800407c:	24000b30 	.word	0x24000b30
 8004080:	00ff2080 	.word	0x00ff2080
 8004084:	24000fe8 	.word	0x24000fe8

08004088 <sys_clock_elapsed>:
{
 8004088:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800408a:	f3ef 8511 	mrs	r5, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800408e:	2310      	movs	r3, #16
 8004090:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004094:	f3bf 8f6f 	isb	sy
	uint32_t unannounced = cycle_count - announced_cycles;
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <sys_clock_elapsed+0x34>)
 800409a:	681c      	ldr	r4, [r3, #0]
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <sys_clock_elapsed+0x38>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	1ae4      	subs	r4, r4, r3
	uint32_t cyc = elapsed() + unannounced;
 80040a2:	f7ff ff01 	bl	8003ea8 <elapsed>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80040a6:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("isb 0xF":::"memory");
 80040aa:	f3bf 8f6f 	isb	sy
}
 80040ae:	f24d 63d8 	movw	r3, #55000	; 0xd6d8
	uint32_t cyc = elapsed() + unannounced;
 80040b2:	4420      	add	r0, r4
}
 80040b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80040b8:	bd38      	pop	{r3, r4, r5, pc}
 80040ba:	bf00      	nop
 80040bc:	24000b38 	.word	0x24000b38
 80040c0:	24000b30 	.word	0x24000b30

080040c4 <sys_clock_cycle_get_32>:
{
 80040c4:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040c6:	f3ef 8511 	mrs	r5, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80040ca:	2310      	movs	r3, #16
 80040cc:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80040d0:	f3bf 8f6f 	isb	sy
	uint32_t ret = cycle_count;
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <sys_clock_cycle_get_32+0x24>)
 80040d6:	681c      	ldr	r4, [r3, #0]
	ret += elapsed();
 80040d8:	f7ff fee6 	bl	8003ea8 <elapsed>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80040dc:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("isb 0xF":::"memory");
 80040e0:	f3bf 8f6f 	isb	sy
}
 80040e4:	4420      	add	r0, r4
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	24000b38 	.word	0x24000b38

080040ec <arm_sin_cos_f32>:
  float32_t Dn, Df;
  float32_t temp, findex;

  /* input x is in degrees */
  /* Scale input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
  in = theta * 0.00277777777778f;
 80040ec:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80041d8 <arm_sin_cos_f32+0xec>
 80040f0:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
  }

  in = in - (int32_t)in;

  /* Calculate the nearest index */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80040f4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80041dc <arm_sin_cos_f32+0xf0>

  Dn = 0.0122718463030f; /* delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE */
  Df = f2 - f1;          /* delta between the values of the functions */

  temp = Dn * (d1 + d2) - 2 * Df;
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 80040f8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
  in = theta * 0.00277777777778f;
 80040fc:	ee60 7a27 	vmul.f32	s15, s0, s15
  f1 =  sinTable_f32[indexC  ];
 8004100:	4a37      	ldr	r2, [pc, #220]	; (80041e0 <arm_sin_cos_f32+0xf4>)
  temp = Dn * (d1 + d2) - 2 * Df;
 8004102:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80041e4 <arm_sin_cos_f32+0xf8>
  temp = fract * temp + d1 * Dn;

  /* Calculation of sine value */
  *pSinVal = fract * temp + f1;

  if (theta < 0.0f)
 8004106:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  if (in < 0.0f)
 800410a:	eef0 7ae7 	vabs.f32	s15, s15
  if (theta < 0.0f)
 800410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  in = in - (int32_t)in;
 8004112:	eef6 6ae7 	vrintz.f32	s13, s15
 8004116:	ee77 7ae6 	vsub.f32	s15, s15, s13
{
 800411a:	b500      	push	{lr}
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800411c:	ee67 7a87 	vmul.f32	s15, s15, s14
  indexS = ((uint16_t)findex) & 0x1ff;
 8004120:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004124:	ee17 3a10 	vmov	r3, s14
 8004128:	f3c3 0308 	ubfx	r3, r3, #0, #9
  fract = findex - (float32_t) indexS;
 800412c:	ee07 3a10 	vmov	s14, r3
  d1 = -sinTable_f32[indexS  ];
 8004130:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
  indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 8004134:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  fract = findex - (float32_t) indexS;
 8004138:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  d2 = -sinTable_f32[indexS+1];
 800413c:	edde 6a01 	vldr	s13, [lr, #4]
  d1 = -sinTable_f32[indexS  ];
 8004140:	edde 4a00 	vldr	s9, [lr]
  f1 =  sinTable_f32[indexC  ];
 8004144:	f3cc 0c08 	ubfx	ip, ip, #0, #9
 8004148:	eef0 5a66 	vmov.f32	s11, s13
  fract = findex - (float32_t) indexS;
 800414c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  f1 =  sinTable_f32[indexC  ];
 8004150:	eb02 038c 	add.w	r3, r2, ip, lsl #2
  d1 = -sinTable_f32[indexS  ];
 8004154:	eeb1 7a64 	vneg.f32	s14, s9
  Df = f2 - f1; // delta between the values of the functions
 8004158:	ee76 1ae4 	vsub.f32	s3, s13, s9
  f2 =  sinTable_f32[indexC+1];
 800415c:	edd3 3a01 	vldr	s7, [r3, #4]
 8004160:	eed7 5a03 	vfnms.f32	s11, s14, s6
  temp = Dn * (d1 + d2) - 2 * Df;
 8004164:	ee37 4a66 	vsub.f32	s8, s14, s13
  temp = fract * temp + d1 * Dn;
 8004168:	ee67 6a05 	vmul.f32	s13, s14, s10
  f1 =  sinTable_f32[indexC  ];
 800416c:	ed93 7a00 	vldr	s14, [r3]
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8004170:	eeb0 6a63 	vmov.f32	s12, s7
  Df = f2 - f1;          /* delta between the values of the functions */
 8004174:	ee33 1ac7 	vsub.f32	s2, s7, s14
  temp = Dn * (d1 + d2) - 2 * Df;
 8004178:	ee71 2aa1 	vadd.f32	s5, s3, s3
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 800417c:	eea7 6a03 	vfma.f32	s12, s14, s6
  temp = Dn * (d1 + d2) - 2 * Df;
 8004180:	ee77 3a23 	vadd.f32	s7, s14, s7
  temp = Dn * (d1 + d2) - 2 * Df;
 8004184:	ee31 2a01 	vadd.f32	s4, s2, s2
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8004188:	ee65 5a65 	vnmul.f32	s11, s10, s11
  temp = Dn * (d1 + d2) - 2 * Df;
 800418c:	eed3 2a85 	vfnms.f32	s5, s7, s10
  temp = Dn * (d1 + d2) - 2 * Df;
 8004190:	eef0 3a42 	vmov.f32	s7, s4
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8004194:	eee1 5a20 	vfma.f32	s11, s2, s1
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8004198:	ee25 6a46 	vnmul.f32	s12, s10, s12
  temp = Dn * (d1 + d2) - 2 * Df;
 800419c:	eed4 3a05 	vfnms.f32	s7, s8, s10
  temp = fract * temp + d1 * Dn;
 80041a0:	ee27 3a05 	vmul.f32	s6, s14, s10
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 80041a4:	eea1 6aa0 	vfma.f32	s12, s3, s1
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 80041a8:	eee7 5aa3 	vfma.f32	s11, s15, s7
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 80041ac:	eea7 6aa2 	vfma.f32	s12, s15, s5
  temp = fract * temp + d1 * Dn;
 80041b0:	eee7 6aa5 	vfma.f32	s13, s15, s11
  temp = fract * temp + d1 * Dn;
 80041b4:	eef0 5a43 	vmov.f32	s11, s6
 80041b8:	eee7 5a86 	vfma.f32	s11, s15, s12
  *pCosVal = fract * temp + f1;
 80041bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
  *pSinVal = fract * temp + f1;
 80041c0:	eee7 4aa5 	vfma.f32	s9, s15, s11
  *pCosVal = fract * temp + f1;
 80041c4:	ed81 7a00 	vstr	s14, [r1]
  {
    *pSinVal = -*pSinVal;
 80041c8:	bf48      	it	mi
 80041ca:	eef1 4a64 	vnegmi.f32	s9, s9
  *pSinVal = fract * temp + f1;
 80041ce:	edc0 4a00 	vstr	s9, [r0]
  }
}
 80041d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80041d6:	bf00      	nop
 80041d8:	3b360b61 	.word	0x3b360b61
 80041dc:	44000000 	.word	0x44000000
 80041e0:	08009444 	.word	0x08009444
 80041e4:	3c490fdb 	.word	0x3c490fdb

080041e8 <LL_ADC_CommonInit>:
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <LL_ADC_CommonInit+0x48>)
 80041ea:	4298      	cmp	r0, r3
{
 80041ec:	b530      	push	{r4, r5, lr}
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80041ee:	d117      	bne.n	8004220 <LL_ADC_CommonInit+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041f0:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80041f4:	4a0f      	ldr	r2, [pc, #60]	; (8004234 <LL_ADC_CommonInit+0x4c>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	6892      	ldr	r2, [r2, #8]
 80041fa:	07d2      	lsls	r2, r2, #31
 80041fc:	d415      	bmi.n	800422a <LL_ADC_CommonInit+0x42>
 80041fe:	07db      	lsls	r3, r3, #31
 8004200:	d413      	bmi.n	800422a <LL_ADC_CommonInit+0x42>
 8004202:	4d0d      	ldr	r5, [pc, #52]	; (8004238 <LL_ADC_CommonInit+0x50>)
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004204:	6883      	ldr	r3, [r0, #8]
 8004206:	e9d1 4200 	ldrd	r4, r2, [r1]
 800420a:	402b      	ands	r3, r5
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800420c:	b15a      	cbz	r2, 8004226 <LL_ADC_CommonInit+0x3e>
      MODIFY_REG(ADCxy_COMMON->CCR,
 800420e:	4322      	orrs	r2, r4
 8004210:	4313      	orrs	r3, r2
 8004212:	688a      	ldr	r2, [r1, #8]
 8004214:	4313      	orrs	r3, r2
 8004216:	68ca      	ldr	r2, [r1, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 800421c:	2000      	movs	r0, #0
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
  }

  return status;
}
 800421e:	bd30      	pop	{r4, r5, pc}
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <LL_ADC_CommonInit+0x54>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	e7eb      	b.n	80041fe <LL_ADC_CommonInit+0x16>
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004226:	4323      	orrs	r3, r4
 8004228:	e7f7      	b.n	800421a <LL_ADC_CommonInit+0x32>
    status = ERROR;
 800422a:	2001      	movs	r0, #1
 800422c:	e7f7      	b.n	800421e <LL_ADC_CommonInit+0x36>
 800422e:	bf00      	nop
 8004230:	40022300 	.word	0x40022300
 8004234:	40022100 	.word	0x40022100
 8004238:	ffc030e0 	.word	0xffc030e0
 800423c:	58026000 	.word	0x58026000

08004240 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	6884      	ldr	r4, [r0, #8]
 8004244:	f014 0401 	ands.w	r4, r4, #1
 8004248:	d121      	bne.n	800428e <LL_ADC_Init+0x4e>
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
#if defined(ADC_VER_V5_V90)
    if(ADCx==ADC3)
 800424a:	4e12      	ldr	r6, [pc, #72]	; (8004294 <LL_ADC_Init+0x54>)
    {
      MODIFY_REG(ADCx->CFGR,
 800424c:	68c3      	ldr	r3, [r0, #12]
    if(ADCx==ADC3)
 800424e:	42b0      	cmp	r0, r6
      MODIFY_REG(ADCx->CFGR,
 8004250:	680a      	ldr	r2, [r1, #0]
 8004252:	688d      	ldr	r5, [r1, #8]
 8004254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    if(ADCx==ADC3)
 8004258:	d113      	bne.n	8004282 <LL_ADC_Init+0x42>
      MODIFY_REG(ADCx->CFGR,
 800425a:	2a08      	cmp	r2, #8
 800425c:	f023 0318 	bic.w	r3, r3, #24
 8004260:	d004      	beq.n	800426c <LL_ADC_Init+0x2c>
 8004262:	3a0c      	subs	r2, #12
 8004264:	2a10      	cmp	r2, #16
 8004266:	bf9c      	itt	ls
 8004268:	4c0b      	ldrls	r4, [pc, #44]	; (8004298 <LL_ADC_Init+0x58>)
 800426a:	5ca4      	ldrbls	r4, [r4, r2]
 800426c:	432b      	orrs	r3, r5
 800426e:	4323      	orrs	r3, r4
 8004270:	60f3      	str	r3, [r6, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
#endif

    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8004272:	6903      	ldr	r3, [r0, #16]
 8004274:	684a      	ldr	r2, [r1, #4]
 8004276:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800427a:	4313      	orrs	r3, r2
 800427c:	6103      	str	r3, [r0, #16]
  ErrorStatus status = SUCCESS;
 800427e:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8004280:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(ADCx->CFGR,
 8004282:	f023 031c 	bic.w	r3, r3, #28
 8004286:	432a      	orrs	r2, r5
 8004288:	4313      	orrs	r3, r2
 800428a:	60c3      	str	r3, [r0, #12]
 800428c:	e7f1      	b.n	8004272 <LL_ADC_Init+0x32>
    status = ERROR;
 800428e:	2001      	movs	r0, #1
 8004290:	e7f6      	b.n	8004280 <LL_ADC_Init+0x40>
 8004292:	bf00      	nop
 8004294:	58026000 	.word	0x58026000
 8004298:	0800a7b1 	.word	0x0800a7b1

0800429c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	6883      	ldr	r3, [r0, #8]
 80042a0:	07db      	lsls	r3, r3, #31
 80042a2:	d41c      	bmi.n	80042de <LL_ADC_REG_Init+0x42>
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CFGR,
 80042a4:	680b      	ldr	r3, [r1, #0]
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80042a6:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CFGR,
 80042a8:	694d      	ldr	r5, [r1, #20]
 80042aa:	e9d1 4603 	ldrd	r4, r6, [r1, #12]
 80042ae:	4323      	orrs	r3, r4
 80042b0:	4c0c      	ldr	r4, [pc, #48]	; (80042e4 <LL_ADC_REG_Init+0x48>)
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80042b2:	b17a      	cbz	r2, 80042d4 <LL_ADC_REG_Init+0x38>
      MODIFY_REG(ADCx->CFGR,
 80042b4:	68c2      	ldr	r2, [r0, #12]
 80042b6:	4333      	orrs	r3, r6
 80042b8:	4022      	ands	r2, r4
 80042ba:	432b      	orrs	r3, r5
 80042bc:	4313      	orrs	r3, r2
 80042be:	688a      	ldr	r2, [r1, #8]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80042c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80042c6:	684a      	ldr	r2, [r1, #4]
 80042c8:	f023 030f 	bic.w	r3, r3, #15
 80042cc:	4313      	orrs	r3, r2
 80042ce:	6303      	str	r3, [r0, #48]	; 0x30
  ErrorStatus status = SUCCESS;
 80042d0:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(ADCx->CFGR,
 80042d4:	68c2      	ldr	r2, [r0, #12]
 80042d6:	4333      	orrs	r3, r6
 80042d8:	4022      	ands	r2, r4
 80042da:	432b      	orrs	r3, r5
 80042dc:	e7f0      	b.n	80042c0 <LL_ADC_REG_Init+0x24>
    status = ERROR;
 80042de:	2001      	movs	r0, #1
 80042e0:	e7f7      	b.n	80042d2 <LL_ADC_REG_Init+0x36>
 80042e2:	bf00      	nop
 80042e4:	fff0c01c 	.word	0xfff0c01c

080042e8 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	4a2c      	ldr	r2, [pc, #176]	; (800439c <LL_TIM_Init+0xb4>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80042ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ec:	4290      	cmp	r0, r2
 80042ee:	d035      	beq.n	800435c <LL_TIM_Init+0x74>
 80042f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80042f4:	d032      	beq.n	800435c <LL_TIM_Init+0x74>
 80042f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80042fa:	4290      	cmp	r0, r2
 80042fc:	d02e      	beq.n	800435c <LL_TIM_Init+0x74>
 80042fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004302:	4290      	cmp	r0, r2
 8004304:	d02a      	beq.n	800435c <LL_TIM_Init+0x74>
 8004306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800430a:	4290      	cmp	r0, r2
 800430c:	d026      	beq.n	800435c <LL_TIM_Init+0x74>
 800430e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004312:	4290      	cmp	r0, r2
 8004314:	d022      	beq.n	800435c <LL_TIM_Init+0x74>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800431a:	4290      	cmp	r0, r2
 800431c:	d123      	bne.n	8004366 <LL_TIM_Init+0x7e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800431e:	68ca      	ldr	r2, [r1, #12]
 8004320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004324:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004326:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004328:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800432a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800432c:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800432e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004330:	4b1a      	ldr	r3, [pc, #104]	; (800439c <LL_TIM_Init+0xb4>)
 8004332:	4298      	cmp	r0, r3
 8004334:	d00f      	beq.n	8004356 <LL_TIM_Init+0x6e>
 8004336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433a:	4298      	cmp	r0, r3
 800433c:	d00b      	beq.n	8004356 <LL_TIM_Init+0x6e>
 800433e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8004342:	4298      	cmp	r0, r3
 8004344:	d007      	beq.n	8004356 <LL_TIM_Init+0x6e>
 8004346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800434a:	4298      	cmp	r0, r3
 800434c:	d003      	beq.n	8004356 <LL_TIM_Init+0x6e>
 800434e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004352:	4298      	cmp	r0, r3
 8004354:	d11b      	bne.n	800438e <LL_TIM_Init+0xa6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004356:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004358:	6303      	str	r3, [r0, #48]	; 0x30
}
 800435a:	e018      	b.n	800438e <LL_TIM_Init+0xa6>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	684a      	ldr	r2, [r1, #4]
 8004362:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004364:	e7db      	b.n	800431e <LL_TIM_Init+0x36>
 8004366:	4a0e      	ldr	r2, [pc, #56]	; (80043a0 <LL_TIM_Init+0xb8>)
 8004368:	4290      	cmp	r0, r2
 800436a:	d0d8      	beq.n	800431e <LL_TIM_Init+0x36>
 800436c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004370:	4290      	cmp	r0, r2
 8004372:	d0d4      	beq.n	800431e <LL_TIM_Init+0x36>
 8004374:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 8004378:	4290      	cmp	r0, r2
 800437a:	d0d0      	beq.n	800431e <LL_TIM_Init+0x36>
 800437c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004380:	4290      	cmp	r0, r2
 8004382:	d0cc      	beq.n	800431e <LL_TIM_Init+0x36>
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004384:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004386:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004388:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800438a:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800438c:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800438e:	6943      	ldr	r3, [r0, #20]
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8004396:	2000      	movs	r0, #0
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40014400 	.word	0x40014400

080043a4 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80043a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 80043a8:	b530      	push	{r4, r5, lr}
  switch (Channel)
 80043aa:	f000 8111 	beq.w	80045d0 <LL_TIM_OC_Init+0x22c>
 80043ae:	d80a      	bhi.n	80043c6 <LL_TIM_OC_Init+0x22>
 80043b0:	2910      	cmp	r1, #16
 80043b2:	f000 8086 	beq.w	80044c2 <LL_TIM_OC_Init+0x11e>
 80043b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80043ba:	f000 80c6 	beq.w	800454a <LL_TIM_OC_Init+0x1a6>
 80043be:	2901      	cmp	r1, #1
 80043c0:	d03d      	beq.n	800443e <LL_TIM_OC_Init+0x9a>
 80043c2:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 80043c4:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 80043c6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80043ca:	f000 8136 	beq.w	800463a <LL_TIM_OC_Init+0x296>
 80043ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80043d2:	d1f6      	bne.n	80043c2 <LL_TIM_OC_Init+0x1e>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80043d4:	6a03      	ldr	r3, [r0, #32]
 80043d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043da:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80043dc:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80043de:	6d41      	ldr	r1, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80043e0:	6814      	ldr	r4, [r2, #0]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80043e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80043e6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80043ea:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80043ee:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80043f2:	6911      	ldr	r1, [r2, #16]
 80043f4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80043f8:	6851      	ldr	r1, [r2, #4]
 80043fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043fe:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004402:	49a8      	ldr	r1, [pc, #672]	; (80046a4 <LL_TIM_OC_Init+0x300>)
 8004404:	4288      	cmp	r0, r1
 8004406:	d00f      	beq.n	8004428 <LL_TIM_OC_Init+0x84>
 8004408:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800440c:	4288      	cmp	r0, r1
 800440e:	d00b      	beq.n	8004428 <LL_TIM_OC_Init+0x84>
 8004410:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8004414:	4288      	cmp	r0, r1
 8004416:	d007      	beq.n	8004428 <LL_TIM_OC_Init+0x84>
 8004418:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800441c:	4288      	cmp	r0, r1
 800441e:	d003      	beq.n	8004428 <LL_TIM_OC_Init+0x84>
 8004420:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004424:	4288      	cmp	r0, r1
 8004426:	d106      	bne.n	8004436 <LL_TIM_OC_Init+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004428:	6841      	ldr	r1, [r0, #4]
 800442a:	6995      	ldr	r5, [r2, #24]
 800442c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004430:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004434:	6041      	str	r1, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004436:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004438:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800443a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800443c:	e03e      	b.n	80044bc <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800443e:	6a03      	ldr	r3, [r0, #32]
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004446:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004448:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800444a:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800444c:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004450:	6815      	ldr	r5, [r2, #0]
 8004452:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004456:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800445a:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800445c:	6915      	ldr	r5, [r2, #16]
 800445e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004460:	6855      	ldr	r5, [r2, #4]
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	4d8e      	ldr	r5, [pc, #568]	; (80046a4 <LL_TIM_OC_Init+0x300>)
 800446a:	42a8      	cmp	r0, r5
 800446c:	d00f      	beq.n	800448e <LL_TIM_OC_Init+0xea>
 800446e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004472:	42a8      	cmp	r0, r5
 8004474:	d00b      	beq.n	800448e <LL_TIM_OC_Init+0xea>
 8004476:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800447a:	42a8      	cmp	r0, r5
 800447c:	d007      	beq.n	800448e <LL_TIM_OC_Init+0xea>
 800447e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004482:	42a8      	cmp	r0, r5
 8004484:	d003      	beq.n	800448e <LL_TIM_OC_Init+0xea>
 8004486:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800448a:	42a8      	cmp	r0, r5
 800448c:	d112      	bne.n	80044b4 <LL_TIM_OC_Init+0x110>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800448e:	6955      	ldr	r5, [r2, #20]
 8004490:	f023 0308 	bic.w	r3, r3, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004494:	f421 7180 	bic.w	r1, r1, #256	; 0x100
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004498:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800449c:	6895      	ldr	r5, [r2, #8]
 800449e:	f023 0304 	bic.w	r3, r3, #4
 80044a2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80044a6:	6995      	ldr	r5, [r2, #24]
 80044a8:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80044aa:	69d5      	ldr	r5, [r2, #28]
 80044ac:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80044b0:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044b4:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80044b6:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80044b8:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80044ba:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044bc:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80044be:	2000      	movs	r0, #0
 80044c0:	e780      	b.n	80043c4 <LL_TIM_OC_Init+0x20>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80044c2:	6a03      	ldr	r3, [r0, #32]
 80044c4:	f023 0310 	bic.w	r3, r3, #16
 80044c8:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80044ca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80044cc:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80044ce:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80044d0:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80044d4:	6815      	ldr	r5, [r2, #0]
 80044d6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80044da:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80044de:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80044e2:	6915      	ldr	r5, [r2, #16]
 80044e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80044e8:	6855      	ldr	r5, [r2, #4]
 80044ea:	f023 0310 	bic.w	r3, r3, #16
 80044ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f2:	4d6c      	ldr	r5, [pc, #432]	; (80046a4 <LL_TIM_OC_Init+0x300>)
 80044f4:	42a8      	cmp	r0, r5
 80044f6:	d00f      	beq.n	8004518 <LL_TIM_OC_Init+0x174>
 80044f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044fc:	42a8      	cmp	r0, r5
 80044fe:	d00b      	beq.n	8004518 <LL_TIM_OC_Init+0x174>
 8004500:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8004504:	42a8      	cmp	r0, r5
 8004506:	d007      	beq.n	8004518 <LL_TIM_OC_Init+0x174>
 8004508:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800450c:	42a8      	cmp	r0, r5
 800450e:	d003      	beq.n	8004518 <LL_TIM_OC_Init+0x174>
 8004510:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004514:	42a8      	cmp	r0, r5
 8004516:	d113      	bne.n	8004540 <LL_TIM_OC_Init+0x19c>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004518:	6955      	ldr	r5, [r2, #20]
 800451a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800451e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004522:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004526:	6895      	ldr	r5, [r2, #8]
 8004528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004530:	6995      	ldr	r5, [r2, #24]
 8004532:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004536:	69d5      	ldr	r5, [r2, #28]
 8004538:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800453c:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004540:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004542:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004544:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004546:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004548:	e7b8      	b.n	80044bc <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800454a:	6a03      	ldr	r3, [r0, #32]
 800454c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004550:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004552:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004554:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004556:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800455c:	6815      	ldr	r5, [r2, #0]
 800455e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004562:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004566:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004568:	6915      	ldr	r5, [r2, #16]
 800456a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800456e:	6855      	ldr	r5, [r2, #4]
 8004570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004574:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	4d4a      	ldr	r5, [pc, #296]	; (80046a4 <LL_TIM_OC_Init+0x300>)
 800457a:	42a8      	cmp	r0, r5
 800457c:	d00f      	beq.n	800459e <LL_TIM_OC_Init+0x1fa>
 800457e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004582:	42a8      	cmp	r0, r5
 8004584:	d00b      	beq.n	800459e <LL_TIM_OC_Init+0x1fa>
 8004586:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800458a:	42a8      	cmp	r0, r5
 800458c:	d007      	beq.n	800459e <LL_TIM_OC_Init+0x1fa>
 800458e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004592:	42a8      	cmp	r0, r5
 8004594:	d003      	beq.n	800459e <LL_TIM_OC_Init+0x1fa>
 8004596:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800459a:	42a8      	cmp	r0, r5
 800459c:	d113      	bne.n	80045c6 <LL_TIM_OC_Init+0x222>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800459e:	6955      	ldr	r5, [r2, #20]
 80045a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80045a4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80045a8:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80045ac:	6895      	ldr	r5, [r2, #8]
 80045ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b2:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80045b6:	6995      	ldr	r5, [r2, #24]
 80045b8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80045bc:	69d5      	ldr	r5, [r2, #28]
 80045be:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80045c2:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045c6:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045c8:	61c4      	str	r4, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80045ca:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80045cc:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045ce:	e775      	b.n	80044bc <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80045d0:	6a03      	ldr	r3, [r0, #32]
 80045d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d6:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045d8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80045da:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80045dc:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80045de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80045e2:	6815      	ldr	r5, [r2, #0]
 80045e4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80045e8:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80045ec:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80045f0:	6915      	ldr	r5, [r2, #16]
 80045f2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80045f6:	6855      	ldr	r5, [r2, #4]
 80045f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004600:	4d28      	ldr	r5, [pc, #160]	; (80046a4 <LL_TIM_OC_Init+0x300>)
 8004602:	42a8      	cmp	r0, r5
 8004604:	d00f      	beq.n	8004626 <LL_TIM_OC_Init+0x282>
 8004606:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800460a:	42a8      	cmp	r0, r5
 800460c:	d00b      	beq.n	8004626 <LL_TIM_OC_Init+0x282>
 800460e:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8004612:	42a8      	cmp	r0, r5
 8004614:	d007      	beq.n	8004626 <LL_TIM_OC_Init+0x282>
 8004616:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800461a:	42a8      	cmp	r0, r5
 800461c:	d003      	beq.n	8004626 <LL_TIM_OC_Init+0x282>
 800461e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004622:	42a8      	cmp	r0, r5
 8004624:	d104      	bne.n	8004630 <LL_TIM_OC_Init+0x28c>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004626:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 800462a:	6995      	ldr	r5, [r2, #24]
 800462c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004630:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004632:	61c1      	str	r1, [r0, #28]
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004634:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004636:	6402      	str	r2, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004638:	e740      	b.n	80044bc <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800463a:	6a03      	ldr	r3, [r0, #32]
 800463c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004640:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004642:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004644:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004646:	6814      	ldr	r4, [r2, #0]
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004648:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800464c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004650:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004654:	430c      	orrs	r4, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004656:	6911      	ldr	r1, [r2, #16]
 8004658:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800465c:	6851      	ldr	r1, [r2, #4]
 800465e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004662:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004666:	490f      	ldr	r1, [pc, #60]	; (80046a4 <LL_TIM_OC_Init+0x300>)
 8004668:	4288      	cmp	r0, r1
 800466a:	d00f      	beq.n	800468c <LL_TIM_OC_Init+0x2e8>
 800466c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004670:	4288      	cmp	r0, r1
 8004672:	d00b      	beq.n	800468c <LL_TIM_OC_Init+0x2e8>
 8004674:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8004678:	4288      	cmp	r0, r1
 800467a:	d007      	beq.n	800468c <LL_TIM_OC_Init+0x2e8>
 800467c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004680:	4288      	cmp	r0, r1
 8004682:	d003      	beq.n	800468c <LL_TIM_OC_Init+0x2e8>
 8004684:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004688:	4288      	cmp	r0, r1
 800468a:	d106      	bne.n	800469a <LL_TIM_OC_Init+0x2f6>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800468c:	6841      	ldr	r1, [r0, #4]
 800468e:	6995      	ldr	r5, [r2, #24]
 8004690:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004694:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8004698:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800469a:	6544      	str	r4, [r0, #84]	; 0x54
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800469c:	68d2      	ldr	r2, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800469e:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80046a0:	6582      	str	r2, [r0, #88]	; 0x58
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80046a2:	e70b      	b.n	80044bc <LL_TIM_OC_Init+0x118>
 80046a4:	40010000 	.word	0x40010000

080046a8 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80046a8:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80046aa:	7b0a      	ldrb	r2, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80046ac:	431a      	orrs	r2, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80046ae:	684b      	ldr	r3, [r1, #4]
 80046b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b4:	431a      	orrs	r2, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80046b6:	680b      	ldr	r3, [r1, #0]
 80046b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046bc:	431a      	orrs	r2, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80046be:	89cb      	ldrh	r3, [r1, #14]
 80046c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80046c6:	690a      	ldr	r2, [r1, #16]
 80046c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80046ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80046d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80046d6:	694a      	ldr	r2, [r1, #20]
 80046d8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80046dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 80046de:	698a      	ldr	r2, [r1, #24]
 80046e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e4:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80046e6:	4a0d      	ldr	r2, [pc, #52]	; (800471c <LL_TIM_BDTR_Init+0x74>)
 80046e8:	4290      	cmp	r0, r2
 80046ea:	d003      	beq.n	80046f4 <LL_TIM_BDTR_Init+0x4c>
 80046ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f0:	4290      	cmp	r0, r2
 80046f2:	d10f      	bne.n	8004714 <LL_TIM_BDTR_Init+0x6c>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80046f4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80046f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046fa:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80046fc:	69ca      	ldr	r2, [r1, #28]
 80046fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004702:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8004704:	6a0a      	ldr	r2, [r1, #32]
 8004706:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800470a:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 800470c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800470e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004712:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004714:	6443      	str	r3, [r0, #68]	; 0x44
}
 8004716:	2000      	movs	r0, #0
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000

08004720 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */



  /* Frequency cannot be equal to 0 */
  if (HCLK_Frequency == 0U)
 8004720:	4602      	mov	r2, r0
{
 8004722:	b510      	push	{r4, lr}
  if (HCLK_Frequency == 0U)
 8004724:	b178      	cbz	r0, 8004746 <LL_SetFlashLatency+0x26>
  return (uint32_t)(READ_BIT(PWR->D3CR, PWR_D3CR_VOS));
 8004726:	494f      	ldr	r1, [pc, #316]	; (8004864 <LL_SetFlashLatency+0x144>)
 8004728:	698b      	ldr	r3, [r1, #24]
    status = ERROR;
  }
  else
  {
#if (STM32H7_DEV_ID == 0x480UL) || (STM32H7_DEV_ID == 0x483UL)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE0)
 800472a:	f413 4340 	ands.w	r3, r3, #49152	; 0xc000
 800472e:	d13f      	bne.n	80047b0 <LL_SetFlashLatency+0x90>
        /* 176 < HCLK <= 220 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
      }
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY3_FREQ))
#elif (STM32H7_DEV_ID == 0x483UL)
      if((HCLK_Frequency > UTILS_SCALE0_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY3_FREQ))
 8004730:	484d      	ldr	r0, [pc, #308]	; (8004868 <LL_SetFlashLatency+0x148>)
 8004732:	4c4e      	ldr	r4, [pc, #312]	; (800486c <LL_SetFlashLatency+0x14c>)
 8004734:	4410      	add	r0, r2
 8004736:	42a0      	cmp	r0, r4
 8004738:	d207      	bcs.n	800474a <LL_SetFlashLatency+0x2a>
 800473a:	698b      	ldr	r3, [r1, #24]
 800473c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        /* 126 < HCLK <= 168 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
#else
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004740:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004744:	d151      	bne.n	80047ea <LL_SetFlashLatency+0xca>
    status = ERROR;
 8004746:	2001      	movs	r0, #1
 8004748:	e07c      	b.n	8004844 <LL_SetFlashLatency+0x124>
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY2_FREQ))
 800474a:	4849      	ldr	r0, [pc, #292]	; (8004870 <LL_SetFlashLatency+0x150>)
 800474c:	4c49      	ldr	r4, [pc, #292]	; (8004874 <LL_SetFlashLatency+0x154>)
 800474e:	4410      	add	r0, r2
 8004750:	42a0      	cmp	r0, r4
 8004752:	d946      	bls.n	80047e2 <LL_SetFlashLatency+0xc2>
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY1_FREQ))
 8004754:	4848      	ldr	r0, [pc, #288]	; (8004878 <LL_SetFlashLatency+0x158>)
 8004756:	4410      	add	r0, r2
 8004758:	42a0      	cmp	r0, r4
 800475a:	d944      	bls.n	80047e6 <LL_SetFlashLatency+0xc6>
      else if(HCLK_Frequency <= UTILS_SCALE0_LATENCY0_FREQ)
 800475c:	4847      	ldr	r0, [pc, #284]	; (800487c <LL_SetFlashLatency+0x15c>)
 800475e:	4282      	cmp	r2, r0
 8004760:	6988      	ldr	r0, [r1, #24]
 8004762:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 8004766:	d907      	bls.n	8004778 <LL_SetFlashLatency+0x58>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004768:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800476c:	d0eb      	beq.n	8004746 <LL_SetFlashLatency+0x26>
 800476e:	6989      	ldr	r1, [r1, #24]
        status = ERROR;
 8004770:	2001      	movs	r0, #1
 8004772:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8004776:	e04c      	b.n	8004812 <LL_SetFlashLatency+0xf2>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004778:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800477c:	d145      	bne.n	800480a <LL_SetFlashLatency+0xea>
#endif /* STM32H7_DEV_ID == 0x480UL || STM32H7_DEV_ID == 0x483UL */
      {
        /* 140 < HCLK <= 210 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 800477e:	4b40      	ldr	r3, [pc, #256]	; (8004880 <LL_SetFlashLatency+0x160>)
 8004780:	4413      	add	r3, r2
 8004782:	4a40      	ldr	r2, [pc, #256]	; (8004884 <LL_SetFlashLatency+0x164>)
 8004784:	4293      	cmp	r3, r2
 8004786:	bf8c      	ite	hi
 8004788:	2300      	movhi	r3, #0
 800478a:	2301      	movls	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800478c:	493e      	ldr	r1, [pc, #248]	; (8004888 <LL_SetFlashLatency+0x168>)
 800478e:	680a      	ldr	r2, [r1, #0]
 8004790:	f022 020f 	bic.w	r2, r2, #15
 8004794:	431a      	orrs	r2, r3
 8004796:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004798:	680a      	ldr	r2, [r1, #0]
 800479a:	f002 020f 	and.w	r2, r2, #15
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 800479e:	429a      	cmp	r2, r3
 80047a0:	d05e      	beq.n	8004860 <LL_SetFlashLatency+0x140>
 80047a2:	6808      	ldr	r0, [r1, #0]
 80047a4:	f000 000f 	and.w	r0, r0, #15

      if(getlatency != latency)
 80047a8:	1ac0      	subs	r0, r0, r3
 80047aa:	bf18      	it	ne
 80047ac:	2001      	movne	r0, #1
 80047ae:	e049      	b.n	8004844 <LL_SetFlashLatency+0x124>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80047b0:	2300      	movs	r3, #0
 80047b2:	482c      	ldr	r0, [pc, #176]	; (8004864 <LL_SetFlashLatency+0x144>)
 80047b4:	6981      	ldr	r1, [r0, #24]
 80047b6:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80047ba:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 80047be:	d12b      	bne.n	8004818 <LL_SetFlashLatency+0xf8>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
 80047c0:	4932      	ldr	r1, [pc, #200]	; (800488c <LL_SetFlashLatency+0x16c>)
 80047c2:	4833      	ldr	r0, [pc, #204]	; (8004890 <LL_SetFlashLatency+0x170>)
 80047c4:	4411      	add	r1, r2
 80047c6:	4281      	cmp	r1, r0
 80047c8:	d946      	bls.n	8004858 <LL_SetFlashLatency+0x138>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 80047ca:	492d      	ldr	r1, [pc, #180]	; (8004880 <LL_SetFlashLatency+0x160>)
 80047cc:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
 80047d0:	4411      	add	r1, r2
 80047d2:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
 80047d6:	4281      	cmp	r1, r0
 80047d8:	d940      	bls.n	800485c <LL_SetFlashLatency+0x13c>
      else if(HCLK_Frequency <= UTILS_SCALE1_LATENCY0_FREQ)
 80047da:	492e      	ldr	r1, [pc, #184]	; (8004894 <LL_SetFlashLatency+0x174>)
 80047dc:	428a      	cmp	r2, r1
 80047de:	d9d5      	bls.n	800478c <LL_SetFlashLatency+0x6c>
 80047e0:	e7b1      	b.n	8004746 <LL_SetFlashLatency+0x26>
        latency = LL_FLASH_LATENCY_2;
 80047e2:	2302      	movs	r3, #2
 80047e4:	e7e5      	b.n	80047b2 <LL_SetFlashLatency+0x92>
        latency = LL_FLASH_LATENCY_1;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e7e3      	b.n	80047b2 <LL_SetFlashLatency+0x92>
 80047ea:	698b      	ldr	r3, [r1, #24]
  ErrorStatus status = SUCCESS;
 80047ec:	2000      	movs	r0, #0
 80047ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        latency = LL_FLASH_LATENCY_3;
 80047f6:	f04f 0303 	mov.w	r3, #3
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80047fa:	d019      	beq.n	8004830 <LL_SetFlashLatency+0x110>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 80047fc:	4926      	ldr	r1, [pc, #152]	; (8004898 <LL_SetFlashLatency+0x178>)
 80047fe:	4c27      	ldr	r4, [pc, #156]	; (800489c <LL_SetFlashLatency+0x17c>)
 8004800:	4411      	add	r1, r2
 8004802:	42a1      	cmp	r1, r4
 8004804:	d926      	bls.n	8004854 <LL_SetFlashLatency+0x134>
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 8004806:	4926      	ldr	r1, [pc, #152]	; (80048a0 <LL_SetFlashLatency+0x180>)
 8004808:	e018      	b.n	800483c <LL_SetFlashLatency+0x11c>
 800480a:	6989      	ldr	r1, [r1, #24]
  ErrorStatus status = SUCCESS;
 800480c:	4618      	mov	r0, r3
 800480e:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8004812:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004816:	e7f0      	b.n	80047fa <LL_SetFlashLatency+0xda>
 8004818:	6981      	ldr	r1, [r0, #24]
 800481a:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 800481e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004822:	d110      	bne.n	8004846 <LL_SetFlashLatency+0x126>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY2_FREQ))
 8004824:	491f      	ldr	r1, [pc, #124]	; (80048a4 <LL_SetFlashLatency+0x184>)
 8004826:	4820      	ldr	r0, [pc, #128]	; (80048a8 <LL_SetFlashLatency+0x188>)
 8004828:	4411      	add	r1, r2
 800482a:	4281      	cmp	r1, r0
 800482c:	d914      	bls.n	8004858 <LL_SetFlashLatency+0x138>
 800482e:	2000      	movs	r0, #0
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY1_FREQ))
 8004830:	491e      	ldr	r1, [pc, #120]	; (80048ac <LL_SetFlashLatency+0x18c>)
 8004832:	4c1d      	ldr	r4, [pc, #116]	; (80048a8 <LL_SetFlashLatency+0x188>)
 8004834:	4411      	add	r1, r2
 8004836:	42a1      	cmp	r1, r4
 8004838:	d90c      	bls.n	8004854 <LL_SetFlashLatency+0x134>
      else if(HCLK_Frequency <= UTILS_SCALE2_LATENCY0_FREQ)
 800483a:	491d      	ldr	r1, [pc, #116]	; (80048b0 <LL_SetFlashLatency+0x190>)
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 800483c:	428a      	cmp	r2, r1
 800483e:	d882      	bhi.n	8004746 <LL_SetFlashLatency+0x26>
    if(status == SUCCESS)
 8004840:	2800      	cmp	r0, #0
 8004842:	d0a3      	beq.n	800478c <LL_SetFlashLatency+0x6c>
      }
    }
  }

  return status;
}
 8004844:	bd10      	pop	{r4, pc}
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY2_FREQ))
 8004846:	490c      	ldr	r1, [pc, #48]	; (8004878 <LL_SetFlashLatency+0x158>)
 8004848:	481a      	ldr	r0, [pc, #104]	; (80048b4 <LL_SetFlashLatency+0x194>)
 800484a:	4411      	add	r1, r2
 800484c:	4281      	cmp	r1, r0
 800484e:	d303      	bcc.n	8004858 <LL_SetFlashLatency+0x138>
 8004850:	2000      	movs	r0, #0
 8004852:	e7d3      	b.n	80047fc <LL_SetFlashLatency+0xdc>
        latency = LL_FLASH_LATENCY_1;
 8004854:	2301      	movs	r3, #1
 8004856:	e7f3      	b.n	8004840 <LL_SetFlashLatency+0x120>
        latency = LL_FLASH_LATENCY_2;
 8004858:	2302      	movs	r3, #2
 800485a:	e797      	b.n	800478c <LL_SetFlashLatency+0x6c>
        latency = LL_FLASH_LATENCY_1;
 800485c:	2301      	movs	r3, #1
 800485e:	e795      	b.n	800478c <LL_SetFlashLatency+0x6c>
 8004860:	4618      	mov	r0, r3
 8004862:	e7a1      	b.n	80047a8 <LL_SetFlashLatency+0x88>
 8004864:	58024800 	.word	0x58024800
 8004868:	f37ba77f 	.word	0xf37ba77f
 800486c:	03dfd240 	.word	0x03dfd240
 8004870:	f7a7c4ff 	.word	0xf7a7c4ff
 8004874:	042c1d7f 	.word	0x042c1d7f
 8004878:	fbd3e27f 	.word	0xfbd3e27f
 800487c:	042c1d80 	.word	0x042c1d80
 8004880:	fc01a93f 	.word	0xfc01a93f
 8004884:	03ef147f 	.word	0x03ef147f
 8004888:	52002000 	.word	0x52002000
 800488c:	f81294bf 	.word	0xf81294bf
 8004890:	03fe56bf 	.word	0x03fe56bf
 8004894:	03fe56c0 	.word	0x03fe56c0
 8004898:	fde9f13f 	.word	0xfde9f13f
 800489c:	02160ebf 	.word	0x02160ebf
 80048a0:	02160ec0 	.word	0x02160ec0
 80048a4:	fa0a1eff 	.word	0xfa0a1eff
 80048a8:	02faf07f 	.word	0x02faf07f
 80048ac:	fd050f7f 	.word	0xfd050f7f
 80048b0:	02faf080 	.word	0x02faf080
 80048b4:	00e4e1c0 	.word	0x00e4e1c0

080048b8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80048b8:	b508      	push	{r3, lr}
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <_DoInit+0x4c>)
 80048bc:	22a8      	movs	r2, #168	; 0xa8
 80048be:	2100      	movs	r1, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f003 fbfe 	bl	80080c2 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80048c6:	2203      	movs	r2, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80048c8:	490f      	ldr	r1, [pc, #60]	; (8004908 <_DoInit+0x50>)
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80048ca:	4603      	mov	r3, r0
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80048cc:	6102      	str	r2, [r0, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80048ce:	6142      	str	r2, [r0, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80048d0:	4a0e      	ldr	r2, [pc, #56]	; (800490c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
 80048d2:	6181      	str	r1, [r0, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80048d4:	61c2      	str	r2, [r0, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80048d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048da:	6202      	str	r2, [r0, #32]
  p->aUp[0].RdOff         = 0u;
 80048dc:	2200      	movs	r2, #0
 80048de:	6282      	str	r2, [r0, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80048e0:	6242      	str	r2, [r0, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80048e2:	62c2      	str	r2, [r0, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80048e4:	6601      	str	r1, [r0, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80048e6:	490a      	ldr	r1, [pc, #40]	; (8004910 <_DoInit+0x58>)
 80048e8:	6641      	str	r1, [r0, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80048ea:	2110      	movs	r1, #16
 80048ec:	6681      	str	r1, [r0, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80048ee:	4909      	ldr	r1, [pc, #36]	; (8004914 <_DoInit+0x5c>)
 80048f0:	6702      	str	r2, [r0, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80048f2:	66c2      	str	r2, [r0, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80048f4:	6742      	str	r2, [r0, #116]	; 0x74
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80048f6:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80048fa:	5498      	strb	r0, [r3, r2]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80048fc:	3201      	adds	r2, #1
 80048fe:	2a10      	cmp	r2, #16
 8004900:	d1f9      	bne.n	80048f6 <_DoInit+0x3e>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8004902:	bd08      	pop	{r3, pc}
 8004904:	24000410 	.word	0x24000410
 8004908:	0800a7c2 	.word	0x0800a7c2
 800490c:	24000010 	.word	0x24000010
 8004910:	24000000 	.word	0x24000000
 8004914:	0800a7db 	.word	0x0800a7db

08004918 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
 800491c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800499c <SEGGER_RTT_WriteSkipNoLock+0x84>
 8004920:	2618      	movs	r6, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004922:	4607      	mov	r7, r0
 8004924:	4689      	mov	r9, r1
  RdOff = pRing->RdOff;
 8004926:	fb06 8e00 	mla	lr, r6, r0, r8
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800492a:	4615      	mov	r5, r2
  WrOff = pRing->WrOff;
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800492c:	fb00 6606 	mla	r6, r0, r6, r6
  WrOff = pRing->WrOff;
 8004930:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004934:	f8de c028 	ldr.w	ip, [lr, #40]	; 0x28
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004938:	4446      	add	r6, r8
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 800493a:	45a4      	cmp	ip, r4
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800493c:	6873      	ldr	r3, [r6, #4]
 800493e:	eb03 0004 	add.w	r0, r3, r4
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 8004942:	d822      	bhi.n	800498a <SEGGER_RTT_WriteSkipNoLock+0x72>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 8004944:	f8de b020 	ldr.w	fp, [lr, #32]
 8004948:	ebab 0a04 	sub.w	sl, fp, r4
 800494c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
 8004950:	429a      	cmp	r2, r3
 8004952:	d803      	bhi.n	800495c <SEGGER_RTT_WriteSkipNoLock+0x44>
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
 8004954:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, NumBytes);
 8004956:	f003 fba6 	bl	80080a6 <memcpy>
      return 1;
 800495a:	e00f      	b.n	800497c <SEGGER_RTT_WriteSkipNoLock+0x64>
    Avail += RdOff;                                     // Space incl. wrap-around
 800495c:	4463      	add	r3, ip
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 800495e:	429a      	cmp	r2, r3
 8004960:	d819      	bhi.n	8004996 <SEGGER_RTT_WriteSkipNoLock+0x7e>
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 8004962:	442c      	add	r4, r5
 8004964:	4652      	mov	r2, sl
 8004966:	f003 fb9e 	bl	80080a6 <memcpy>
      if (NumBytes) {
 800496a:	ebb4 040b 	subs.w	r4, r4, fp
 800496e:	d005      	beq.n	800497c <SEGGER_RTT_WriteSkipNoLock+0x64>
        memcpy((void*)pDst, pData + Rem, NumBytes);
 8004970:	4622      	mov	r2, r4
 8004972:	eb09 010a 	add.w	r1, r9, sl
 8004976:	6870      	ldr	r0, [r6, #4]
 8004978:	f003 fb95 	bl	80080a6 <memcpy>
      pRing->WrOff = NumBytes;
 800497c:	2318      	movs	r3, #24
      return 1;
 800497e:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
 8004980:	fb03 8307 	mla	r3, r3, r7, r8
 8004984:	625c      	str	r4, [r3, #36]	; 0x24
    }
  }
  return 0;     // No space in buffer
}
 8004986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail = RdOff - WrOff - 1u;
 800498a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800498e:	ebac 0c04 	sub.w	ip, ip, r4
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 8004992:	4594      	cmp	ip, r2
 8004994:	d2de      	bcs.n	8004954 <SEGGER_RTT_WriteSkipNoLock+0x3c>
  return 0;     // No space in buffer
 8004996:	2000      	movs	r0, #0
 8004998:	e7f5      	b.n	8004986 <SEGGER_RTT_WriteSkipNoLock+0x6e>
 800499a:	bf00      	nop
 800499c:	24000410 	.word	0x24000410

080049a0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
 80049a0:	2218      	movs	r2, #24
 80049a2:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <SEGGER_RTT_HasDataUp+0x10>)
 80049a4:	fb02 3300 	mla	r3, r2, r0, r3
 80049a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
 80049aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80049ac:	1a80      	subs	r0, r0, r2
 80049ae:	4770      	bx	lr
 80049b0:	24000410 	.word	0x24000410

080049b4 <SEGGER_RTT_Init>:
  p = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
  unsigned i;
  int DoInit = 0;

  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80049b4:	4a09      	ldr	r2, [pc, #36]	; (80049dc <SEGGER_RTT_Init+0x28>)
 80049b6:	2300      	movs	r3, #0
    if (p->acID[i] != _aInitStr[sizeof(_aInitStr) - 2 - i]) { // Skip terminating \0 at the end of the array
 80049b8:	4909      	ldr	r1, [pc, #36]	; (80049e0 <SEGGER_RTT_Init+0x2c>)
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 80049ba:	b410      	push	{r4}
    if (p->acID[i] != _aInitStr[sizeof(_aInitStr) - 2 - i]) { // Skip terminating \0 at the end of the array
 80049bc:	5cc8      	ldrb	r0, [r1, r3]
 80049be:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80049c2:	4284      	cmp	r4, r0
 80049c4:	d105      	bne.n	80049d2 <SEGGER_RTT_Init+0x1e>
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80049c6:	3301      	adds	r3, #1
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d1f7      	bne.n	80049bc <SEGGER_RTT_Init+0x8>
#elif defined(CONFIG_SEGGER_RTT_INIT_MODE_WEAK_CHECK)
  INIT();
#else
  _DoInit();
#endif
}
 80049cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    _DoInit();
 80049d6:	f7ff bf6f 	b.w	80048b8 <_DoInit>
 80049da:	bf00      	nop
 80049dc:	0800a7db 	.word	0x0800a7db
 80049e0:	24000410 	.word	0x24000410

080049e4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const struct arch_esf *esf)
{
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
	z_impl_log_panic();
 80049e8:	f7fd fa08 	bl	8001dfc <z_impl_log_panic>
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 80049ec:	4803      	ldr	r0, [pc, #12]	; (80049fc <k_sys_fatal_error_handler+0x18>)
 80049ee:	2101      	movs	r1, #1
 80049f0:	4a03      	ldr	r2, [pc, #12]	; (8004a00 <k_sys_fatal_error_handler+0x1c>)
 80049f2:	f002 fdd7 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80049f6:	4620      	mov	r0, r4
 80049f8:	f003 f9fc 	bl	8007df4 <arch_system_halt>
 80049fc:	08008cf4 	.word	0x08008cf4
 8004a00:	0800a7dc 	.word	0x0800a7dc

08004a04 <z_fatal_error>:
	arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const struct arch_esf *esf)
{
 8004a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a08:	4604      	mov	r4, r0
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	460d      	mov	r5, r1
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a0e:	f3ef 8811 	mrs	r8, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8004a12:	2310      	movs	r3, #16
 8004a14:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004a18:	f3bf 8f6f 	isb	sy
	/* We can't allow this code to be preempted, but don't need to
	 * synchronize between CPUs, so an arch-layer lock is
	 * appropriate.
	 */
	unsigned int key = arch_irq_lock();
	struct k_thread *thread = IS_ENABLED(CONFIG_MULTITHREADING) ?
 8004a1c:	2804      	cmp	r0, #4
 8004a1e:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <z_fatal_error+0xc0>)
			_current : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8004a20:	46e9      	mov	r9, sp
 8004a22:	b08a      	sub	sp, #40	; 0x28
 8004a24:	bf98      	it	ls
 8004a26:	4b28      	ldrls	r3, [pc, #160]	; (8004ac8 <z_fatal_error+0xc4>)
	struct k_thread *thread = IS_ENABLED(CONFIG_MULTITHREADING) ?
 8004a28:	6896      	ldr	r6, [r2, #8]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8004a2a:	7c11      	ldrb	r1, [r2, #16]
 8004a2c:	466a      	mov	r2, sp
 8004a2e:	bf94      	ite	ls
 8004a30:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	struct k_thread *thread = IS_ENABLED(CONFIG_MULTITHREADING) ?
 8004a34:	4b25      	ldrhi	r3, [pc, #148]	; (8004acc <z_fatal_error+0xc8>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8004a36:	e9c2 3107 	strd	r3, r1, [r2, #28]
 8004a3a:	f240 3301 	movw	r3, #769	; 0x301
 8004a3e:	4824      	ldr	r0, [pc, #144]	; (8004ad0 <z_fatal_error+0xcc>)
 8004a40:	8493      	strh	r3, [r2, #36]	; 0x24
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <z_fatal_error+0xd0>)
 8004a44:	e9c2 0405 	strd	r0, r4, [r2, #20]
 8004a48:	f842 3f10 	str.w	r3, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8004a52:	4821      	ldr	r0, [pc, #132]	; (8004ad8 <z_fatal_error+0xd4>)
 8004a54:	f7fd faa2 	bl	8001f9c <z_impl_z_log_msg_static_create>
 8004a58:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8004a5a:	b145      	cbz	r5, 8004a6e <z_fatal_error+0x6a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const struct arch_esf *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8004a5c:	69eb      	ldr	r3, [r5, #28]
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	b123      	cbz	r3, 8004a6e <z_fatal_error+0x6a>
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 8004a64:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <z_fatal_error+0xd8>)
 8004a66:	2101      	movs	r1, #1
 8004a68:	481b      	ldr	r0, [pc, #108]	; (8004ad8 <z_fatal_error+0xd4>)
 8004a6a:	f002 fd9b 	bl	80075a4 <z_impl_z_log_msg_simple_create_0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8004a6e:	b12e      	cbz	r6, 8004a7c <z_fatal_error+0x78>
 8004a70:	4630      	mov	r0, r6
 8004a72:	f003 fa04 	bl	8007e7e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8004a76:	b108      	cbz	r0, 8004a7c <z_fatal_error+0x78>
 8004a78:	7803      	ldrb	r3, [r0, #0]
 8004a7a:	b903      	cbnz	r3, 8004a7e <z_fatal_error+0x7a>
		thread_name = "unknown";
 8004a7c:	4818      	ldr	r0, [pc, #96]	; (8004ae0 <z_fatal_error+0xdc>)
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif /* CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		LOG_ERR("Current thread: %p (%s)", thread, thread_name_get(thread));
 8004a7e:	46e9      	mov	r9, sp
 8004a80:	b08a      	sub	sp, #40	; 0x28
 8004a82:	466a      	mov	r2, sp
 8004a84:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <z_fatal_error+0xe0>)
 8004a86:	61d0      	str	r0, [r2, #28]
 8004a88:	e9c2 3605 	strd	r3, r6, [r2, #20]
 8004a8c:	f240 3301 	movw	r3, #769	; 0x301
 8004a90:	8413      	strh	r3, [r2, #32]
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <z_fatal_error+0xe4>)
 8004a94:	f842 3f10 	str.w	r3, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8004a9e:	480e      	ldr	r0, [pc, #56]	; (8004ad8 <z_fatal_error+0xd4>)
 8004aa0:	f7fd fa7c 	bl	8001f9c <z_impl_z_log_msg_static_create>
	}

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	46cd      	mov	sp, r9
 8004aaa:	f7ff ff9b 	bl	80049e4 <k_sys_fatal_error_handler>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004aae:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("isb 0xF":::"memory");
 8004ab2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f7fe f8d6 	bl	8002c68 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	bf00      	nop
 8004ac4:	24000fec 	.word	0x24000fec
 8004ac8:	08009c48 	.word	0x08009c48
 8004acc:	0800a7eb 	.word	0x0800a7eb
 8004ad0:	0800a801 	.word	0x0800a801
 8004ad4:	01000005 	.word	0x01000005
 8004ad8:	08008cf4 	.word	0x08008cf4
 8004adc:	0800a829 	.word	0x0800a829
 8004ae0:	0800a7f9 	.word	0x0800a7f9
 8004ae4:	0800a84a 	.word	0x0800a84a
 8004ae8:	01000004 	.word	0x01000004

08004aec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
 8004aec:	b538      	push	{r3, r4, r5, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <z_sys_init_run_level+0x28>)
 8004af0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004af4:	3001      	adds	r0, #1
 8004af6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8004afa:	42a5      	cmp	r5, r4
 8004afc:	d800      	bhi.n	8004b00 <z_sys_init_run_level+0x14>
		} else {
			result = entry->init_fn.sys();
		}
		sys_trace_sys_init_exit(entry, level, result);
	}
}
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
		if (dev != NULL) {
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	b123      	cbz	r3, 8004b0e <z_sys_init_run_level+0x22>
			result = do_device_init(entry);
 8004b04:	4620      	mov	r0, r4
 8004b06:	f003 f97d 	bl	8007e04 <do_device_init>
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004b0a:	3408      	adds	r4, #8
 8004b0c:	e7f5      	b.n	8004afa <z_sys_init_run_level+0xe>
			result = entry->init_fn.sys();
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	4798      	blx	r3
 8004b12:	e7fa      	b.n	8004b0a <z_sys_init_run_level+0x1e>
 8004b14:	08009c5c 	.word	0x08009c5c

08004b18 <bg_thread_main>:
	 * may perform memory management tasks (except for
	 * k_mem_map_phys_bare() which is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <bg_thread_main+0xb0>)
 8004b1a:	2201      	movs	r2, #1

#if CONFIG_IRQ_OFFLOAD
	arch_irq_offload_init();
#endif
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8004b1c:	2003      	movs	r0, #3
{
 8004b1e:	b570      	push	{r4, r5, r6, lr}
 8004b20:	4c2a      	ldr	r4, [pc, #168]	; (8004bcc <bg_thread_main+0xb4>)
 8004b22:	b086      	sub	sp, #24
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
 8004b24:	4d2a      	ldr	r5, [pc, #168]	; (8004bd0 <bg_thread_main+0xb8>)
	z_sys_post_kernel = true;
 8004b26:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8004b28:	f7ff ffe0 	bl	8004aec <z_sys_init_run_level>
#endif

#if defined(CONFIG_STACK_POINTER_RANDOM) && (CONFIG_STACK_POINTER_RANDOM != 0)
	z_stack_adjust_initialized = 1;
#endif /* CONFIG_STACK_POINTER_RANDOM */
	boot_banner();
 8004b2c:	f000 ff04 	bl	8005938 <boot_banner>

	void z_init_static(void);
	z_init_static();
 8004b30:	f003 f984 	bl	8007e3c <z_init_static>

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8004b34:	2004      	movs	r0, #4
 8004b36:	f7ff ffd9 	bl	8004aec <z_sys_init_run_level>
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
 8004b3a:	4626      	mov	r6, r4
 8004b3c:	3430      	adds	r4, #48	; 0x30
 8004b3e:	42ae      	cmp	r6, r5
 8004b40:	d310      	bcc.n	8004b64 <bg_thread_main+0x4c>
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
 8004b42:	4c22      	ldr	r4, [pc, #136]	; (8004bcc <bg_thread_main+0xb4>)
	k_sched_lock();
 8004b44:	f000 fafa 	bl	800513c <k_sched_lock>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8004b48:	4e22      	ldr	r6, [pc, #136]	; (8004bd4 <bg_thread_main+0xbc>)
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
 8004b4a:	42ac      	cmp	r4, r5
 8004b4c:	d326      	bcc.n	8004b9c <bg_thread_main+0x84>
	k_sched_unlock();
 8004b4e:	f000 fb09 	bl	8005164 <k_sched_unlock>
	char **argv = prepare_main_args(&argc);
	(void)main(argc, argv);
#else
	extern int main(void);

	(void)main();
 8004b52:	f002 f8c5 	bl	8006ce0 <main>
 * Exceptions raised by this thread may be recoverable.
 * (This is the default tag for a thread.)
 */
static inline void z_thread_essential_clear(struct k_thread *thread)
{
	thread->base.user_options &= ~K_ESSENTIAL;
 8004b56:	4a20      	ldr	r2, [pc, #128]	; (8004bd8 <bg_thread_main+0xc0>)
 8004b58:	7b13      	ldrb	r3, [r2, #12]
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
 8004b5e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif /* CONFIG_COVERAGE_DUMP */
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8004b60:	b006      	add	sp, #24
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
 8004b64:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8004b68:	9305      	str	r3, [sp, #20]
 8004b6a:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8004b6e:	9304      	str	r3, [sp, #16]
 8004b70:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8004b74:	9303      	str	r3, [sp, #12]
 8004b76:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8004b7a:	9302      	str	r3, [sp, #8]
 8004b7c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8004b8c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8004b90:	f000 f930 	bl	8004df4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8004b94:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8004b98:	655e      	str	r6, [r3, #84]	; 0x54
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
 8004b9a:	e7ce      	b.n	8004b3a <bg_thread_main+0x22>
		k_timeout_t init_delay = Z_THREAD_INIT_DELAY(thread_data);
 8004b9c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
		if (!K_TIMEOUT_EQ(init_delay, K_FOREVER)) {
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba4:	bf08      	it	eq
 8004ba6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8004baa:	d005      	beq.n	8004bb8 <bg_thread_main+0xa0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8004bac:	ea52 0103 	orrs.w	r1, r2, r3
			thread_schedule_new(thread_data->init_thread,
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	d103      	bne.n	8004bbc <bg_thread_main+0xa4>
	z_impl_k_wakeup(thread);
 8004bb4:	f000 fb96 	bl	80052e4 <z_impl_k_wakeup>
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
 8004bb8:	3430      	adds	r4, #48	; 0x30
 8004bba:	e7c6      	b.n	8004b4a <bg_thread_main+0x32>
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	3018      	adds	r0, #24
 8004bc0:	f000 fd2a 	bl	8005618 <z_add_timeout>
 8004bc4:	e7f8      	b.n	8004bb8 <bg_thread_main+0xa0>
 8004bc6:	bf00      	nop
 8004bc8:	24001039 	.word	0x24001039
 8004bcc:	08008c40 	.word	0x08008c40
 8004bd0:	08008c40 	.word	0x08008c40
 8004bd4:	08007f71 	.word	0x08007f71
 8004bd8:	24000c00 	.word	0x24000c00

08004bdc <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8004bdc:	4806      	ldr	r0, [pc, #24]	; (8004bf8 <z_bss_zero+0x1c>)
 8004bde:	2100      	movs	r1, #0
 8004be0:	4a06      	ldr	r2, [pc, #24]	; (8004bfc <z_bss_zero+0x20>)
{
 8004be2:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8004be4:	1a12      	subs	r2, r2, r0
 8004be6:	f003 f925 	bl	8007e34 <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
 8004bea:	4805      	ldr	r0, [pc, #20]	; (8004c00 <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
 8004bec:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <z_bss_zero+0x28>)
 8004bee:	2100      	movs	r1, #0
 8004bf0:	1a12      	subs	r2, r2, r0
 8004bf2:	f003 f91f 	bl	8007e34 <z_early_memset>
}
 8004bf6:	bd08      	pop	{r3, pc}
 8004bf8:	24000630 	.word	0x24000630
 8004bfc:	2400103c 	.word	0x2400103c
 8004c00:	20000000 	.word	0x20000000
 8004c04:	20000000 	.word	0x20000000

08004c08 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif /* CONFIG_SMP */
}

void z_init_cpu(int id)
{
 8004c08:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 8004c0a:	23c0      	movs	r3, #192	; 0xc0
 8004c0c:	4e14      	ldr	r6, [pc, #80]	; (8004c60 <z_init_cpu+0x58>)
{
 8004c0e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8004c10:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 8004c12:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 8004c16:	2300      	movs	r3, #0
			  stack_size, idle, &_kernel.cpus[i],
 8004c18:	4d12      	ldr	r5, [pc, #72]	; (8004c64 <z_init_cpu+0x5c>)
{
 8004c1a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	4912      	ldr	r1, [pc, #72]	; (8004c68 <z_init_cpu+0x60>)
 8004c20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c24:	220f      	movs	r2, #15
 8004c26:	eb01 2140 	add.w	r1, r1, r0, lsl #9
 8004c2a:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  stack_size, idle, &_kernel.cpus[i],
 8004c2e:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
 8004c30:	f44f 72c0 	mov.w	r2, #384	; 0x180
			  stack_size, idle, &_kernel.cpus[i],
 8004c34:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <z_init_cpu+0x64>)
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	9500      	str	r5, [sp, #0]
 8004c3e:	f000 f8d9 	bl	8004df4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SLEEPING;
 8004c42:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(K_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8004c44:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <z_init_cpu+0x68>)
 8004c46:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8004c4a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].id = id;
 8004c4c:	742c      	strb	r4, [r5, #16]
 8004c4e:	7373      	strb	r3, [r6, #13]
		(K_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8004c50:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8004c54:	fb04 3303 	mla	r3, r4, r3, r3
 8004c58:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
 8004c5a:	606b      	str	r3, [r5, #4]
	k_obj_core_stats_register(K_OBJ_CORE(&_kernel.cpus[id]),
				  _kernel.cpus[id].usage,
				  sizeof(struct k_cycle_stats));
#endif
#endif
}
 8004c5c:	b006      	add	sp, #24
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	24000b40 	.word	0x24000b40
 8004c64:	24000fec 	.word	0x24000fec
 8004c68:	24001c80 	.word	0x24001c80
 8004c6c:	08007e3f 	.word	0x08007e3f
 8004c70:	24001400 	.word	0x24001400

08004c74 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8004c74:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7ff ff38 	bl	8004aec <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp = (uint32_t)(K_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <z_cstart+0xac>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004c7e:	f383 8808 	msr	MSP, r3
 8004c82:	4d28      	ldr	r5, [pc, #160]	; (8004d24 <z_cstart+0xb0>)
 8004c84:	2400      	movs	r4, #0
 8004c86:	23f0      	movs	r3, #240	; 0xf0
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8004c88:	4f27      	ldr	r7, [pc, #156]	; (8004d28 <z_cstart+0xb4>)
 8004c8a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8004c8e:	77ec      	strb	r4, [r5, #31]
 8004c90:	762c      	strb	r4, [r5, #24]
 8004c92:	766c      	strb	r4, [r5, #25]
 8004c94:	76ac      	strb	r4, [r5, #26]
 8004c96:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |=
 8004c9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c9c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004ca0:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8004ca2:	f7fd ffb5 	bl	8002c10 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8004ca6:	f7fe f951 	bl	8002f4c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk | SCB_CFSR_MEMFAULTSR_Msk | SCB_CFSR_BUSFAULTSR_Msk;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cae:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8004cb0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8004cb2:	f7fe fa2b 	bl	800310c <z_arm_mpu_init>
	_kernel.ready_q.cache = &z_main_thread;
 8004cb6:	4d1d      	ldr	r5, [pc, #116]	; (8004d2c <z_cstart+0xb8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8004cb8:	f7fe f96c 	bl	8002f94 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 8004cbc:	f7fd f80e 	bl	8001cdc <log_core_init>

#if defined(CONFIG_MULTITHREADING)
	z_dummy_thread_init(&_thread_dummy);
 8004cc0:	481b      	ldr	r0, [pc, #108]	; (8004d30 <z_cstart+0xbc>)
 8004cc2:	f000 f911 	bl	8004ee8 <z_dummy_thread_init>
#endif /* CONFIG_MULTITHREADING */
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8004cc6:	f003 f889 	bl	8007ddc <z_device_state_init>

#if CONFIG_SOC_EARLY_INIT_HOOK
	soc_early_init_hook();
 8004cca:	f7fc fea7 	bl	8001a1c <soc_early_init_hook>
#endif
#if CONFIG_BOARD_EARLY_INIT_HOOK
	board_early_init_hook();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8004cce:	2001      	movs	r0, #1
 8004cd0:	f7ff ff0c 	bl	8004aec <z_sys_init_run_level>
#if defined(CONFIG_SMP)
	arch_smp_init();
#endif
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8004cd4:	2002      	movs	r0, #2
 8004cd6:	f7ff ff09 	bl	8004aec <z_sys_init_run_level>
	z_sched_init();
 8004cda:	f000 fa77 	bl	80051cc <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
 8004cde:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <z_cstart+0xc0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8004ce0:	4915      	ldr	r1, [pc, #84]	; (8004d38 <z_cstart+0xc4>)
 8004ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
	_kernel.ready_q.cache = &z_main_thread;
 8004ce6:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8004ce8:	4628      	mov	r0, r5
 8004cea:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <z_cstart+0xc8>)
 8004cec:	9400      	str	r4, [sp, #0]
 8004cee:	9305      	str	r3, [sp, #20]
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004cf6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	f000 f87a 	bl	8004df4 <z_setup_new_thread>
 8004d00:	7b6a      	ldrb	r2, [r5, #13]
 8004d02:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
 8004d04:	4628      	mov	r0, r5
 8004d06:	f022 0204 	bic.w	r2, r2, #4
 8004d0a:	736a      	strb	r2, [r5, #13]
 8004d0c:	f003 f8f3 	bl	8007ef6 <z_ready_thread>
	z_init_cpu(0);
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7ff ff79 	bl	8004c08 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8004d16:	463a      	mov	r2, r7
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f7fe f8ea 	bl	8002ef4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8004d20:	24001c80 	.word	0x24001c80
 8004d24:	e000ed00 	.word	0xe000ed00
 8004d28:	08004b19 	.word	0x08004b19
 8004d2c:	24000c00 	.word	0x24000c00
 8004d30:	24000cc0 	.word	0x24000cc0
 8004d34:	24000fec 	.word	0x24000fec
 8004d38:	24001e80 	.word	0x24001e80
 8004d3c:	08009f6f 	.word	0x08009f6f

08004d40 <z_impl_k_sem_give>:
	return false;
#endif /* CONFIG_POLL */
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8004d40:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d42:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8004d46:	2310      	movs	r3, #16
 8004d48:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004d4c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8004d50:	6804      	ldr	r4, [r0, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004d52:	42a0      	cmp	r0, r4
 8004d54:	d01a      	beq.n	8004d8c <z_impl_k_sem_give+0x4c>
	__ASSERT_EVAL(, int key = arch_irq_lock(); arch_irq_unlock(key),
		      !arch_irq_unlocked(key), "");

	LOCK_SCHED_SPINLOCK {
		thread = _priq_wait_best(&wait_q->waitq);
		if (unlikely(thread != NULL)) {
 8004d56:	b1cc      	cbz	r4, 8004d8c <z_impl_k_sem_give+0x4c>
	node->next = NULL;
 8004d58:	2500      	movs	r5, #0
}

static inline void z_abort_thread_timeout(struct k_thread *thread)
{
	z_abort_timeout(&thread->base.timeout);
 8004d5a:	f104 0018 	add.w	r0, r4, #24
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8004d5e:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
 8004d62:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8004d64:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 8004d66:	7b63      	ldrb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8004d68:	60a5      	str	r5, [r4, #8]
 8004d6a:	f023 0302 	bic.w	r3, r3, #2
	node->prev = NULL;
 8004d6e:	e9c4 5500 	strd	r5, r5, [r4]
 8004d72:	7363      	strb	r3, [r4, #13]
 8004d74:	f003 f948 	bl	8008008 <z_abort_timeout>

	thread = z_unpend_first_thread(&sem->wait_q);

	if (unlikely(thread != NULL)) {
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8004d78:	4620      	mov	r0, r4
#endif /* CONFIG_SOC_PER_CORE_INIT_HOOK */
}

static ALWAYS_INLINE void arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8004d7a:	67a5      	str	r5, [r4, #120]	; 0x78
 8004d7c:	f003 f8bb 	bl	8007ef6 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (unlikely(resched)) {
		z_reschedule(&lock, key);
 8004d80:	4631      	mov	r1, r6
 8004d82:	4808      	ldr	r0, [pc, #32]	; (8004da4 <z_impl_k_sem_give+0x64>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8004d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 8004d88:	f000 b9b2 	b.w	80050f0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8004d8c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	bf18      	it	ne
 8004d94:	3301      	addne	r3, #1
 8004d96:	6083      	str	r3, [r0, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004d98:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 8004d9c:	f3bf 8f6f 	isb	sy
}
 8004da0:	bd70      	pop	{r4, r5, r6, pc}
 8004da2:	bf00      	nop
 8004da4:	2400103a 	.word	0x2400103a

08004da8 <z_impl_k_sem_take>:
}
#include <zephyr/syscalls/k_sem_give_mrsh.c>
#endif /* CONFIG_USERSPACE */

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8004da8:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004daa:	f3ef 8111 	mrs	r1, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8004dae:	2410      	movs	r4, #16
 8004db0:	f384 8812 	msr	BASEPRI_MAX, r4
  __ASM volatile ("isb 0xF":::"memory");
 8004db4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8004db8:	6884      	ldr	r4, [r0, #8]
 8004dba:	b144      	cbz	r4, 8004dce <z_impl_k_sem_take+0x26>
		sem->count--;
 8004dbc:	3c01      	subs	r4, #1
 8004dbe:	6084      	str	r4, [r0, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004dc0:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("isb 0xF":::"memory");
 8004dc4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8004dc8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8004dca:	b002      	add	sp, #8
 8004dcc:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8004dce:	ea52 0403 	orrs.w	r4, r2, r3
 8004dd2:	d106      	bne.n	8004de2 <z_impl_k_sem_take+0x3a>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004dd4:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("isb 0xF":::"memory");
 8004dd8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8004ddc:	f06f 000f 	mvn.w	r0, #15
 8004de0:	e7f3      	b.n	8004dca <z_impl_k_sem_take+0x22>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8004de2:	e9cd 2300 	strd	r2, r3, [sp]
 8004de6:	4602      	mov	r2, r0
 8004de8:	4801      	ldr	r0, [pc, #4]	; (8004df0 <z_impl_k_sem_take+0x48>)
 8004dea:	f000 f955 	bl	8005098 <z_pend_curr>
	return ret;
 8004dee:	e7ec      	b.n	8004dca <z_impl_k_sem_take+0x22>
 8004df0:	2400103a 	.word	0x2400103a

08004df4 <z_setup_new_thread>:
		stack_buf_size = stack_obj_size - K_THREAD_STACK_RESERVED;
	} else
#endif /* CONFIG_USERSPACE */
	{
		/* Object cannot host a user mode thread */
		stack_obj_size = K_KERNEL_STACK_LEN(stack_size);
 8004df4:	3207      	adds	r2, #7
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8004df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		stack_obj_size = K_KERNEL_STACK_LEN(stack_size);
 8004dfa:	f022 0207 	bic.w	r2, r2, #7
{
 8004dfe:	b085      	sub	sp, #20
 8004e00:	460e      	mov	r6, r1
 8004e02:	461f      	mov	r7, r3
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8004e04:	9910      	ldr	r1, [sp, #64]	; 0x40
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8004e06:	f100 0358 	add.w	r3, r0, #88	; 0x58
		stack_obj_size = K_KERNEL_STACK_LEN(stack_size);
 8004e0a:	32ff      	adds	r2, #255	; 0xff
{
 8004e0c:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
 8004e0e:	7301      	strb	r1, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8004e10:	2104      	movs	r1, #4
		stack_obj_size = K_KERNEL_STACK_LEN(stack_size);
 8004e12:	f022 027f 	bic.w	r2, r2, #127	; 0x7f

/** @} */

static inline char *K_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8004e16:	f106 0980 	add.w	r9, r6, #128	; 0x80
	thread_base->thread_state = (uint8_t)initial_state;
 8004e1a:	7341      	strb	r1, [r0, #13]
		if (K_KERNEL_STACK_RESERVED > stack_obj_size) {
 8004e1c:	2a7f      	cmp	r2, #127	; 0x7f
		stack_buf_size = stack_obj_size - K_KERNEL_STACK_RESERVED;
 8004e1e:	f1a2 0880 	sub.w	r8, r2, #128	; 0x80
	list->tail = (sys_dnode_t *)list;
 8004e22:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	6083      	str	r3, [r0, #8]

	thread_base->prio = priority;
 8004e2c:	980f      	ldr	r0, [sp, #60]	; 0x3c

	thread_base->sched_locked = 0U;
 8004e2e:	73e3      	strb	r3, [r4, #15]
	thread_base->prio = priority;
 8004e30:	73a0      	strb	r0, [r4, #14]
	node->prev = NULL;
 8004e32:	e9c4 3306 	strd	r3, r3, [r4, #24]
		if (K_KERNEL_STACK_RESERVED > stack_obj_size) {
 8004e36:	d805      	bhi.n	8004e44 <z_setup_new_thread+0x50>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004e38:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004e3c:	f3bf 8f6f 	isb	sy
			k_panic();
 8004e40:	4608      	mov	r0, r1
 8004e42:	df02      	svc	2
	stack_ptr = (char *)stack + stack_obj_size;
 8004e44:	18b5      	adds	r5, r6, r2
	delta += arch_tls_stack_setup(new_thread, stack_ptr);
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f7fd fc8f 	bl	800276c <arch_tls_stack_setup>
	delta = ROUND_UP(delta, ARCH_STACK_PTR_ALIGN);
 8004e4e:	3007      	adds	r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e52:	4631      	mov	r1, r6
	delta = ROUND_UP(delta, ARCH_STACK_PTR_ALIGN);
 8004e54:	f020 0007 	bic.w	r0, r0, #7
	new_thread->stack_info.size = stack_buf_size;
 8004e58:	e9c4 9818 	strd	r9, r8, [r4, #96]	; 0x60
	new_thread->stack_info.delta = delta;
 8004e5c:	66a0      	str	r0, [r4, #104]	; 0x68
	stack_ptr -= delta;
 8004e5e:	1a2d      	subs	r5, r5, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004e60:	9302      	str	r3, [sp, #8]
 8004e62:	4620      	mov	r0, r4
 8004e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e66:	462a      	mov	r2, r5
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	463b      	mov	r3, r7
 8004e70:	f7fd ffc2 	bl	8002df8 <arch_new_thread>
	new_thread->init_data = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	6563      	str	r3, [r4, #84]	; 0x54
	if (!_current) {
 8004e78:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <z_setup_new_thread+0x98>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	b103      	cbz	r3, 8004e80 <z_setup_new_thread+0x8c>
	new_thread->resource_pool = _current->resource_pool;
 8004e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
}
 8004e80:	4628      	mov	r0, r5
 8004e82:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004e84:	b005      	add	sp, #20
 8004e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e8a:	bf00      	nop
 8004e8c:	24000fec 	.word	0x24000fec

08004e90 <z_impl_k_thread_create>:
{
 8004e90:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8004e92:	2500      	movs	r5, #0
{
 8004e94:	b087      	sub	sp, #28
 8004e96:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8004e98:	9505      	str	r5, [sp, #20]
 8004e9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e9c:	9504      	str	r5, [sp, #16]
 8004e9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004ea0:	9503      	str	r5, [sp, #12]
 8004ea2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004ea4:	9502      	str	r5, [sp, #8]
 8004ea6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004ea8:	9501      	str	r5, [sp, #4]
 8004eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
 8004eac:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8004eb0:	9500      	str	r5, [sp, #0]
 8004eb2:	f7ff ff9f 	bl	8004df4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8004eb6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004eba:	bf08      	it	eq
 8004ebc:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 8004ec0:	d005      	beq.n	8004ece <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8004ec2:	ea56 0307 	orrs.w	r3, r6, r7
 8004ec6:	d105      	bne.n	8004ed4 <z_impl_k_thread_create+0x44>
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f000 fa0b 	bl	80052e4 <z_impl_k_wakeup>
}
 8004ece:	4620      	mov	r0, r4
 8004ed0:	b007      	add	sp, #28
 8004ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8004ed4:	463a      	mov	r2, r7
 8004ed6:	4633      	mov	r3, r6
 8004ed8:	4902      	ldr	r1, [pc, #8]	; (8004ee4 <z_impl_k_thread_create+0x54>)
 8004eda:	f104 0018 	add.w	r0, r4, #24
 8004ede:	f000 fb9b 	bl	8005618 <z_add_timeout>
 8004ee2:	e7f4      	b.n	8004ece <z_impl_k_thread_create+0x3e>
 8004ee4:	08007f71 	.word	0x08007f71

08004ee8 <z_dummy_thread_init>:
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif /* CONFIG_SCHED_CPU_MASK */
	dummy_thread->base.user_options = K_ESSENTIAL;
 8004ee8:	f240 1301 	movw	r3, #257	; 0x101
 8004eec:	8183      	strh	r3, [r0, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 8004eee:	2300      	movs	r3, #0
	dummy_thread->stack_info.size = 0U;
 8004ef0:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif /* CONFIG_USERSPACE */
#if (K_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 8004ef4:	66c3      	str	r3, [r0, #108]	; 0x6c

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif /* CONFIG_TIMESLICE_PER_THREAD */

	z_current_thread_set(dummy_thread);
 8004ef6:	4b01      	ldr	r3, [pc, #4]	; (8004efc <z_dummy_thread_init+0x14>)
 8004ef8:	6098      	str	r0, [r3, #8]
}
 8004efa:	4770      	bx	lr
 8004efc:	24000fec 	.word	0x24000fec

08004f00 <z_swap_irqlock>:
extern void z_arm_fatal_error(unsigned int reason, const struct arch_esf *esf);

static ALWAYS_INLINE int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8004f00:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <z_swap_irqlock+0x28>)
	_current->arch.swap_return_value = -EAGAIN;
 8004f02:	f06f 010a 	mvn.w	r1, #10
	_current->arch.basepri = key;
 8004f06:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = -EAGAIN;
 8004f08:	6799      	str	r1, [r3, #120]	; 0x78

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004f0a:	4908      	ldr	r1, [pc, #32]	; (8004f2c <z_swap_irqlock+0x2c>)
	_current->arch.basepri = key;
 8004f0c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004f0e:	684b      	ldr	r3, [r1, #4]
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004f16:	2300      	movs	r3, #0
 8004f18:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004f1c:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8004f20:	6893      	ldr	r3, [r2, #8]
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
	return ret;
}
 8004f22:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	24000fec 	.word	0x24000fec
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <ready_thread>:
	ARG_UNUSED(thread);
	return NULL;
}

static void ready_thread(struct k_thread *thread)
{
 8004f30:	b570      	push	{r4, r5, r6, lr}
#endif /* CONFIG_KERNEL_COHERENCE */

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8004f32:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8004f36:	7b43      	ldrb	r3, [r0, #13]
 8004f38:	2a00      	cmp	r2, #0
 8004f3a:	db36      	blt.n	8004faa <ready_thread+0x7a>
 8004f3c:	06d9      	lsls	r1, r3, #27
 8004f3e:	d134      	bne.n	8004faa <ready_thread+0x7a>
	return list->head == list;
 8004f40:	4c1b      	ldr	r4, [pc, #108]	; (8004fb0 <ready_thread+0x80>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8004f42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f46:	4622      	mov	r2, r4
 8004f48:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8004f4a:	6a21      	ldr	r1, [r4, #32]
	return list->head == list;
 8004f4c:	f852 3f1c 	ldr.w	r3, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d107      	bne.n	8004f64 <ready_thread+0x34>
	node->prev = tail;
 8004f54:	e9c0 2100 	strd	r2, r1, [r0]
	tail->next = node;
 8004f58:	6008      	str	r0, [r1, #0]
	list->tail = node;
 8004f5a:	6220      	str	r0, [r4, #32]
}
 8004f5c:	e011      	b.n	8004f82 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	d0f8      	beq.n	8004f54 <ready_thread+0x24>
 8004f62:	681b      	ldr	r3, [r3, #0]

static ALWAYS_INLINE void z_priq_dumb_add(sys_dlist_t *pq, struct k_thread *thread)
{
	struct k_thread *t;

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f5      	beq.n	8004f54 <ready_thread+0x24>
	int32_t b1 = thread_1->base.prio;
 8004f68:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8004f6c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8004f70:	42b5      	cmp	r5, r6
 8004f72:	d0f4      	beq.n	8004f5e <ready_thread+0x2e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004f74:	42ae      	cmp	r6, r5
 8004f76:	ddf2      	ble.n	8004f5e <ready_thread+0x2e>
	sys_dnode_t *const prev = successor->prev;
 8004f78:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8004f7a:	e9c0 3100 	strd	r3, r1, [r0]
	prev->next = node;
 8004f7e:	6008      	str	r0, [r1, #0]
	successor->prev = node;
 8004f80:	6058      	str	r0, [r3, #4]
	return list->head == list;
 8004f82:	69e5      	ldr	r5, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004f84:	4295      	cmp	r5, r2
 8004f86:	d000      	beq.n	8004f8a <ready_thread+0x5a>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8004f88:	b905      	cbnz	r5, 8004f8c <ready_thread+0x5c>
 8004f8a:	68e5      	ldr	r5, [r4, #12]
	}

	__ASSERT(_current != NULL, "");

	/* Or if we're pended/suspended/dummy (duh) */
	if (z_is_thread_prevented_from_running(_current)) {
 8004f8c:	68a3      	ldr	r3, [r4, #8]
 8004f8e:	7b5a      	ldrb	r2, [r3, #13]
 8004f90:	06d2      	lsls	r2, r2, #27
 8004f92:	d104      	bne.n	8004f9e <ready_thread+0x6e>
	}

	/* Otherwise we have to be running a preemptible thread or
	 * switching to a metairq
	 */
	if (thread_is_preemptible(_current) || thread_is_metairq(thread)) {
 8004f94:	89da      	ldrh	r2, [r3, #14]
 8004f96:	2a7f      	cmp	r2, #127	; 0x7f
 8004f98:	d901      	bls.n	8004f9e <ready_thread+0x6e>
	if (should_preempt(thread, preempt_ok)) {
 8004f9a:	69aa      	ldr	r2, [r5, #24]
 8004f9c:	b132      	cbz	r2, 8004fac <ready_thread+0x7c>
		if (thread != _current) {
 8004f9e:	42ab      	cmp	r3, r5
 8004fa0:	d002      	beq.n	8004fa8 <ready_thread+0x78>
			z_reset_time_slice(thread);
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f000 fa8a 	bl	80054bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8004fa8:	61a5      	str	r5, [r4, #24]
		queue_thread(thread);
		update_cache(0);

		flag_ipi(ipi_mask_create(thread));
	}
}
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
		_kernel.ready_q.cache = _current;
 8004fac:	61a3      	str	r3, [r4, #24]
}
 8004fae:	e7fc      	b.n	8004faa <ready_thread+0x7a>
 8004fb0:	24000fec 	.word	0x24000fec

08004fb4 <unready_thread>:
}
#include <zephyr/syscalls/k_thread_resume_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void unready_thread(struct k_thread *thread)
{
 8004fb4:	b538      	push	{r3, r4, r5, lr}
	if (z_is_thread_queued(thread)) {
 8004fb6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 8004fba:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8004fbc:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	da04      	bge.n	8004fcc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	7343      	strb	r3, [r0, #13]

static ALWAYS_INLINE void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	ARG_UNUSED(pq);

	sys_dlist_remove(&thread->base.qnode_dlist);
 8004fc8:	f002 ff5b 	bl	8007e82 <sys_dlist_remove>
		dequeue_thread(thread);
	}
	update_cache(thread == _current);
 8004fcc:	4d0d      	ldr	r5, [pc, #52]	; (8005004 <unready_thread+0x50>)
	return list->head == list;
 8004fce:	462a      	mov	r2, r5
 8004fd0:	68ab      	ldr	r3, [r5, #8]
 8004fd2:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004fd6:	4294      	cmp	r4, r2
 8004fd8:	d000      	beq.n	8004fdc <unready_thread+0x28>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8004fda:	b904      	cbnz	r4, 8004fde <unready_thread+0x2a>
 8004fdc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	d007      	beq.n	8004ff2 <unready_thread+0x3e>
	if (z_is_thread_prevented_from_running(_current)) {
 8004fe2:	7b5a      	ldrb	r2, [r3, #13]
 8004fe4:	06d2      	lsls	r2, r2, #27
 8004fe6:	d104      	bne.n	8004ff2 <unready_thread+0x3e>
	if (thread_is_preemptible(_current) || thread_is_metairq(thread)) {
 8004fe8:	89da      	ldrh	r2, [r3, #14]
 8004fea:	2a7f      	cmp	r2, #127	; 0x7f
 8004fec:	d901      	bls.n	8004ff2 <unready_thread+0x3e>
	if (should_preempt(thread, preempt_ok)) {
 8004fee:	69a2      	ldr	r2, [r4, #24]
 8004ff0:	b12a      	cbz	r2, 8004ffe <unready_thread+0x4a>
		if (thread != _current) {
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	d002      	beq.n	8004ffc <unready_thread+0x48>
			z_reset_time_slice(thread);
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 fa60 	bl	80054bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	61ab      	str	r3, [r5, #24]
}
 8005000:	bd38      	pop	{r3, r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	24000fec 	.word	0x24000fec

08005008 <move_thread_to_end_of_prio_q>:
{
 8005008:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800500a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 800500e:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8005010:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8005012:	2a00      	cmp	r2, #0
 8005014:	da04      	bge.n	8005020 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501a:	7343      	strb	r3, [r0, #13]
 800501c:	f002 ff31 	bl	8007e82 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8005020:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8005022:	4c1c      	ldr	r4, [pc, #112]	; (8005094 <move_thread_to_end_of_prio_q+0x8c>)
 8005024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005028:	4622      	mov	r2, r4
 800502a:	734b      	strb	r3, [r1, #13]
 800502c:	f852 3f1c 	ldr.w	r3, [r2, #28]!
	return (node == list->tail) ? NULL : node->next;
 8005030:	6a20      	ldr	r0, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005032:	4293      	cmp	r3, r2
 8005034:	d107      	bne.n	8005046 <move_thread_to_end_of_prio_q+0x3e>
	node->prev = tail;
 8005036:	e9c1 2000 	strd	r2, r0, [r1]
	tail->next = node;
 800503a:	6001      	str	r1, [r0, #0]
	list->tail = node;
 800503c:	6221      	str	r1, [r4, #32]
}
 800503e:	e011      	b.n	8005064 <move_thread_to_end_of_prio_q+0x5c>
	return (node == list->tail) ? NULL : node->next;
 8005040:	4298      	cmp	r0, r3
 8005042:	d0f8      	beq.n	8005036 <move_thread_to_end_of_prio_q+0x2e>
 8005044:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f5      	beq.n	8005036 <move_thread_to_end_of_prio_q+0x2e>
	int32_t b1 = thread_1->base.prio;
 800504a:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 800504e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8005052:	42b5      	cmp	r5, r6
 8005054:	d0f4      	beq.n	8005040 <move_thread_to_end_of_prio_q+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8005056:	42ae      	cmp	r6, r5
 8005058:	ddf2      	ble.n	8005040 <move_thread_to_end_of_prio_q+0x38>
	sys_dnode_t *const prev = successor->prev;
 800505a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 800505c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8005060:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8005062:	6059      	str	r1, [r3, #4]
	return list->head == list;
 8005064:	69e5      	ldr	r5, [r4, #28]
	update_cache(thread == _current);
 8005066:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005068:	4295      	cmp	r5, r2
 800506a:	d000      	beq.n	800506e <move_thread_to_end_of_prio_q+0x66>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800506c:	b905      	cbnz	r5, 8005070 <move_thread_to_end_of_prio_q+0x68>
 800506e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8005070:	428b      	cmp	r3, r1
 8005072:	d007      	beq.n	8005084 <move_thread_to_end_of_prio_q+0x7c>
	if (z_is_thread_prevented_from_running(_current)) {
 8005074:	7b5a      	ldrb	r2, [r3, #13]
 8005076:	06d2      	lsls	r2, r2, #27
 8005078:	d104      	bne.n	8005084 <move_thread_to_end_of_prio_q+0x7c>
	if (thread_is_preemptible(_current) || thread_is_metairq(thread)) {
 800507a:	89da      	ldrh	r2, [r3, #14]
 800507c:	2a7f      	cmp	r2, #127	; 0x7f
 800507e:	d901      	bls.n	8005084 <move_thread_to_end_of_prio_q+0x7c>
	if (should_preempt(thread, preempt_ok)) {
 8005080:	69aa      	ldr	r2, [r5, #24]
 8005082:	b12a      	cbz	r2, 8005090 <move_thread_to_end_of_prio_q+0x88>
		if (thread != _current) {
 8005084:	42ab      	cmp	r3, r5
 8005086:	d002      	beq.n	800508e <move_thread_to_end_of_prio_q+0x86>
			z_reset_time_slice(thread);
 8005088:	4628      	mov	r0, r5
 800508a:	f000 fa17 	bl	80054bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800508e:	462b      	mov	r3, r5
 8005090:	61a3      	str	r3, [r4, #24]
}
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	24000fec 	.word	0x24000fec

08005098 <z_pend_curr>:
}
#endif /* CONFIG_SYS_CLOCK_EXISTS */

int z_pend_curr(struct k_spinlock *lock, k_spinlock_key_t key,
	       _wait_q_t *wait_q, k_timeout_t timeout)
{
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <z_pend_curr+0x4c>)
{
 800509c:	460c      	mov	r4, r1
 800509e:	4611      	mov	r1, r2
	pending_current = _current;
 80050a0:	4a11      	ldr	r2, [pc, #68]	; (80050e8 <z_pend_curr+0x50>)
 80050a2:	6898      	ldr	r0, [r3, #8]
{
 80050a4:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
	pending_current = _current;
 80050a8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050aa:	f3ef 8211 	mrs	r2, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80050ae:	2210      	movs	r2, #16
 80050b0:	f382 8812 	msr	BASEPRI_MAX, r2
  __ASM volatile ("isb 0xF":::"memory");
 80050b4:	f3bf 8f6f 	isb	sy
	 * has similar code; the duplication is because it's a legacy
	 * API that doesn't expect to be called with scheduler lock
	 * held.
	 */
	(void) k_spin_lock(&_sched_spinlock);
	pend_locked(_current, wait_q, timeout);
 80050b8:	689d      	ldr	r5, [r3, #8]
	add_to_waitq_locked(thread, wait_q);
 80050ba:	4628      	mov	r0, r5
 80050bc:	f002 fef3 	bl	8007ea6 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80050c0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80050c4:	bf08      	it	eq
 80050c6:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 80050ca:	d006      	beq.n	80050da <z_pend_curr+0x42>
 80050cc:	463a      	mov	r2, r7
 80050ce:	4633      	mov	r3, r6
 80050d0:	4906      	ldr	r1, [pc, #24]	; (80050ec <z_pend_curr+0x54>)
 80050d2:	f105 0018 	add.w	r0, r5, #24
 80050d6:	f000 fa9f 	bl	8005618 <z_add_timeout>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
 80050da:	4620      	mov	r0, r4
	k_spin_release(lock);
	return z_swap(&_sched_spinlock, key);
}
 80050dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050e0:	f7ff bf0e 	b.w	8004f00 <z_swap_irqlock>
 80050e4:	24000fec 	.word	0x24000fec
 80050e8:	24001014 	.word	0x24001014
 80050ec:	08007f71 	.word	0x08007f71

080050f0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif /* CONFIG_SMP */

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80050f0:	b949      	cbnz	r1, 8005106 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f2:	f3ef 8005 	mrs	r0, IPSR
 80050f6:	b930      	cbnz	r0, 8005106 <z_reschedule+0x16>
	return true;
#else
	struct k_thread *new_thread;

	/* Check if the next ready thread is the same as the current thread */
	new_thread = _kernel.ready_q.cache;
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <z_reschedule+0x20>)
#endif /* CONFIG_SMP */
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d001      	beq.n	8005106 <z_reschedule+0x16>
 8005102:	f7ff befd 	b.w	8004f00 <z_swap_irqlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005106:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("isb 0xF":::"memory");
 800510a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 800510e:	4770      	bx	lr
 8005110:	24000fec 	.word	0x24000fec

08005114 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8005114:	4603      	mov	r3, r0
 8005116:	b948      	cbnz	r0, 800512c <z_reschedule_irqlock+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005118:	f3ef 8205 	mrs	r2, IPSR
 800511c:	b932      	cbnz	r2, 800512c <z_reschedule_irqlock+0x18>
	new_thread = _kernel.ready_q.cache;
 800511e:	4a06      	ldr	r2, [pc, #24]	; (8005138 <z_reschedule_irqlock+0x24>)

void z_reschedule_irqlock(uint32_t key)
{
	if (resched(key) && need_swap()) {
 8005120:	6991      	ldr	r1, [r2, #24]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	4291      	cmp	r1, r2
 8005126:	d001      	beq.n	800512c <z_reschedule_irqlock+0x18>
		z_swap_irqlock(key);
 8005128:	f7ff beea 	b.w	8004f00 <z_swap_irqlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800512c:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005130:	f3bf 8f6f 	isb	sy
	} else {
		irq_unlock(key);
		signal_pending_ipi();
	}
}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	24000fec 	.word	0x24000fec

0800513c <k_sched_lock>:
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800513c:	f3ef 8111 	mrs	r1, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8005140:	2310      	movs	r3, #16
 8005142:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005146:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <k_sched_lock+0x24>)
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	7bd3      	ldrb	r3, [r2, #15]
 8005150:	3b01      	subs	r3, #1
 8005152:	73d3      	strb	r3, [r2, #15]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005154:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("isb 0xF":::"memory");
 8005158:	f3bf 8f6f 	isb	sy
	K_SPINLOCK(&_sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	24000fec 	.word	0x24000fec

08005164 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8005164:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005166:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800516a:	2310      	movs	r3, #16
 800516c:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005170:	f3bf 8f6f 	isb	sy
	K_SPINLOCK(&_sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8005174:	4d14      	ldr	r5, [pc, #80]	; (80051c8 <k_sched_unlock+0x64>)
 8005176:	68ab      	ldr	r3, [r5, #8]
 8005178:	7bda      	ldrb	r2, [r3, #15]
 800517a:	3201      	adds	r2, #1
 800517c:	73da      	strb	r2, [r3, #15]
	return list->head == list;
 800517e:	462a      	mov	r2, r5
 8005180:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005184:	4294      	cmp	r4, r2
 8005186:	d000      	beq.n	800518a <k_sched_unlock+0x26>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8005188:	b904      	cbnz	r4, 800518c <k_sched_unlock+0x28>
 800518a:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800518c:	7b5a      	ldrb	r2, [r3, #13]
 800518e:	06d2      	lsls	r2, r2, #27
 8005190:	d104      	bne.n	800519c <k_sched_unlock+0x38>
	if (thread_is_preemptible(_current) || thread_is_metairq(thread)) {
 8005192:	89da      	ldrh	r2, [r3, #14]
 8005194:	2a7f      	cmp	r2, #127	; 0x7f
 8005196:	d901      	bls.n	800519c <k_sched_unlock+0x38>
	if (should_preempt(thread, preempt_ok)) {
 8005198:	69a2      	ldr	r2, [r4, #24]
 800519a:	b12a      	cbz	r2, 80051a8 <k_sched_unlock+0x44>
		if (thread != _current) {
 800519c:	42a3      	cmp	r3, r4
 800519e:	d002      	beq.n	80051a6 <k_sched_unlock+0x42>
			z_reset_time_slice(thread);
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 f98b 	bl	80054bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 80051a6:	4623      	mov	r3, r4
 80051a8:	61ab      	str	r3, [r5, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80051aa:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 80051ae:	f3bf 8f6f 	isb	sy
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051b2:	f3ef 8011 	mrs	r0, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80051b6:	2310      	movs	r3, #16
 80051b8:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80051bc:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 80051c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 80051c4:	f7ff bfa6 	b.w	8005114 <z_reschedule_irqlock>
 80051c8:	24000fec 	.word	0x24000fec

080051cc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80051cc:	4b02      	ldr	r3, [pc, #8]	; (80051d8 <z_sched_init+0xc>)
 80051ce:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 80051d2:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif /* CONFIG_SCHED_CPU_MASK_PIN_ONLY */
}
 80051d6:	4770      	bx	lr
 80051d8:	24000fec 	.word	0x24000fec

080051dc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80051dc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051de:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80051e2:	2310      	movs	r3, #16
 80051e4:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80051e8:	f3bf 8f6f 	isb	sy
static ALWAYS_INLINE void z_priq_dumb_yield(sys_dlist_t *pq)
{
#ifndef CONFIG_SMP
	sys_dnode_t *n;

	n = sys_dlist_peek_next_no_check(pq, &_current->base.qnode_dlist);
 80051ec:	4c1b      	ldr	r4, [pc, #108]	; (800525c <z_impl_k_yield+0x80>)
 80051ee:	68a1      	ldr	r1, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
 80051f0:	6a20      	ldr	r0, [r4, #32]
 80051f2:	680b      	ldr	r3, [r1, #0]
 80051f4:	4281      	cmp	r1, r0
 80051f6:	bf14      	ite	ne
 80051f8:	461a      	movne	r2, r3
 80051fa:	2200      	moveq	r2, #0
	sys_dnode_t *const prev = node->prev;
 80051fc:	6849      	ldr	r1, [r1, #4]
	prev->next = next;
 80051fe:	600b      	str	r3, [r1, #0]
	next->prev = prev;
 8005200:	6059      	str	r1, [r3, #4]
	 * to re-insert it.
	 */

	while (n != NULL) {
		t = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
		if (z_sched_prio_cmp(_current, t) > 0) {
 8005202:	68a3      	ldr	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
 8005204:	6a21      	ldr	r1, [r4, #32]
	while (n != NULL) {
 8005206:	b92a      	cbnz	r2, 8005214 <z_impl_k_yield+0x38>
	node->next = list;
 8005208:	4a15      	ldr	r2, [pc, #84]	; (8005260 <z_impl_k_yield+0x84>)
	node->prev = tail;
 800520a:	e9c3 2100 	strd	r2, r1, [r3]
	tail->next = node;
 800520e:	600b      	str	r3, [r1, #0]
	list->tail = node;
 8005210:	6223      	str	r3, [r4, #32]
}
 8005212:	e00c      	b.n	800522e <z_impl_k_yield+0x52>
	int32_t b1 = thread_1->base.prio;
 8005214:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8005218:	f992 500e 	ldrsb.w	r5, [r2, #14]
	if (b1 != b2) {
 800521c:	42a8      	cmp	r0, r5
 800521e:	d018      	beq.n	8005252 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(_current, t) > 0) {
 8005220:	4285      	cmp	r5, r0
 8005222:	dd16      	ble.n	8005252 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
 8005224:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8005226:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 800522a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 800522c:	6053      	str	r3, [r2, #4]
	return list->head == list;
 800522e:	69e5      	ldr	r5, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <z_impl_k_yield+0x84>)
 8005232:	429d      	cmp	r5, r3
 8005234:	d000      	beq.n	8005238 <z_impl_k_yield+0x5c>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8005236:	b905      	cbnz	r5, 800523a <z_impl_k_yield+0x5e>
 8005238:	68e5      	ldr	r5, [r4, #12]
		if (thread != _current) {
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	429d      	cmp	r5, r3
 800523e:	d002      	beq.n	8005246 <z_impl_k_yield+0x6a>
			z_reset_time_slice(thread);
 8005240:	4628      	mov	r0, r5
 8005242:	f000 f93b 	bl	80054bc <z_reset_time_slice>
 8005246:	4630      	mov	r0, r6
		_kernel.ready_q.cache = thread;
 8005248:	61a5      	str	r5, [r4, #24]

	runq_yield();

	update_cache(1);
	z_swap(&_sched_spinlock, key);
}
 800524a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800524e:	f7ff be57 	b.w	8004f00 <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
 8005252:	428a      	cmp	r2, r1
 8005254:	d0d8      	beq.n	8005208 <z_impl_k_yield+0x2c>
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	e7d5      	b.n	8005206 <z_impl_k_yield+0x2a>
 800525a:	bf00      	nop
 800525c:	24000fec 	.word	0x24000fec
 8005260:	24001008 	.word	0x24001008

08005264 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8005264:	ea50 0301 	orrs.w	r3, r0, r1
{
 8005268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526c:	4605      	mov	r5, r0
 800526e:	460e      	mov	r6, r1
	if (ticks == 0) {
 8005270:	d104      	bne.n	800527c <z_tick_sleep+0x18>
	z_impl_k_yield();
 8005272:	f7ff ffb3 	bl	80051dc <z_impl_k_yield>
		k_yield();
		return 0;
 8005276:	2000      	movs	r0, #0
	if (ticks > 0) {
		return ticks;
	}

	return 0;
}
 8005278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
 800527c:	1c83      	adds	r3, r0, #2
 800527e:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 8005282:	db24      	blt.n	80052ce <z_tick_sleep+0x6a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8005284:	f002 fee1 	bl	800804a <sys_clock_tick_get_32>
 8005288:	182c      	adds	r4, r5, r0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800528a:	f3ef 8811 	mrs	r8, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800528e:	2310      	movs	r3, #16
 8005290:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005294:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8005298:	4f0f      	ldr	r7, [pc, #60]	; (80052d8 <z_tick_sleep+0x74>)
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <z_tick_sleep+0x78>)
 800529c:	68b8      	ldr	r0, [r7, #8]
 800529e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 80052a0:	f7ff fe88 	bl	8004fb4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80052a4:	68b8      	ldr	r0, [r7, #8]
 80052a6:	462a      	mov	r2, r5
 80052a8:	490d      	ldr	r1, [pc, #52]	; (80052e0 <z_tick_sleep+0x7c>)
 80052aa:	4633      	mov	r3, r6
 80052ac:	3018      	adds	r0, #24
 80052ae:	f000 f9b3 	bl	8005618 <z_add_timeout>
	z_mark_thread_as_sleeping(_current);
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SLEEPING;
 80052b6:	7b53      	ldrb	r3, [r2, #13]
 80052b8:	f043 0304 	orr.w	r3, r3, #4
 80052bc:	7353      	strb	r3, [r2, #13]
 80052be:	f7ff fe1f 	bl	8004f00 <z_swap_irqlock>
	uint32_t left_ticks = expected_wakeup_ticks - sys_clock_tick_get_32();
 80052c2:	f002 fec2 	bl	800804a <sys_clock_tick_get_32>
 80052c6:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
 80052c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80052cc:	e7d4      	b.n	8005278 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 80052ce:	f06f 0401 	mvn.w	r4, #1
 80052d2:	1a24      	subs	r4, r4, r0
 80052d4:	e7d9      	b.n	800528a <z_tick_sleep+0x26>
 80052d6:	bf00      	nop
 80052d8:	24000fec 	.word	0x24000fec
 80052dc:	24001014 	.word	0x24001014
 80052e0:	08007f71 	.word	0x08007f71

080052e4 <z_impl_k_wakeup>:
}
#include <zephyr/syscalls/k_usleep_mrsh.c>
#endif /* CONFIG_USERSPACE */

void z_impl_k_wakeup(k_tid_t thread)
{
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052e8:	f3ef 8511 	mrs	r5, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80052ec:	2310      	movs	r3, #16
 80052ee:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80052f2:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, wakeup, thread);

	k_spinlock_key_t  key = k_spin_lock(&_sched_spinlock);

	if (z_is_thread_sleeping(thread)) {
 80052f6:	7b43      	ldrb	r3, [r0, #13]
 80052f8:	075b      	lsls	r3, r3, #29
 80052fa:	d50f      	bpl.n	800531c <z_impl_k_wakeup+0x38>
	z_abort_timeout(&thread->base.timeout);
 80052fc:	3018      	adds	r0, #24
 80052fe:	f002 fe83 	bl	8008008 <z_abort_timeout>
	thread->base.thread_state &= ~_THREAD_SLEEPING;
 8005302:	7b63      	ldrb	r3, [r4, #13]
		z_abort_thread_timeout(thread);
		z_mark_thread_as_not_sleeping(thread);
		ready_thread(thread);
 8005304:	4620      	mov	r0, r4
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	7363      	strb	r3, [r4, #13]
 800530c:	f7ff fe10 	bl	8004f30 <ready_thread>
		z_reschedule(&_sched_spinlock, key);
 8005310:	4629      	mov	r1, r5
 8005312:	4805      	ldr	r0, [pc, #20]	; (8005328 <z_impl_k_wakeup+0x44>)
	} else {
		k_spin_unlock(&_sched_spinlock, key);
	}
}
 8005314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&_sched_spinlock, key);
 8005318:	f7ff beea 	b.w	80050f0 <z_reschedule>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800531c:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("isb 0xF":::"memory");
 8005320:	f3bf 8f6f 	isb	sy
}
 8005324:	bd38      	pop	{r3, r4, r5, pc}
 8005326:	bf00      	nop
 8005328:	2400103a 	.word	0x2400103a

0800532c <z_impl_k_sched_current_thread_query>:
#endif /* CONFIG_USERSPACE */

k_tid_t z_impl_k_sched_current_thread_query(void)
{
	return _current;
}
 800532c:	4b01      	ldr	r3, [pc, #4]	; (8005334 <z_impl_k_sched_current_thread_query+0x8>)
 800532e:	6898      	ldr	r0, [r3, #8]
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	24000fec 	.word	0x24000fec

08005338 <z_thread_abort>:
		clear_halting(thread);
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	4604      	mov	r4, r0
	return (thread->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
 800533e:	7b07      	ldrb	r7, [r0, #12]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005340:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8005344:	2310      	movs	r3, #16
 8005346:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 800534a:	f3bf 8f6f 	isb	sy
	bool essential = z_is_thread_essential(thread);
	k_spinlock_key_t key = k_spin_lock(&_sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800534e:	7b43      	ldrb	r3, [r0, #13]
 8005350:	0719      	lsls	r1, r3, #28
 8005352:	d505      	bpl.n	8005360 <z_thread_abort+0x28>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005354:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 8005358:	f3bf 8f6f 	isb	sy

	if (essential) {
		__ASSERT(!essential, "aborted essential thread %p", thread);
		k_panic();
	}
}
 800535c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (z_is_thread_queued(thread)) {
 8005360:	09d9      	lsrs	r1, r3, #7
		thread->base.thread_state |= new_state;
 8005362:	f043 0208 	orr.w	r2, r3, #8
		if (z_is_thread_queued(thread)) {
 8005366:	d164      	bne.n	8005432 <z_thread_abort+0xfa>
		thread->base.thread_state |= new_state;
 8005368:	7342      	strb	r2, [r0, #13]
			if (thread->base.pended_on != NULL) {
 800536a:	68a3      	ldr	r3, [r4, #8]
 800536c:	b113      	cbz	r3, 8005374 <z_thread_abort+0x3c>
				unpend_thread_no_timeout(thread);
 800536e:	4620      	mov	r0, r4
 8005370:	f002 fd8f 	bl	8007e92 <unpend_thread_no_timeout>
 8005374:	f104 0018 	add.w	r0, r4, #24
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8005378:	f104 0858 	add.w	r8, r4, #88	; 0x58
 800537c:	f002 fe44 	bl	8008008 <z_abort_timeout>
	return list->head == list;
 8005380:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005382:	45a8      	cmp	r8, r5
 8005384:	d011      	beq.n	80053aa <z_thread_abort+0x72>
	thread->arch.swap_return_value = value;
 8005386:	f04f 0900 	mov.w	r9, #0
	for (thread = z_waitq_head(wait_q); thread != NULL; thread = z_waitq_head(wait_q)) {
 800538a:	b175      	cbz	r5, 80053aa <z_thread_abort+0x72>
		unpend_thread_no_timeout(thread);
 800538c:	4628      	mov	r0, r5
 800538e:	f002 fd80 	bl	8007e92 <unpend_thread_no_timeout>
 8005392:	f105 0018 	add.w	r0, r5, #24
 8005396:	f002 fe37 	bl	8008008 <z_abort_timeout>
		ready_thread(thread);
 800539a:	4628      	mov	r0, r5
 800539c:	f8c5 9078 	str.w	r9, [r5, #120]	; 0x78
 80053a0:	f7ff fdc6 	bl	8004f30 <ready_thread>
	return list->head == list;
 80053a4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80053a6:	45a8      	cmp	r8, r5
 80053a8:	d1ef      	bne.n	800538a <z_thread_abort+0x52>
			if (thread == _current && arch_is_in_isr()) {
 80053aa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800545c <z_thread_abort+0x124>
 80053ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80053b2:	429c      	cmp	r4, r3
 80053b4:	d145      	bne.n	8005442 <z_thread_abort+0x10a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b6:	f3ef 8905 	mrs	r9, IPSR
 80053ba:	f1b9 0900 	subs.w	r9, r9, #0
 80053be:	bf18      	it	ne
 80053c0:	f04f 0901 	movne.w	r9, #1
	return list->head == list;
 80053c4:	f8d8 501c 	ldr.w	r5, [r8, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <z_thread_abort+0x11c>)
 80053ca:	4295      	cmp	r5, r2
 80053cc:	d000      	beq.n	80053d0 <z_thread_abort+0x98>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80053ce:	b90d      	cbnz	r5, 80053d4 <z_thread_abort+0x9c>
 80053d0:	f8d8 500c 	ldr.w	r5, [r8, #12]
		if (thread != _current) {
 80053d4:	42ab      	cmp	r3, r5
 80053d6:	d002      	beq.n	80053de <z_thread_abort+0xa6>
			z_reset_time_slice(thread);
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 f86f 	bl	80054bc <z_reset_time_slice>
		arch_float_disable(thread);
 80053de:	4620      	mov	r0, r4
		_kernel.ready_q.cache = thread;
 80053e0:	f8c8 5018 	str.w	r5, [r8, #24]
		arch_float_disable(thread);
 80053e4:	f7fd fd62 	bl	8002eac <arch_float_disable>
		if (dummify && !IS_ENABLED(CONFIG_ARCH_POSIX)) {
 80053e8:	f1b9 0f00 	cmp.w	r9, #0
 80053ec:	d002      	beq.n	80053f4 <z_thread_abort+0xbc>
			z_dummy_thread_init(&_thread_dummy);
 80053ee:	481a      	ldr	r0, [pc, #104]	; (8005458 <z_thread_abort+0x120>)
 80053f0:	f7ff fd7a 	bl	8004ee8 <z_dummy_thread_init>
		if ((thread == _current) && !arch_is_in_isr()) {
 80053f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80053f8:	429c      	cmp	r4, r3
 80053fa:	d125      	bne.n	8005448 <z_thread_abort+0x110>
 80053fc:	f3ef 8305 	mrs	r3, IPSR
 8005400:	bb13      	cbnz	r3, 8005448 <z_thread_abort+0x110>
 8005402:	7b22      	ldrb	r2, [r4, #12]
			if (z_is_thread_essential(thread)) {
 8005404:	07d2      	lsls	r2, r2, #31
 8005406:	d506      	bpl.n	8005416 <z_thread_abort+0xde>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005408:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("isb 0xF":::"memory");
 800540c:	f3bf 8f6f 	isb	sy
				k_panic();
 8005410:	2304      	movs	r3, #4
 8005412:	4618      	mov	r0, r3
 8005414:	df02      	svc	2
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff fd72 	bl	8004f00 <z_swap_irqlock>
	if (essential) {
 800541c:	07fb      	lsls	r3, r7, #31
 800541e:	d59d      	bpl.n	800535c <z_thread_abort+0x24>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005420:	2300      	movs	r3, #0
 8005422:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005426:	f3bf 8f6f 	isb	sy
		k_panic();
 800542a:	2304      	movs	r3, #4
 800542c:	4618      	mov	r0, r3
 800542e:	df02      	svc	2
 8005430:	e794      	b.n	800535c <z_thread_abort+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005436:	f043 0308 	orr.w	r3, r3, #8
 800543a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800543c:	f002 fd21 	bl	8007e82 <sys_dlist_remove>
}
 8005440:	e793      	b.n	800536a <z_thread_abort+0x32>
	bool dummify = false;
 8005442:	f04f 0900 	mov.w	r9, #0
 8005446:	e7bd      	b.n	80053c4 <z_thread_abort+0x8c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005448:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	e7e4      	b.n	800541c <z_thread_abort+0xe4>
 8005452:	bf00      	nop
 8005454:	24001008 	.word	0x24001008
 8005458:	24000cc0 	.word	0x24000cc0
 800545c:	24000fec 	.word	0x24000fec

08005460 <slice_timeout>:
	return ret;
}

static void slice_timeout(struct _timeout *timeout)
{
	int cpu = ARRAY_INDEX(slice_timeouts, timeout);
 8005460:	4b04      	ldr	r3, [pc, #16]	; (8005474 <slice_timeout+0x14>)

	slice_expired[cpu] = true;
 8005462:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, timeout);
 8005464:	1ac0      	subs	r0, r0, r3
 8005466:	4b04      	ldr	r3, [pc, #16]	; (8005478 <slice_timeout+0x18>)
 8005468:	10c0      	asrs	r0, r0, #3
 800546a:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <slice_timeout+0x1c>)
 800546e:	541a      	strb	r2, [r3, r0]
	 * for a different CPU.
	 */
	if (cpu != _current_cpu->id) {
		flag_ipi(IPI_CPU_MASK(cpu));
	}
}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	24000d80 	.word	0x24000d80
 8005478:	aaaaaaab 	.word	0xaaaaaaab
 800547c:	2400103a 	.word	0x2400103a

08005480 <thread_is_sliceable>:
		&& !z_is_idle_thread_object(thread);
 8005480:	89c3      	ldrh	r3, [r0, #14]
 8005482:	2b7f      	cmp	r3, #127	; 0x7f
 8005484:	d812      	bhi.n	80054ac <thread_is_sliceable+0x2c>
	int ret = slice_ticks;
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <thread_is_sliceable+0x30>)
 8005488:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
 800548a:	b163      	cbz	r3, 80054a6 <thread_is_sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <thread_is_sliceable+0x34>)
 800548e:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	db09      	blt.n	80054ac <thread_is_sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
 8005498:	7b43      	ldrb	r3, [r0, #13]
 800549a:	06db      	lsls	r3, r3, #27
 800549c:	d106      	bne.n	80054ac <thread_is_sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <thread_is_sliceable+0x38>)
 80054a0:	1ac3      	subs	r3, r0, r3
 80054a2:	bf18      	it	ne
 80054a4:	2301      	movne	r3, #1
}
 80054a6:	f003 0001 	and.w	r0, r3, #1
 80054aa:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
 80054ac:	2300      	movs	r3, #0
 80054ae:	e7fa      	b.n	80054a6 <thread_is_sliceable+0x26>
 80054b0:	2400101c 	.word	0x2400101c
 80054b4:	24001018 	.word	0x24001018
 80054b8:	24000b40 	.word	0x24000b40

080054bc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *thread)
{
	int cpu = _current_cpu->id;
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <z_reset_time_slice+0x3c>)
{
 80054be:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 80054c0:	7c1e      	ldrb	r6, [r3, #16]
{
 80054c2:	4605      	mov	r5, r0

	z_abort_timeout(&slice_timeouts[cpu]);
 80054c4:	4c0d      	ldr	r4, [pc, #52]	; (80054fc <z_reset_time_slice+0x40>)
 80054c6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80054ca:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80054ce:	4620      	mov	r0, r4
 80054d0:	f002 fd9a 	bl	8008008 <z_abort_timeout>
	slice_expired[cpu] = false;
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <z_reset_time_slice+0x44>)
 80054d6:	2200      	movs	r2, #0
	if (thread_is_sliceable(thread)) {
 80054d8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
 80054da:	559a      	strb	r2, [r3, r6]
	if (thread_is_sliceable(thread)) {
 80054dc:	f7ff ffd0 	bl	8005480 <thread_is_sliceable>
 80054e0:	b148      	cbz	r0, 80054f6 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80054e4:	4620      	mov	r0, r4
 80054e6:	4908      	ldr	r1, [pc, #32]	; (8005508 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(thread) - 1));
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	3a01      	subs	r2, #1
	}
}
 80054ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80054f0:	17d3      	asrs	r3, r2, #31
 80054f2:	f000 b891 	b.w	8005618 <z_add_timeout>
}
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	24000fec 	.word	0x24000fec
 80054fc:	24000d80 	.word	0x24000d80
 8005500:	2400103a 	.word	0x2400103a
 8005504:	2400101c 	.word	0x2400101c
 8005508:	08005461 	.word	0x08005461

0800550c <z_time_slice>:
}
#endif

/* Called out of each timer interrupt */
void z_time_slice(void)
{
 800550c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800550e:	f3ef 8511 	mrs	r5, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8005512:	2310      	movs	r3, #16
 8005514:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005518:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&_sched_spinlock);
	struct k_thread *curr = _current;
 800551c:	4b10      	ldr	r3, [pc, #64]	; (8005560 <z_time_slice+0x54>)

#ifdef CONFIG_SWAP_NONATOMIC
	if (pending_current == curr) {
 800551e:	4a11      	ldr	r2, [pc, #68]	; (8005564 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
 8005520:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
 8005522:	6810      	ldr	r0, [r2, #0]
 8005524:	42a0      	cmp	r0, r4
 8005526:	d106      	bne.n	8005536 <z_time_slice+0x2a>
		}
#endif
		if (!z_is_thread_prevented_from_running(curr)) {
			move_thread_to_end_of_prio_q(curr);
		}
		z_reset_time_slice(curr);
 8005528:	f7ff ffc8 	bl	80054bc <z_reset_time_slice>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800552c:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("isb 0xF":::"memory");
 8005530:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&_sched_spinlock, key);
}
 8005534:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8005536:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && thread_is_sliceable(curr)) {
 8005538:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
 800553a:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && thread_is_sliceable(curr)) {
 800553c:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <z_time_slice+0x5c>)
 800553e:	5cd3      	ldrb	r3, [r2, r3]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f3      	beq.n	800552c <z_time_slice+0x20>
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff ff9b 	bl	8005480 <thread_is_sliceable>
 800554a:	2800      	cmp	r0, #0
 800554c:	d0ee      	beq.n	800552c <z_time_slice+0x20>
		if (!z_is_thread_prevented_from_running(curr)) {
 800554e:	7b63      	ldrb	r3, [r4, #13]
 8005550:	06db      	lsls	r3, r3, #27
 8005552:	d102      	bne.n	800555a <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
 8005554:	4620      	mov	r0, r4
 8005556:	f7ff fd57 	bl	8005008 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
 800555a:	4620      	mov	r0, r4
 800555c:	e7e4      	b.n	8005528 <z_time_slice+0x1c>
 800555e:	bf00      	nop
 8005560:	24000fec 	.word	0x24000fec
 8005564:	24001014 	.word	0x24001014
 8005568:	2400103a 	.word	0x2400103a

0800556c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 800556c:	480a      	ldr	r0, [pc, #40]	; (8005598 <z_data_copy+0x2c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 800556e:	4a0b      	ldr	r2, [pc, #44]	; (800559c <z_data_copy+0x30>)
 8005570:	490b      	ldr	r1, [pc, #44]	; (80055a0 <z_data_copy+0x34>)
 8005572:	1a12      	subs	r2, r2, r0
{
 8005574:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8005576:	f002 fc5f 	bl	8007e38 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_region_start, &__ramfunc_load_start,
		       __ramfunc_end - __ramfunc_region_start);
 800557a:	480a      	ldr	r0, [pc, #40]	; (80055a4 <z_data_copy+0x38>)
	z_early_memcpy(&__ramfunc_region_start, &__ramfunc_load_start,
 800557c:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <z_data_copy+0x3c>)
 800557e:	490b      	ldr	r1, [pc, #44]	; (80055ac <z_data_copy+0x40>)
 8005580:	1a12      	subs	r2, r2, r0
 8005582:	f002 fc59 	bl	8007e38 <z_early_memcpy>
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS_OKAY(DT_CHOSEN(zephyr_dtcm))
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
 8005586:	480a      	ldr	r0, [pc, #40]	; (80055b0 <z_data_copy+0x44>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 8005588:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <z_data_copy+0x48>)
 800558a:	490b      	ldr	r1, [pc, #44]	; (80055b8 <z_data_copy+0x4c>)
 800558c:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_REQUIRES_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800558e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 8005592:	f002 bc51 	b.w	8007e38 <z_early_memcpy>
 8005596:	bf00      	nop
 8005598:	24000500 	.word	0x24000500
 800559c:	24000630 	.word	0x24000630
 80055a0:	0800a940 	.word	0x0800a940
 80055a4:	240004b8 	.word	0x240004b8
 80055a8:	24000500 	.word	0x24000500
 80055ac:	0800a8f8 	.word	0x0800a8f8
 80055b0:	20000000 	.word	0x20000000
 80055b4:	20000000 	.word	0x20000000
 80055b8:	0800aa70 	.word	0x0800aa70

080055bc <first>:
	return list->head == list;
 80055bc:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <first+0xc>)
 80055be:	6818      	ldr	r0, [r3, #0]
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return (t == NULL) ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 80055c0:	4298      	cmp	r0, r3
 80055c2:	bf08      	it	eq
 80055c4:	2000      	moveq	r0, #0
 80055c6:	4770      	bx	lr
 80055c8:	2400058c 	.word	0x2400058c

080055cc <elapsed>:
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <elapsed+0x10>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	b90b      	cbnz	r3, 80055d6 <elapsed+0xa>
 80055d2:	f7fe bd59 	b.w	8004088 <sys_clock_elapsed>
}
 80055d6:	2000      	movs	r0, #0
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	24001020 	.word	0x24001020

080055e0 <remove_timeout>:
{
 80055e0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80055e2:	b170      	cbz	r0, 8005602 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <remove_timeout+0x34>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4298      	cmp	r0, r3
 80055ea:	d00a      	beq.n	8005602 <remove_timeout+0x22>
 80055ec:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 80055ee:	b143      	cbz	r3, 8005602 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80055f0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80055f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80055f8:	1912      	adds	r2, r2, r4
 80055fa:	eb41 0105 	adc.w	r1, r1, r5
 80055fe:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
 8005602:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8005606:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8005608:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800560a:	2300      	movs	r3, #0
	node->prev = NULL;
 800560c:	e9c0 3300 	strd	r3, r3, [r0]
}
 8005610:	bd30      	pop	{r4, r5, pc}
 8005612:	bf00      	nop
 8005614:	2400058c 	.word	0x2400058c

08005618 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561c:	bf08      	it	eq
 800561e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8005622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005624:	4604      	mov	r4, r0
 8005626:	461d      	mov	r5, r3
 8005628:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800562a:	d05a      	beq.n	80056e2 <z_add_timeout+0xca>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif /* CONFIG_KERNEL_COHERENCE */

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800562c:	6081      	str	r1, [r0, #8]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800562e:	f3ef 8711 	mrs	r7, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8005632:	2310      	movs	r3, #16
 8005634:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005638:	f3bf 8f6f 	isb	sy

	K_SPINLOCK(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800563c:	3201      	adds	r2, #1
 800563e:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 8005642:	da21      	bge.n	8005688 <z_add_timeout+0x70>
		    (Z_TICK_ABS(timeout.ticks) >= 0)) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8005644:	492c      	ldr	r1, [pc, #176]	; (80056f8 <z_add_timeout+0xe0>)
 8005646:	f06f 0301 	mvn.w	r3, #1
 800564a:	e9d1 2000 	ldrd	r2, r0, [r1]
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005654:	eb62 0000 	sbc.w	r0, r2, r0
 8005658:	1b9e      	subs	r6, r3, r6
 800565a:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 800565e:	2e01      	cmp	r6, #1
 8005660:	f170 0300 	sbcs.w	r3, r0, #0
 8005664:	da01      	bge.n	800566a <z_add_timeout+0x52>
 8005666:	2601      	movs	r6, #1
 8005668:	2000      	movs	r0, #0
 800566a:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return (node == list->tail) ? NULL : node->next;
 800566e:	4e23      	ldr	r6, [pc, #140]	; (80056fc <z_add_timeout+0xe4>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8005670:	f7ff ffa4 	bl	80055bc <first>
 8005674:	4684      	mov	ip, r0
 8005676:	6870      	ldr	r0, [r6, #4]
 8005678:	f1bc 0f00 	cmp.w	ip, #0
 800567c:	d10d      	bne.n	800569a <z_add_timeout+0x82>
	node->prev = tail;
 800567e:	e9c4 6000 	strd	r6, r0, [r4]
	tail->next = node;
 8005682:	6004      	str	r4, [r0, #0]
	list->tail = node;
 8005684:	6074      	str	r4, [r6, #4]
}
 8005686:	e01c      	b.n	80056c2 <z_add_timeout+0xaa>
			to->dticks = timeout.ticks + 1 + elapsed();
 8005688:	f7ff ffa0 	bl	80055cc <elapsed>
 800568c:	3601      	adds	r6, #1
 800568e:	f145 0500 	adc.w	r5, r5, #0
 8005692:	1836      	adds	r6, r6, r0
 8005694:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8005698:	e7e7      	b.n	800566a <z_add_timeout+0x52>
			if (t->dticks > to->dticks) {
 800569a:	e9dc 2504 	ldrd	r2, r5, [ip, #16]
 800569e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 80056a2:	4293      	cmp	r3, r2
 80056a4:	eb71 0e05 	sbcs.w	lr, r1, r5
 80056a8:	da1c      	bge.n	80056e4 <z_add_timeout+0xcc>
				t->dticks -= to->dticks;
 80056aa:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 80056ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80056b0:	eb65 0501 	sbc.w	r5, r5, r1
 80056b4:	e9cc 2504 	strd	r2, r5, [ip, #16]
	node->next = successor;
 80056b8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 80056bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80056be:	f8cc 4004 	str.w	r4, [ip, #4]

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first() && announce_remaining == 0) {
 80056c2:	f7ff ff7b 	bl	80055bc <first>
 80056c6:	4284      	cmp	r4, r0
 80056c8:	d107      	bne.n	80056da <z_add_timeout+0xc2>
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <z_add_timeout+0xe8>)
 80056cc:	681c      	ldr	r4, [r3, #0]
 80056ce:	b924      	cbnz	r4, 80056da <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
 80056d0:	f002 fc81 	bl	8007fd6 <next_timeout>
 80056d4:	4621      	mov	r1, r4
 80056d6:	f7fe fc59 	bl	8003f8c <sys_clock_set_timeout>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80056da:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("isb 0xF":::"memory");
 80056de:	f3bf 8f6f 	isb	sy
		}
	}
}
 80056e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	eb61 0105 	sbc.w	r1, r1, r5
	return (node == list->tail) ? NULL : node->next;
 80056ea:	4584      	cmp	ip, r0
 80056ec:	e9c4 3104 	strd	r3, r1, [r4, #16]
 80056f0:	d0c5      	beq.n	800567e <z_add_timeout+0x66>
 80056f2:	f8dc c000 	ldr.w	ip, [ip]
 80056f6:	e7bf      	b.n	8005678 <z_add_timeout+0x60>
 80056f8:	24000d98 	.word	0x24000d98
 80056fc:	2400058c 	.word	0x2400058c
 8005700:	24001020 	.word	0x24001020

08005704 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 8005704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005708:	f3ef 8511 	mrs	r5, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800570c:	2310      	movs	r3, #16
 800570e:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005712:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8005716:	4f25      	ldr	r7, [pc, #148]	; (80057ac <sys_clock_announce+0xa8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 8005718:	f04f 0800 	mov.w	r8, #0
		curr_tick += dt;
 800571c:	4e24      	ldr	r6, [pc, #144]	; (80057b0 <sys_clock_announce+0xac>)
		t->dticks = 0;
 800571e:	f04f 0900 	mov.w	r9, #0
	announce_remaining = ticks;
 8005722:	6038      	str	r0, [r7, #0]
	for (t = first();
 8005724:	f7ff ff4a 	bl	80055bc <first>
	     (t != NULL) && (t->dticks <= announce_remaining);
 8005728:	683b      	ldr	r3, [r7, #0]
		curr_tick += dt;
 800572a:	e9d6 1e00 	ldrd	r1, lr, [r6]
 800572e:	ea4f 7ce3 	mov.w	ip, r3, asr #31
	     (t != NULL) && (t->dticks <= announce_remaining);
 8005732:	b150      	cbz	r0, 800574a <sys_clock_announce+0x46>
 8005734:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
 8005738:	42a3      	cmp	r3, r4
 800573a:	eb7c 0a02 	sbcs.w	sl, ip, r2
 800573e:	da19      	bge.n	8005774 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8005740:	1ae4      	subs	r4, r4, r3
 8005742:	eb62 020c 	sbc.w	r2, r2, ip
 8005746:	e9c0 4204 	strd	r4, r2, [r0, #16]
	}

	curr_tick += announce_remaining;
 800574a:	185b      	adds	r3, r3, r1
	announce_remaining = 0;
 800574c:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 8005750:	eb4e 020c 	adc.w	r2, lr, ip
	announce_remaining = 0;
 8005754:	603c      	str	r4, [r7, #0]
	curr_tick += announce_remaining;
 8005756:	e9c6 3200 	strd	r3, r2, [r6]

	sys_clock_set_timeout(next_timeout(), false);
 800575a:	f002 fc3c 	bl	8007fd6 <next_timeout>
 800575e:	4621      	mov	r1, r4
 8005760:	f7fe fc14 	bl	8003f8c <sys_clock_set_timeout>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005764:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("isb 0xF":::"memory");
 8005768:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif /* CONFIG_TIMESLICING */
}
 800576c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_time_slice();
 8005770:	f7ff becc 	b.w	800550c <z_time_slice>
		curr_tick += dt;
 8005774:	1861      	adds	r1, r4, r1
 8005776:	eb4e 73e4 	adc.w	r3, lr, r4, asr #31
		t->dticks = 0;
 800577a:	e9c0 8904 	strd	r8, r9, [r0, #16]
		curr_tick += dt;
 800577e:	e9c6 1300 	strd	r1, r3, [r6]
		remove_timeout(t);
 8005782:	f7ff ff2d 	bl	80055e0 <remove_timeout>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005786:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("isb 0xF":::"memory");
 800578a:	f3bf 8f6f 	isb	sy
		t->fn(t);
 800578e:	6883      	ldr	r3, [r0, #8]
 8005790:	4798      	blx	r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005792:	f3ef 8511 	mrs	r5, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8005796:	2310      	movs	r3, #16
 8005798:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 800579c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	1b1b      	subs	r3, r3, r4
 80057a4:	603b      	str	r3, [r7, #0]
	     t = first()) {
 80057a6:	f7ff ff09 	bl	80055bc <first>
 80057aa:	e7bd      	b.n	8005728 <sys_clock_announce+0x24>
 80057ac:	24001020 	.word	0x24001020
 80057b0:	24000d98 	.word	0x24000d98

080057b4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80057b4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057b6:	f3ef 8411 	mrs	r4, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80057ba:	2310      	movs	r3, #16
 80057bc:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80057c0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	K_SPINLOCK(&timeout_lock) {
		t = curr_tick + elapsed();
 80057c4:	f7ff ff02 	bl	80055cc <elapsed>
 80057c8:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <sys_clock_tick_get+0x2c>)
 80057ca:	4603      	mov	r3, r0
 80057cc:	e9d2 0100 	ldrd	r0, r1, [r2]
 80057d0:	1818      	adds	r0, r3, r0
 80057d2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80057d6:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("isb 0xF":::"memory");
 80057da:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 80057de:	bd10      	pop	{r4, pc}
 80057e0:	24000d98 	.word	0x24000d98

080057e4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057e8:	f3ef 8711 	mrs	r7, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80057ec:	2310      	movs	r3, #16
 80057ee:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80057f2:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
 80057f6:	6802      	ldr	r2, [r0, #0]
 80057f8:	b122      	cbz	r2, 8005804 <z_timer_expiration_handler+0x20>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80057fa:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("isb 0xF":::"memory");
 80057fe:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 8005802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8005804:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
 8005808:	1c58      	adds	r0, r3, #1
 800580a:	f146 0100 	adc.w	r1, r6, #0
 800580e:	2802      	cmp	r0, #2
 8005810:	f171 0100 	sbcs.w	r1, r1, #0
 8005814:	d327      	bcc.n	8005866 <z_timer_expiration_handler+0x82>
		next.ticks = MAX(next.ticks - 1, 0);
 8005816:	2b01      	cmp	r3, #1
 8005818:	f176 0100 	sbcs.w	r1, r6, #0
 800581c:	bfbc      	itt	lt
 800581e:	2301      	movlt	r3, #1
 8005820:	4616      	movlt	r6, r2
 8005822:	1e5d      	subs	r5, r3, #1
 8005824:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
 8005828:	f002 fc13 	bl	8008052 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
 800582c:	3001      	adds	r0, #1
 800582e:	f141 0100 	adc.w	r1, r1, #0
 8005832:	1940      	adds	r0, r0, r5
 8005834:	eb46 0101 	adc.w	r1, r6, r1
 8005838:	2801      	cmp	r0, #1
 800583a:	f171 0100 	sbcs.w	r1, r1, #0
 800583e:	db39      	blt.n	80058b4 <z_timer_expiration_handler+0xd0>
 8005840:	f002 fc07 	bl	8008052 <z_impl_k_uptime_ticks>
 8005844:	3001      	adds	r0, #1
 8005846:	f06f 0201 	mvn.w	r2, #1
 800584a:	f141 0100 	adc.w	r1, r1, #0
 800584e:	1940      	adds	r0, r0, r5
 8005850:	eb46 0301 	adc.w	r3, r6, r1
 8005854:	1a12      	subs	r2, r2, r0
 8005856:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800585a:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800585e:	4918      	ldr	r1, [pc, #96]	; (80058c0 <z_timer_expiration_handler+0xdc>)
 8005860:	4620      	mov	r0, r4
 8005862:	f7ff fed9 	bl	8005618 <z_add_timeout>
	timer->status += 1U;
 8005866:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005868:	3301      	adds	r3, #1
 800586a:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
 800586c:	6a23      	ldr	r3, [r4, #32]
 800586e:	b16b      	cbz	r3, 800588c <z_timer_expiration_handler+0xa8>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005870:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("isb 0xF":::"memory");
 8005874:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
 8005878:	6a23      	ldr	r3, [r4, #32]
 800587a:	4620      	mov	r0, r4
 800587c:	4798      	blx	r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800587e:	f3ef 8711 	mrs	r7, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8005882:	2310      	movs	r3, #16
 8005884:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005888:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800588c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005890:	42a5      	cmp	r5, r4
 8005892:	d0b2      	beq.n	80057fa <z_timer_expiration_handler+0x16>
	if (thread == NULL) {
 8005894:	2d00      	cmp	r5, #0
 8005896:	d0b0      	beq.n	80057fa <z_timer_expiration_handler+0x16>
	z_unpend_thread_no_timeout(thread);
 8005898:	4628      	mov	r0, r5
 800589a:	f002 fb3b 	bl	8007f14 <z_unpend_thread_no_timeout>
 800589e:	2300      	movs	r3, #0
 80058a0:	67ab      	str	r3, [r5, #120]	; 0x78
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80058a2:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("isb 0xF":::"memory");
 80058a6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 80058aa:	4628      	mov	r0, r5
}
 80058ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
 80058b0:	f002 bb21 	b.w	8007ef6 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
 80058b4:	f06f 0201 	mvn.w	r2, #1
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058bc:	e7cf      	b.n	800585e <z_timer_expiration_handler+0x7a>
 80058be:	bf00      	nop
 80058c0:	080057e5 	.word	0x080057e5

080058c4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 80058c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c8:	4605      	mov	r5, r0
 80058ca:	461c      	mov	r4, r3
 80058cc:	4690      	mov	r8, r2
 80058ce:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058d0:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80058d4:	2310      	movs	r3, #16
 80058d6:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80058da:	f3bf 8f6f 	isb	sy
	 * since k_timer_start can be preempted, especially for the same
	 * timer instance.
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 80058de:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80058e2:	bf08      	it	eq
 80058e4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80058e8:	d105      	bne.n	80058f6 <z_impl_k_timer_start+0x32>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80058ea:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 80058ee:	f3bf 8f6f 	isb	sy

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
		     duration);

	k_spin_unlock(&lock, key);
}
 80058f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 80058f6:	1c53      	adds	r3, r2, #1
 80058f8:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
 80058fc:	db09      	blt.n	8005912 <z_impl_k_timer_start+0x4e>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80058fe:	2a01      	cmp	r2, #1
 8005900:	f174 0300 	sbcs.w	r3, r4, #0
 8005904:	bfbc      	itt	lt
 8005906:	2201      	movlt	r2, #1
 8005908:	2400      	movlt	r4, #0
 800590a:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
 800590e:	f144 37ff 	adc.w	r7, r4, #4294967295	; 0xffffffff
	(void)z_abort_timeout(&timer->timeout);
 8005912:	4628      	mov	r0, r5
 8005914:	f002 fb78 	bl	8008008 <z_abort_timeout>
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8005918:	4906      	ldr	r1, [pc, #24]	; (8005934 <z_impl_k_timer_start+0x70>)
 800591a:	4628      	mov	r0, r5
	timer->period = period;
 800591c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005920:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
	timer->status = 0U;
 8005924:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8005926:	4642      	mov	r2, r8
	timer->status = 0U;
 8005928:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800592a:	463b      	mov	r3, r7
 800592c:	f7ff fe74 	bl	8005618 <z_add_timeout>
 8005930:	e7db      	b.n	80058ea <z_impl_k_timer_start+0x26>
 8005932:	bf00      	nop
 8005934:	080057e5 	.word	0x080057e5

08005938 <boot_banner>:
	  */
	printk("\x1b[3J\x1b[2J\x1b[H");
#endif /* CONFIG_BOOT_CLEAR_SCREEN */

#ifdef CONFIG_BOOT_BANNER
	printk("*** " CONFIG_BOOT_BANNER_STRING " " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8005938:	4801      	ldr	r0, [pc, #4]	; (8005940 <boot_banner+0x8>)
 800593a:	f001 bb13 	b.w	8006f64 <printk>
 800593e:	bf00      	nop
 8005940:	0800a8af 	.word	0x0800a8af

08005944 <snprintf>:
 8005944:	b40c      	push	{r2, r3}
 8005946:	b530      	push	{r4, r5, lr}
 8005948:	b089      	sub	sp, #36	; 0x24
 800594a:	4605      	mov	r5, r0
 800594c:	460c      	mov	r4, r1
 800594e:	221c      	movs	r2, #28
 8005950:	2100      	movs	r1, #0
 8005952:	a801      	add	r0, sp, #4
 8005954:	f002 fbb5 	bl	80080c2 <memset>
 8005958:	2302      	movs	r3, #2
 800595a:	f88d 3006 	strb.w	r3, [sp, #6]
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <snprintf+0x54>)
 8005960:	9302      	str	r3, [sp, #8]
 8005962:	9505      	str	r5, [sp, #20]
 8005964:	4623      	mov	r3, r4
 8005966:	b12c      	cbz	r4, 8005974 <snprintf+0x30>
 8005968:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800596c:	bf28      	it	cs
 800596e:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 8005972:	3b01      	subs	r3, #1
 8005974:	441d      	add	r5, r3
 8005976:	aa0d      	add	r2, sp, #52	; 0x34
 8005978:	990c      	ldr	r1, [sp, #48]	; 0x30
 800597a:	9506      	str	r5, [sp, #24]
 800597c:	a801      	add	r0, sp, #4
 800597e:	9200      	str	r2, [sp, #0]
 8005980:	f000 f8a8 	bl	8005ad4 <__d_vfprintf>
 8005984:	b114      	cbz	r4, 800598c <snprintf+0x48>
 8005986:	9b05      	ldr	r3, [sp, #20]
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	b009      	add	sp, #36	; 0x24
 800598e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005992:	b002      	add	sp, #8
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	08008457 	.word	0x08008457

0800599c <skip_to_arg>:
 800599c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a0:	2601      	movs	r6, #1
 80059a2:	4607      	mov	r7, r0
 80059a4:	42b2      	cmp	r2, r6
 80059a6:	dc01      	bgt.n	80059ac <skip_to_arg+0x10>
 80059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ac:	463b      	mov	r3, r7
 80059ae:	461f      	mov	r7, r3
 80059b0:	f813 4b01 	ldrb.w	r4, [r3], #1
 80059b4:	2c00      	cmp	r4, #0
 80059b6:	d0f7      	beq.n	80059a8 <skip_to_arg+0xc>
 80059b8:	2c25      	cmp	r4, #37	; 0x25
 80059ba:	d1f8      	bne.n	80059ae <skip_to_arg+0x12>
 80059bc:	781c      	ldrb	r4, [r3, #0]
 80059be:	2c25      	cmp	r4, #37	; 0x25
 80059c0:	f107 0702 	add.w	r7, r7, #2
 80059c4:	d0f2      	beq.n	80059ac <skip_to_arg+0x10>
 80059c6:	2300      	movs	r3, #0
 80059c8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005ad0 <skip_to_arg+0x134>
 80059cc:	469c      	mov	ip, r3
 80059ce:	461d      	mov	r5, r3
 80059d0:	2d1f      	cmp	r5, #31
 80059d2:	d818      	bhi.n	8005a06 <skip_to_arg+0x6a>
 80059d4:	f1a4 0e20 	sub.w	lr, r4, #32
 80059d8:	f1be 0f10 	cmp.w	lr, #16
 80059dc:	d909      	bls.n	80059f2 <skip_to_arg+0x56>
 80059de:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80059e2:	f1be 0f09 	cmp.w	lr, #9
 80059e6:	d81e      	bhi.n	8005a26 <skip_to_arg+0x8a>
 80059e8:	240a      	movs	r4, #10
 80059ea:	fb04 e303 	mla	r3, r4, r3, lr
 80059ee:	2520      	movs	r5, #32
 80059f0:	e004      	b.n	80059fc <skip_to_arg+0x60>
 80059f2:	fa28 fe0e 	lsr.w	lr, r8, lr
 80059f6:	f01e 0f01 	tst.w	lr, #1
 80059fa:	d006      	beq.n	8005a0a <skip_to_arg+0x6e>
 80059fc:	f817 4b01 	ldrb.w	r4, [r7], #1
 8005a00:	2c00      	cmp	r4, #0
 8005a02:	d1e5      	bne.n	80059d0 <skip_to_arg+0x34>
 8005a04:	e028      	b.n	8005a58 <skip_to_arg+0xbc>
 8005a06:	2d7f      	cmp	r5, #127	; 0x7f
 8005a08:	d81c      	bhi.n	8005a44 <skip_to_arg+0xa8>
 8005a0a:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005a0e:	f1be 0f09 	cmp.w	lr, #9
 8005a12:	d9e9      	bls.n	80059e8 <skip_to_arg+0x4c>
 8005a14:	2c24      	cmp	r4, #36	; 0x24
 8005a16:	d110      	bne.n	8005a3a <skip_to_arg+0x9e>
 8005a18:	f1bc 0f00 	cmp.w	ip, #0
 8005a1c:	d046      	beq.n	8005aac <skip_to_arg+0x110>
 8005a1e:	42b3      	cmp	r3, r6
 8005a20:	d046      	beq.n	8005ab0 <skip_to_arg+0x114>
 8005a22:	2300      	movs	r3, #0
 8005a24:	e7ea      	b.n	80059fc <skip_to_arg+0x60>
 8005a26:	f024 0e04 	bic.w	lr, r4, #4
 8005a2a:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 8005a2e:	d0f8      	beq.n	8005a22 <skip_to_arg+0x86>
 8005a30:	2c6c      	cmp	r4, #108	; 0x6c
 8005a32:	d109      	bne.n	8005a48 <skip_to_arg+0xac>
 8005a34:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005a38:	e7e0      	b.n	80059fc <skip_to_arg+0x60>
 8005a3a:	f024 0e04 	bic.w	lr, r4, #4
 8005a3e:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 8005a42:	d0ee      	beq.n	8005a22 <skip_to_arg+0x86>
 8005a44:	2c6c      	cmp	r4, #108	; 0x6c
 8005a46:	d022      	beq.n	8005a8e <skip_to_arg+0xf2>
 8005a48:	2c6c      	cmp	r4, #108	; 0x6c
 8005a4a:	d81b      	bhi.n	8005a84 <skip_to_arg+0xe8>
 8005a4c:	2c68      	cmp	r4, #104	; 0x68
 8005a4e:	d023      	beq.n	8005a98 <skip_to_arg+0xfc>
 8005a50:	2c6a      	cmp	r4, #106	; 0x6a
 8005a52:	d028      	beq.n	8005aa6 <skip_to_arg+0x10a>
 8005a54:	2c4c      	cmp	r4, #76	; 0x4c
 8005a56:	d026      	beq.n	8005aa6 <skip_to_arg+0x10a>
 8005a58:	f1bc 0f00 	cmp.w	ip, #0
 8005a5c:	d0a4      	beq.n	80059a8 <skip_to_arg+0xc>
 8005a5e:	45b4      	cmp	ip, r6
 8005a60:	d1a0      	bne.n	80059a4 <skip_to_arg+0x8>
 8005a62:	f044 0720 	orr.w	r7, r4, #32
 8005a66:	f1a7 0c65 	sub.w	ip, r7, #101	; 0x65
 8005a6a:	f1bc 0f02 	cmp.w	ip, #2
 8005a6e:	680b      	ldr	r3, [r1, #0]
 8005a70:	d901      	bls.n	8005a76 <skip_to_arg+0xda>
 8005a72:	2f61      	cmp	r7, #97	; 0x61
 8005a74:	d11e      	bne.n	8005ab4 <skip_to_arg+0x118>
 8005a76:	3307      	adds	r3, #7
 8005a78:	f023 0307 	bic.w	r3, r3, #7
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	600b      	str	r3, [r1, #0]
 8005a80:	3601      	adds	r6, #1
 8005a82:	e78e      	b.n	80059a2 <skip_to_arg+0x6>
 8005a84:	2c74      	cmp	r4, #116	; 0x74
 8005a86:	d0b9      	beq.n	80059fc <skip_to_arg+0x60>
 8005a88:	2c7a      	cmp	r4, #122	; 0x7a
 8005a8a:	d0b7      	beq.n	80059fc <skip_to_arg+0x60>
 8005a8c:	e7e4      	b.n	8005a58 <skip_to_arg+0xbc>
 8005a8e:	062c      	lsls	r4, r5, #24
 8005a90:	bf48      	it	mi
 8005a92:	f445 7500 	orrmi.w	r5, r5, #512	; 0x200
 8005a96:	e7cd      	b.n	8005a34 <skip_to_arg+0x98>
 8005a98:	05ec      	lsls	r4, r5, #23
 8005a9a:	bf48      	it	mi
 8005a9c:	f445 7500 	orrmi.w	r5, r5, #512	; 0x200
 8005aa0:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8005aa4:	e7aa      	b.n	80059fc <skip_to_arg+0x60>
 8005aa6:	f445 7520 	orr.w	r5, r5, #640	; 0x280
 8005aaa:	e7a7      	b.n	80059fc <skip_to_arg+0x60>
 8005aac:	469c      	mov	ip, r3
 8005aae:	e7b8      	b.n	8005a22 <skip_to_arg+0x86>
 8005ab0:	2463      	movs	r4, #99	; 0x63
 8005ab2:	e7d6      	b.n	8005a62 <skip_to_arg+0xc6>
 8005ab4:	2c69      	cmp	r4, #105	; 0x69
 8005ab6:	d002      	beq.n	8005abe <skip_to_arg+0x122>
 8005ab8:	d807      	bhi.n	8005aca <skip_to_arg+0x12e>
 8005aba:	2c63      	cmp	r4, #99	; 0x63
 8005abc:	d003      	beq.n	8005ac6 <skip_to_arg+0x12a>
 8005abe:	062f      	lsls	r7, r5, #24
 8005ac0:	d501      	bpl.n	8005ac6 <skip_to_arg+0x12a>
 8005ac2:	05ac      	lsls	r4, r5, #22
 8005ac4:	d4d7      	bmi.n	8005a76 <skip_to_arg+0xda>
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	e7d9      	b.n	8005a7e <skip_to_arg+0xe2>
 8005aca:	2c73      	cmp	r4, #115	; 0x73
 8005acc:	e7f6      	b.n	8005abc <skip_to_arg+0x120>
 8005ace:	bf00      	nop
 8005ad0:	00012889 	.word	0x00012889

08005ad4 <__d_vfprintf>:
 8005ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad8:	b093      	sub	sp, #76	; 0x4c
 8005ada:	6843      	ldr	r3, [r0, #4]
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	7883      	ldrb	r3, [r0, #2]
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	0798      	lsls	r0, r3, #30
 8005ae4:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8005ae8:	d517      	bpl.n	8005b1a <__d_vfprintf+0x46>
 8005aea:	920b      	str	r2, [sp, #44]	; 0x2c
 8005aec:	460b      	mov	r3, r1
 8005aee:	2500      	movs	r5, #0
 8005af0:	781f      	ldrb	r7, [r3, #0]
 8005af2:	b1a7      	cbz	r7, 8005b1e <__d_vfprintf+0x4a>
 8005af4:	2f25      	cmp	r7, #37	; 0x25
 8005af6:	d016      	beq.n	8005b26 <__d_vfprintf+0x52>
 8005af8:	3301      	adds	r3, #1
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	9b01      	ldr	r3, [sp, #4]
 8005afe:	4641      	mov	r1, r8
 8005b00:	4638      	mov	r0, r7
 8005b02:	4798      	blx	r3
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f105 0501 	add.w	r5, r5, #1
 8005b0a:	f280 8435 	bge.w	8006378 <__d_vfprintf+0x8a4>
 8005b0e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005b12:	f043 0304 	orr.w	r3, r3, #4
 8005b16:	f888 3002 	strb.w	r3, [r8, #2]
 8005b1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b1e:	4628      	mov	r0, r5
 8005b20:	b013      	add	sp, #76	; 0x4c
 8005b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b26:	785f      	ldrb	r7, [r3, #1]
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	2f25      	cmp	r7, #37	; 0x25
 8005b2c:	9205      	str	r2, [sp, #20]
 8005b2e:	d0e5      	beq.n	8005afc <__d_vfprintf+0x28>
 8005b30:	2400      	movs	r4, #0
 8005b32:	4626      	mov	r6, r4
 8005b34:	46a2      	mov	sl, r4
 8005b36:	46a3      	mov	fp, r4
 8005b38:	f1bb 0f1f 	cmp.w	fp, #31
 8005b3c:	d832      	bhi.n	8005ba4 <__d_vfprintf+0xd0>
 8005b3e:	f1a7 0320 	sub.w	r3, r7, #32
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d80a      	bhi.n	8005b5c <__d_vfprintf+0x88>
 8005b46:	e8df f003 	tbb	[pc, r3]
 8005b4a:	0924      	.short	0x0924
 8005b4c:	09092a09 	.word	0x09092a09
 8005b50:	09091b09 	.word	0x09091b09
 8005b54:	27092209 	.word	0x27092209
 8005b58:	0909      	.short	0x0909
 8005b5a:	19          	.byte	0x19
 8005b5b:	00          	.byte	0x00
 8005b5c:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	d92d      	bls.n	8005bc0 <__d_vfprintf+0xec>
 8005b64:	2f2a      	cmp	r7, #42	; 0x2a
 8005b66:	d139      	bne.n	8005bdc <__d_vfprintf+0x108>
 8005b68:	b954      	cbnz	r4, 8005b80 <__d_vfprintf+0xac>
 8005b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b6c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b76:	d029      	beq.n	8005bcc <__d_vfprintf+0xf8>
 8005b78:	4616      	mov	r6, r2
 8005b7a:	e001      	b.n	8005b80 <__d_vfprintf+0xac>
 8005b7c:	f04b 0b01 	orr.w	fp, fp, #1
 8005b80:	9b05      	ldr	r3, [sp, #20]
 8005b82:	f813 7b01 	ldrb.w	r7, [r3], #1
 8005b86:	9305      	str	r3, [sp, #20]
 8005b88:	2f00      	cmp	r7, #0
 8005b8a:	d1d5      	bne.n	8005b38 <__d_vfprintf+0x64>
 8005b8c:	e05b      	b.n	8005c46 <__d_vfprintf+0x172>
 8005b8e:	f04b 0b02 	orr.w	fp, fp, #2
 8005b92:	f04b 0b04 	orr.w	fp, fp, #4
 8005b96:	e7f3      	b.n	8005b80 <__d_vfprintf+0xac>
 8005b98:	f04b 0b08 	orr.w	fp, fp, #8
 8005b9c:	e7f0      	b.n	8005b80 <__d_vfprintf+0xac>
 8005b9e:	f04b 0b10 	orr.w	fp, fp, #16
 8005ba2:	e7ed      	b.n	8005b80 <__d_vfprintf+0xac>
 8005ba4:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
 8005ba8:	d83f      	bhi.n	8005c2a <__d_vfprintf+0x156>
 8005baa:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	d8d8      	bhi.n	8005b64 <__d_vfprintf+0x90>
 8005bb2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005bb6:	d003      	beq.n	8005bc0 <__d_vfprintf+0xec>
 8005bb8:	220a      	movs	r2, #10
 8005bba:	fb02 3606 	mla	r6, r2, r6, r3
 8005bbe:	e7df      	b.n	8005b80 <__d_vfprintf+0xac>
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	fb02 3a0a 	mla	sl, r2, sl, r3
 8005bc6:	f04b 0b20 	orr.w	fp, fp, #32
 8005bca:	e7d9      	b.n	8005b80 <__d_vfprintf+0xac>
 8005bcc:	f1b2 0a00 	subs.w	sl, r2, #0
 8005bd0:	daf9      	bge.n	8005bc6 <__d_vfprintf+0xf2>
 8005bd2:	f1ca 0a00 	rsb	sl, sl, #0
 8005bd6:	f04b 0b28 	orr.w	fp, fp, #40	; 0x28
 8005bda:	e7d1      	b.n	8005b80 <__d_vfprintf+0xac>
 8005bdc:	2f2e      	cmp	r7, #46	; 0x2e
 8005bde:	d105      	bne.n	8005bec <__d_vfprintf+0x118>
 8005be0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005be4:	d19b      	bne.n	8005b1e <__d_vfprintf+0x4a>
 8005be6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8005bea:	e7c9      	b.n	8005b80 <__d_vfprintf+0xac>
 8005bec:	2f24      	cmp	r7, #36	; 0x24
 8005bee:	d11c      	bne.n	8005c2a <__d_vfprintf+0x156>
 8005bf0:	2c00      	cmp	r4, #0
 8005bf2:	f000 8141 	beq.w	8005e78 <__d_vfprintf+0x3a4>
 8005bf6:	9b07      	ldr	r3, [sp, #28]
 8005bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bfa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005bfe:	d10a      	bne.n	8005c16 <__d_vfprintf+0x142>
 8005c00:	4652      	mov	r2, sl
 8005c02:	9806      	ldr	r0, [sp, #24]
 8005c04:	a90b      	add	r1, sp, #44	; 0x2c
 8005c06:	f7ff fec9 	bl	800599c <skip_to_arg>
 8005c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0c:	1d1a      	adds	r2, r3, #4
 8005c0e:	f8d3 a000 	ldr.w	sl, [r3]
 8005c12:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c14:	e7b4      	b.n	8005b80 <__d_vfprintf+0xac>
 8005c16:	4632      	mov	r2, r6
 8005c18:	9806      	ldr	r0, [sp, #24]
 8005c1a:	a90b      	add	r1, sp, #44	; 0x2c
 8005c1c:	f7ff febe 	bl	800599c <skip_to_arg>
 8005c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c22:	1d1a      	adds	r2, r3, #4
 8005c24:	681e      	ldr	r6, [r3, #0]
 8005c26:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c28:	e7aa      	b.n	8005b80 <__d_vfprintf+0xac>
 8005c2a:	2f6c      	cmp	r7, #108	; 0x6c
 8005c2c:	f000 8111 	beq.w	8005e52 <__d_vfprintf+0x37e>
 8005c30:	f200 8108 	bhi.w	8005e44 <__d_vfprintf+0x370>
 8005c34:	2f68      	cmp	r7, #104	; 0x68
 8005c36:	f000 8114 	beq.w	8005e62 <__d_vfprintf+0x38e>
 8005c3a:	2f6a      	cmp	r7, #106	; 0x6a
 8005c3c:	f000 8119 	beq.w	8005e72 <__d_vfprintf+0x39e>
 8005c40:	2f4c      	cmp	r7, #76	; 0x4c
 8005c42:	f000 8116 	beq.w	8005e72 <__d_vfprintf+0x39e>
 8005c46:	b134      	cbz	r4, 8005c56 <__d_vfprintf+0x182>
 8005c48:	9b07      	ldr	r3, [sp, #28]
 8005c4a:	9806      	ldr	r0, [sp, #24]
 8005c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c4e:	4622      	mov	r2, r4
 8005c50:	a90b      	add	r1, sp, #44	; 0x2c
 8005c52:	f7ff fea3 	bl	800599c <skip_to_arg>
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	f047 0920 	orr.w	r9, r7, #32
 8005c5c:	bfb8      	it	lt
 8005c5e:	f02b 0b40 	biclt.w	fp, fp, #64	; 0x40
 8005c62:	f1a9 0365 	sub.w	r3, r9, #101	; 0x65
 8005c66:	bfbc      	itt	lt
 8005c68:	fa1f fb8b 	uxthlt.w	fp, fp
 8005c6c:	2600      	movlt	r6, #0
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	f240 8107 	bls.w	8005e82 <__d_vfprintf+0x3ae>
 8005c74:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
 8005c78:	f040 8264 	bne.w	8006144 <__d_vfprintf+0x670>
 8005c7c:	43ff      	mvns	r7, r7
 8005c7e:	f007 0320 	and.w	r3, r7, #32
 8005c82:	9304      	str	r3, [sp, #16]
 8005c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c86:	3307      	adds	r3, #7
 8005c88:	f023 0307 	bic.w	r3, r3, #7
 8005c8c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005c90:	f103 0208 	add.w	r2, r3, #8
 8005c94:	bf08      	it	eq
 8005c96:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
 8005c9a:	ed93 0b00 	vldr	d0, [r3]
 8005c9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	9a04      	ldr	r2, [sp, #16]
 8005ca4:	a80c      	add	r0, sp, #48	; 0x30
 8005ca6:	f002 fb3f 	bl	8008328 <__dtox_engine>
 8005caa:	3001      	adds	r0, #1
 8005cac:	b2c3      	uxtb	r3, r0
 8005cae:	42b3      	cmp	r3, r6
 8005cb0:	f44b 54c0 	orr.w	r4, fp, #6144	; 0x1800
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	db01      	blt.n	8005cbc <__d_vfprintf+0x1e8>
 8005cb8:	9b02      	ldr	r3, [sp, #8]
 8005cba:	1e5e      	subs	r6, r3, #1
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005cc0:	9303      	str	r3, [sp, #12]
 8005cc2:	46a3      	mov	fp, r4
 8005cc4:	f04f 0970 	mov.w	r9, #112	; 0x70
 8005cc8:	f107 0309 	add.w	r3, r7, #9
 8005ccc:	2b12      	cmp	r3, #18
 8005cce:	d90d      	bls.n	8005cec <__d_vfprintf+0x218>
 8005cd0:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8005cd4:	2bc6      	cmp	r3, #198	; 0xc6
 8005cd6:	f240 810d 	bls.w	8005ef4 <__d_vfprintf+0x420>
 8005cda:	f207 33e7 	addw	r3, r7, #999	; 0x3e7
 8005cde:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	bf94      	ite	ls
 8005ce6:	2303      	movls	r3, #3
 8005ce8:	2304      	movhi	r3, #4
 8005cea:	9303      	str	r3, [sp, #12]
 8005cec:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8005cf0:	f002 030c 	and.w	r3, r2, #12
 8005cf4:	f012 0201 	ands.w	r2, r2, #1
 8005cf8:	f040 8117 	bne.w	8005f2a <__d_vfprintf+0x456>
 8005cfc:	f01b 0f02 	tst.w	fp, #2
 8005d00:	f040 8110 	bne.w	8005f24 <__d_vfprintf+0x450>
 8005d04:	f01b 0404 	ands.w	r4, fp, #4
 8005d08:	f000 80f6 	beq.w	8005ef8 <__d_vfprintf+0x424>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 810f 	bne.w	8005f30 <__d_vfprintf+0x45c>
 8005d12:	2320      	movs	r3, #32
 8005d14:	f41b 5f40 	tst.w	fp, #12288	; 0x3000
 8005d18:	d11f      	bne.n	8005d5a <__d_vfprintf+0x286>
 8005d1a:	9a02      	ldr	r2, [sp, #8]
 8005d1c:	3248      	adds	r2, #72	; 0x48
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	446a      	add	r2, sp
 8005d22:	bf08      	it	eq
 8005d24:	2601      	moveq	r6, #1
 8005d26:	3a13      	subs	r2, #19
 8005d28:	9902      	ldr	r1, [sp, #8]
 8005d2a:	b121      	cbz	r1, 8005d36 <__d_vfprintf+0x262>
 8005d2c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8005d30:	2930      	cmp	r1, #48	; 0x30
 8005d32:	f000 8134 	beq.w	8005f9e <__d_vfprintf+0x4ca>
 8005d36:	f01b 0f10 	tst.w	fp, #16
 8005d3a:	9a02      	ldr	r2, [sp, #8]
 8005d3c:	bf18      	it	ne
 8005d3e:	4632      	movne	r2, r6
 8005d40:	1d39      	adds	r1, r7, #4
 8005d42:	f2c0 8131 	blt.w	8005fa8 <__d_vfprintf+0x4d4>
 8005d46:	42b7      	cmp	r7, r6
 8005d48:	f280 812e 	bge.w	8005fa8 <__d_vfprintf+0x4d4>
 8005d4c:	42ba      	cmp	r2, r7
 8005d4e:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
 8005d52:	f340 812b 	ble.w	8005fac <__d_vfprintf+0x4d8>
 8005d56:	1c7e      	adds	r6, r7, #1
 8005d58:	1b96      	subs	r6, r2, r6
 8005d5a:	f41b 5200 	ands.w	r2, fp, #8192	; 0x2000
 8005d5e:	9208      	str	r2, [sp, #32]
 8005d60:	f000 8126 	beq.w	8005fb0 <__d_vfprintf+0x4dc>
 8005d64:	ea27 74e7 	bic.w	r4, r7, r7, asr #31
 8005d68:	3401      	adds	r4, #1
 8005d6a:	b103      	cbz	r3, 8005d6e <__d_vfprintf+0x29a>
 8005d6c:	3401      	adds	r4, #1
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	f000 8126 	beq.w	8005fc0 <__d_vfprintf+0x4ec>
 8005d74:	1c72      	adds	r2, r6, #1
 8005d76:	4414      	add	r4, r2
 8005d78:	45a2      	cmp	sl, r4
 8005d7a:	bfcc      	ite	gt
 8005d7c:	ebaa 0404 	subgt.w	r4, sl, r4
 8005d80:	2400      	movle	r4, #0
 8005d82:	f01b 0f09 	tst.w	fp, #9
 8005d86:	d104      	bne.n	8005d92 <__d_vfprintf+0x2be>
 8005d88:	442c      	add	r4, r5
 8005d8a:	42a5      	cmp	r5, r4
 8005d8c:	f040 811d 	bne.w	8005fca <__d_vfprintf+0x4f6>
 8005d90:	2400      	movs	r4, #0
 8005d92:	b143      	cbz	r3, 8005da6 <__d_vfprintf+0x2d2>
 8005d94:	4618      	mov	r0, r3
 8005d96:	4641      	mov	r1, r8
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	4798      	blx	r3
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	f105 0501 	add.w	r5, r5, #1
 8005da2:	f6ff aeb4 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8005da6:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8005daa:	d013      	beq.n	8005dd4 <__d_vfprintf+0x300>
 8005dac:	9b01      	ldr	r3, [sp, #4]
 8005dae:	4641      	mov	r1, r8
 8005db0:	2030      	movs	r0, #48	; 0x30
 8005db2:	4798      	blx	r3
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f6ff aeaa 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8005dba:	9b04      	ldr	r3, [sp, #16]
 8005dbc:	f1c3 0078 	rsb	r0, r3, #120	; 0x78
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8005dc8:	4798      	blx	r3
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	f105 0502 	add.w	r5, r5, #2
 8005dd0:	f6ff ae9d 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8005dd4:	f01b 0f08 	tst.w	fp, #8
 8005dd8:	d105      	bne.n	8005de6 <__d_vfprintf+0x312>
 8005dda:	442c      	add	r4, r5
 8005ddc:	42ac      	cmp	r4, r5
 8005dde:	f040 8100 	bne.w	8005fe2 <__d_vfprintf+0x50e>
 8005de2:	4625      	mov	r5, r4
 8005de4:	2400      	movs	r4, #0
 8005de6:	9b08      	ldr	r3, [sp, #32]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 811a 	beq.w	8006022 <__d_vfprintf+0x54e>
 8005dee:	ea27 7ae7 	bic.w	sl, r7, r7, asr #31
 8005df2:	eba7 070a 	sub.w	r7, r7, sl
 8005df6:	4276      	negs	r6, r6
 8005df8:	9b02      	ldr	r3, [sp, #8]
 8005dfa:	42bb      	cmp	r3, r7
 8005dfc:	bf84      	itt	hi
 8005dfe:	ab0c      	addhi	r3, sp, #48	; 0x30
 8005e00:	18fb      	addhi	r3, r7, r3
 8005e02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e06:	bf88      	it	hi
 8005e08:	7958      	ldrbhi	r0, [r3, #5]
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	bf98      	it	ls
 8005e0e:	2030      	movls	r0, #48	; 0x30
 8005e10:	4556      	cmp	r6, sl
 8005e12:	f105 0901 	add.w	r9, r5, #1
 8005e16:	4641      	mov	r1, r8
 8005e18:	f300 80ed 	bgt.w	8005ff6 <__d_vfprintf+0x522>
 8005e1c:	4798      	blx	r3
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	f107 0701 	add.w	r7, r7, #1
 8005e24:	f6ff ae73 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8005e28:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005e2c:	d108      	bne.n	8005e40 <__d_vfprintf+0x36c>
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	4641      	mov	r1, r8
 8005e32:	202e      	movs	r0, #46	; 0x2e
 8005e34:	4798      	blx	r3
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f6ff ae69 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8005e3c:	f105 0902 	add.w	r9, r5, #2
 8005e40:	464d      	mov	r5, r9
 8005e42:	e7d9      	b.n	8005df8 <__d_vfprintf+0x324>
 8005e44:	2f74      	cmp	r7, #116	; 0x74
 8005e46:	f43f ae9b 	beq.w	8005b80 <__d_vfprintf+0xac>
 8005e4a:	2f7a      	cmp	r7, #122	; 0x7a
 8005e4c:	f43f ae98 	beq.w	8005b80 <__d_vfprintf+0xac>
 8005e50:	e6f9      	b.n	8005c46 <__d_vfprintf+0x172>
 8005e52:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8005e56:	bf18      	it	ne
 8005e58:	f44b 7b00 	orrne.w	fp, fp, #512	; 0x200
 8005e5c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8005e60:	e68e      	b.n	8005b80 <__d_vfprintf+0xac>
 8005e62:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005e66:	bf18      	it	ne
 8005e68:	f44b 7b00 	orrne.w	fp, fp, #512	; 0x200
 8005e6c:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
 8005e70:	e686      	b.n	8005b80 <__d_vfprintf+0xac>
 8005e72:	f44b 7b20 	orr.w	fp, fp, #640	; 0x280
 8005e76:	e683      	b.n	8005b80 <__d_vfprintf+0xac>
 8005e78:	4626      	mov	r6, r4
 8005e7a:	46b3      	mov	fp, r6
 8005e7c:	4654      	mov	r4, sl
 8005e7e:	46b2      	mov	sl, r6
 8005e80:	e67e      	b.n	8005b80 <__d_vfprintf+0xac>
 8005e82:	43ff      	mvns	r7, r7
 8005e84:	f007 0320 	and.w	r3, r7, #32
 8005e88:	9304      	str	r3, [sp, #16]
 8005e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e8c:	3307      	adds	r3, #7
 8005e8e:	f023 0307 	bic.w	r3, r3, #7
 8005e92:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005e96:	f103 0208 	add.w	r2, r3, #8
 8005e9a:	bf08      	it	eq
 8005e9c:	2606      	moveq	r6, #6
 8005e9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ea2:	ed93 0b00 	vldr	d0, [r3]
 8005ea6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ea8:	d111      	bne.n	8005ece <__d_vfprintf+0x3fa>
 8005eaa:	1c71      	adds	r1, r6, #1
 8005eac:	2200      	movs	r2, #0
 8005eae:	b2c9      	uxtb	r1, r1
 8005eb0:	f44b 5b80 	orr.w	fp, fp, #4096	; 0x1000
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	2911      	cmp	r1, #17
 8005eb8:	bf28      	it	cs
 8005eba:	2111      	movcs	r1, #17
 8005ebc:	a80c      	add	r0, sp, #48	; 0x30
 8005ebe:	f000 fafb 	bl	80064b8 <__dtoa_engine>
 8005ec2:	b2c3      	uxtb	r3, r0
 8005ec4:	9302      	str	r3, [sp, #8]
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005eca:	9303      	str	r3, [sp, #12]
 8005ecc:	e6fc      	b.n	8005cc8 <__d_vfprintf+0x1f4>
 8005ece:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005ed2:	d105      	bne.n	8005ee0 <__d_vfprintf+0x40c>
 8005ed4:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
 8005ed8:	4633      	mov	r3, r6
 8005eda:	2201      	movs	r2, #1
 8005edc:	2111      	movs	r1, #17
 8005ede:	e7ea      	b.n	8005eb6 <__d_vfprintf+0x3e2>
 8005ee0:	b2f1      	uxtb	r1, r6
 8005ee2:	2901      	cmp	r1, #1
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	bf38      	it	cc
 8005eea:	2101      	movcc	r1, #1
 8005eec:	4613      	mov	r3, r2
 8005eee:	f04f 0965 	mov.w	r9, #101	; 0x65
 8005ef2:	e7e0      	b.n	8005eb6 <__d_vfprintf+0x3e2>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e6f8      	b.n	8005cea <__d_vfprintf+0x216>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f43f af0b 	beq.w	8005d14 <__d_vfprintf+0x240>
 8005efe:	f1ba 0f03 	cmp.w	sl, #3
 8005f02:	dc3b      	bgt.n	8005f7c <__d_vfprintf+0x4a8>
 8005f04:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8005f08:	4ea5      	ldr	r6, [pc, #660]	; (80061a0 <__d_vfprintf+0x6cc>)
 8005f0a:	f013 0f08 	tst.w	r3, #8
 8005f0e:	4ba5      	ldr	r3, [pc, #660]	; (80061a4 <__d_vfprintf+0x6d0>)
 8005f10:	bf08      	it	eq
 8005f12:	461e      	moveq	r6, r3
 8005f14:	4637      	mov	r7, r6
 8005f16:	46b9      	mov	r9, r7
 8005f18:	f817 0b01 	ldrb.w	r0, [r7], #1
 8005f1c:	bbb0      	cbnz	r0, 8005f8c <__d_vfprintf+0x4b8>
 8005f1e:	1bae      	subs	r6, r5, r6
 8005f20:	44b1      	add	r9, r6
 8005f22:	e07b      	b.n	800601c <__d_vfprintf+0x548>
 8005f24:	bb33      	cbnz	r3, 8005f74 <__d_vfprintf+0x4a0>
 8005f26:	232b      	movs	r3, #43	; 0x2b
 8005f28:	e6f4      	b.n	8005d14 <__d_vfprintf+0x240>
 8005f2a:	bb2b      	cbnz	r3, 8005f78 <__d_vfprintf+0x4a4>
 8005f2c:	232d      	movs	r3, #45	; 0x2d
 8005f2e:	e6f1      	b.n	8005d14 <__d_vfprintf+0x240>
 8005f30:	2220      	movs	r2, #32
 8005f32:	f1ba 0f04 	cmp.w	sl, #4
 8005f36:	dd13      	ble.n	8005f60 <__d_vfprintf+0x48c>
 8005f38:	f01b 0f08 	tst.w	fp, #8
 8005f3c:	f1aa 0404 	sub.w	r4, sl, #4
 8005f40:	d10f      	bne.n	8005f62 <__d_vfprintf+0x48e>
 8005f42:	442c      	add	r4, r5
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	9202      	str	r2, [sp, #8]
 8005f48:	4641      	mov	r1, r8
 8005f4a:	2020      	movs	r0, #32
 8005f4c:	4798      	blx	r3
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f105 0501 	add.w	r5, r5, #1
 8005f54:	f6ff addb 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8005f58:	42a5      	cmp	r5, r4
 8005f5a:	9a02      	ldr	r2, [sp, #8]
 8005f5c:	d1f2      	bne.n	8005f44 <__d_vfprintf+0x470>
 8005f5e:	b19a      	cbz	r2, 8005f88 <__d_vfprintf+0x4b4>
 8005f60:	2400      	movs	r4, #0
 8005f62:	9b01      	ldr	r3, [sp, #4]
 8005f64:	4641      	mov	r1, r8
 8005f66:	4610      	mov	r0, r2
 8005f68:	4798      	blx	r3
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f105 0501 	add.w	r5, r5, #1
 8005f70:	dac8      	bge.n	8005f04 <__d_vfprintf+0x430>
 8005f72:	e5cc      	b.n	8005b0e <__d_vfprintf+0x3a>
 8005f74:	222b      	movs	r2, #43	; 0x2b
 8005f76:	e7dc      	b.n	8005f32 <__d_vfprintf+0x45e>
 8005f78:	222d      	movs	r2, #45	; 0x2d
 8005f7a:	e7da      	b.n	8005f32 <__d_vfprintf+0x45e>
 8005f7c:	f01b 0f08 	tst.w	fp, #8
 8005f80:	f1aa 0403 	sub.w	r4, sl, #3
 8005f84:	d1be      	bne.n	8005f04 <__d_vfprintf+0x430>
 8005f86:	e7dc      	b.n	8005f42 <__d_vfprintf+0x46e>
 8005f88:	4614      	mov	r4, r2
 8005f8a:	e7bb      	b.n	8005f04 <__d_vfprintf+0x430>
 8005f8c:	9b04      	ldr	r3, [sp, #16]
 8005f8e:	1ac0      	subs	r0, r0, r3
 8005f90:	4641      	mov	r1, r8
 8005f92:	9b01      	ldr	r3, [sp, #4]
 8005f94:	b2c0      	uxtb	r0, r0
 8005f96:	4798      	blx	r3
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	dabc      	bge.n	8005f16 <__d_vfprintf+0x442>
 8005f9c:	e5b7      	b.n	8005b0e <__d_vfprintf+0x3a>
 8005f9e:	9902      	ldr	r1, [sp, #8]
 8005fa0:	3901      	subs	r1, #1
 8005fa2:	b2c9      	uxtb	r1, r1
 8005fa4:	9102      	str	r1, [sp, #8]
 8005fa6:	e6bf      	b.n	8005d28 <__d_vfprintf+0x254>
 8005fa8:	1e56      	subs	r6, r2, #1
 8005faa:	e6d6      	b.n	8005d5a <__d_vfprintf+0x286>
 8005fac:	2600      	movs	r6, #0
 8005fae:	e6d4      	b.n	8005d5a <__d_vfprintf+0x286>
 8005fb0:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8005fb4:	9a03      	ldr	r2, [sp, #12]
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2403      	moveq	r4, #3
 8005fba:	2405      	movne	r4, #5
 8005fbc:	4414      	add	r4, r2
 8005fbe:	e6d4      	b.n	8005d6a <__d_vfprintf+0x296>
 8005fc0:	f01b 0f10 	tst.w	fp, #16
 8005fc4:	bf18      	it	ne
 8005fc6:	3401      	addne	r4, #1
 8005fc8:	e6d6      	b.n	8005d78 <__d_vfprintf+0x2a4>
 8005fca:	9309      	str	r3, [sp, #36]	; 0x24
 8005fcc:	4641      	mov	r1, r8
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	2020      	movs	r0, #32
 8005fd2:	4798      	blx	r3
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd8:	f105 0501 	add.w	r5, r5, #1
 8005fdc:	f6bf aed5 	bge.w	8005d8a <__d_vfprintf+0x2b6>
 8005fe0:	e595      	b.n	8005b0e <__d_vfprintf+0x3a>
 8005fe2:	9b01      	ldr	r3, [sp, #4]
 8005fe4:	4641      	mov	r1, r8
 8005fe6:	2030      	movs	r0, #48	; 0x30
 8005fe8:	4798      	blx	r3
 8005fea:	2800      	cmp	r0, #0
 8005fec:	f105 0501 	add.w	r5, r5, #1
 8005ff0:	f6bf aef4 	bge.w	8005ddc <__d_vfprintf+0x308>
 8005ff4:	e58b      	b.n	8005b0e <__d_vfprintf+0x3a>
 8005ff6:	4798      	blx	r3
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	f6ff ad88 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8005ffe:	f01b 0f10 	tst.w	fp, #16
 8006002:	d00b      	beq.n	800601c <__d_vfprintf+0x548>
 8006004:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006008:	d108      	bne.n	800601c <__d_vfprintf+0x548>
 800600a:	f105 0902 	add.w	r9, r5, #2
 800600e:	4641      	mov	r1, r8
 8006010:	202e      	movs	r0, #46	; 0x2e
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	4798      	blx	r3
 8006016:	2800      	cmp	r0, #0
 8006018:	f6ff ad79 	blt.w	8005b0e <__d_vfprintf+0x3a>
 800601c:	464d      	mov	r5, r9
 800601e:	444c      	add	r4, r9
 8006020:	e232      	b.n	8006488 <__d_vfprintf+0x9b4>
 8006022:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	4641      	mov	r1, r8
 800602a:	4798      	blx	r3
 800602c:	2800      	cmp	r0, #0
 800602e:	f6ff ad6e 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8006032:	2e00      	cmp	r6, #0
 8006034:	dd69      	ble.n	800610a <__d_vfprintf+0x636>
 8006036:	9b01      	ldr	r3, [sp, #4]
 8006038:	4641      	mov	r1, r8
 800603a:	202e      	movs	r0, #46	; 0x2e
 800603c:	4798      	blx	r3
 800603e:	2800      	cmp	r0, #0
 8006040:	f6ff ad65 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8006044:	f04f 0a01 	mov.w	sl, #1
 8006048:	9b02      	ldr	r3, [sp, #8]
 800604a:	459a      	cmp	sl, r3
 800604c:	bfbb      	ittet	lt
 800604e:	ab0c      	addlt	r3, sp, #48	; 0x30
 8006050:	4453      	addlt	r3, sl
 8006052:	2030      	movge	r0, #48	; 0x30
 8006054:	7958      	ldrblt	r0, [r3, #5]
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	4641      	mov	r1, r8
 800605a:	4798      	blx	r3
 800605c:	2800      	cmp	r0, #0
 800605e:	46d3      	mov	fp, sl
 8006060:	f6ff ad55 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8006064:	f10a 0a01 	add.w	sl, sl, #1
 8006068:	4556      	cmp	r6, sl
 800606a:	daed      	bge.n	8006048 <__d_vfprintf+0x574>
 800606c:	3502      	adds	r5, #2
 800606e:	445d      	add	r5, fp
 8006070:	9b04      	ldr	r3, [sp, #16]
 8006072:	eba9 0003 	sub.w	r0, r9, r3
 8006076:	4641      	mov	r1, r8
 8006078:	9b01      	ldr	r3, [sp, #4]
 800607a:	b2c0      	uxtb	r0, r0
 800607c:	4798      	blx	r3
 800607e:	2800      	cmp	r0, #0
 8006080:	f6ff ad45 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8006084:	2f00      	cmp	r7, #0
 8006086:	bfb4      	ite	lt
 8006088:	202d      	movlt	r0, #45	; 0x2d
 800608a:	202b      	movge	r0, #43	; 0x2b
 800608c:	9b01      	ldr	r3, [sp, #4]
 800608e:	4641      	mov	r1, r8
 8006090:	bfb8      	it	lt
 8006092:	427f      	neglt	r7, r7
 8006094:	4798      	blx	r3
 8006096:	2800      	cmp	r0, #0
 8006098:	f6ff ad39 	blt.w	8005b0e <__d_vfprintf+0x3a>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d141      	bne.n	8006126 <__d_vfprintf+0x652>
 80060a2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 80060a6:	fbb7 f6f9 	udiv	r6, r7, r9
 80060aa:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	4641      	mov	r1, r8
 80060b2:	b2c0      	uxtb	r0, r0
 80060b4:	4798      	blx	r3
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f105 0503 	add.w	r5, r5, #3
 80060bc:	f6ff ad27 	blt.w	8005b0e <__d_vfprintf+0x3a>
 80060c0:	fb09 7716 	mls	r7, r9, r6, r7
 80060c4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80060c8:	fbb7 f6f9 	udiv	r6, r7, r9
 80060cc:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80060d0:	9b01      	ldr	r3, [sp, #4]
 80060d2:	4641      	mov	r1, r8
 80060d4:	b2c0      	uxtb	r0, r0
 80060d6:	4798      	blx	r3
 80060d8:	2800      	cmp	r0, #0
 80060da:	f105 0501 	add.w	r5, r5, #1
 80060de:	f6ff ad16 	blt.w	8005b0e <__d_vfprintf+0x3a>
 80060e2:	fb09 7716 	mls	r7, r9, r6, r7
 80060e6:	f04f 090a 	mov.w	r9, #10
 80060ea:	fbb7 f6f9 	udiv	r6, r7, r9
 80060ee:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80060f2:	9b01      	ldr	r3, [sp, #4]
 80060f4:	4641      	mov	r1, r8
 80060f6:	b2c0      	uxtb	r0, r0
 80060f8:	4798      	blx	r3
 80060fa:	2800      	cmp	r0, #0
 80060fc:	f105 0501 	add.w	r5, r5, #1
 8006100:	f6ff ad05 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8006104:	fb09 7716 	mls	r7, r9, r6, r7
 8006108:	e015      	b.n	8006136 <__d_vfprintf+0x662>
 800610a:	f01b 0f10 	tst.w	fp, #16
 800610e:	d101      	bne.n	8006114 <__d_vfprintf+0x640>
 8006110:	3501      	adds	r5, #1
 8006112:	e7ad      	b.n	8006070 <__d_vfprintf+0x59c>
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	4641      	mov	r1, r8
 8006118:	202e      	movs	r0, #46	; 0x2e
 800611a:	4798      	blx	r3
 800611c:	2800      	cmp	r0, #0
 800611e:	f105 0502 	add.w	r5, r5, #2
 8006122:	daa5      	bge.n	8006070 <__d_vfprintf+0x59c>
 8006124:	e4f3      	b.n	8005b0e <__d_vfprintf+0x3a>
 8006126:	9b03      	ldr	r3, [sp, #12]
 8006128:	2b03      	cmp	r3, #3
 800612a:	f105 0502 	add.w	r5, r5, #2
 800612e:	d0c9      	beq.n	80060c4 <__d_vfprintf+0x5f0>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d1d7      	bne.n	80060e6 <__d_vfprintf+0x612>
 8006136:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800613a:	f105 0901 	add.w	r9, r5, #1
 800613e:	4641      	mov	r1, r8
 8006140:	b2c0      	uxtb	r0, r0
 8006142:	e766      	b.n	8006012 <__d_vfprintf+0x53e>
 8006144:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006148:	2b12      	cmp	r3, #18
 800614a:	f200 80fe 	bhi.w	800634a <__d_vfprintf+0x876>
 800614e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006152:	0013      	.short	0x0013
 8006154:	00fc0056 	.word	0x00fc0056
 8006158:	00fc00fc 	.word	0x00fc00fc
 800615c:	005600fc 	.word	0x005600fc
 8006160:	00fc00fc 	.word	0x00fc00fc
 8006164:	00fc00fc 	.word	0x00fc00fc
 8006168:	011600fc 	.word	0x011600fc
 800616c:	00fc00f7 	.word	0x00fc00f7
 8006170:	002b00fc 	.word	0x002b00fc
 8006174:	00b800fc 	.word	0x00b800fc
 8006178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006180:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8006184:	2401      	movs	r4, #1
 8006186:	af0c      	add	r7, sp, #48	; 0x30
 8006188:	f01b 0f08 	tst.w	fp, #8
 800618c:	d02d      	beq.n	80061ea <__d_vfprintf+0x716>
 800618e:	193e      	adds	r6, r7, r4
 8006190:	46b9      	mov	r9, r7
 8006192:	45b1      	cmp	r9, r6
 8006194:	d12b      	bne.n	80061ee <__d_vfprintf+0x71a>
 8006196:	1bef      	subs	r7, r5, r7
 8006198:	44b9      	add	r9, r7
 800619a:	ebaa 0404 	sub.w	r4, sl, r4
 800619e:	e73d      	b.n	800601c <__d_vfprintf+0x548>
 80061a0:	0800a8ec 	.word	0x0800a8ec
 80061a4:	0800a155 	.word	0x0800a155
 80061a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80061ae:	681f      	ldr	r7, [r3, #0]
 80061b0:	4bab      	ldr	r3, [pc, #684]	; (8006460 <__d_vfprintf+0x98c>)
 80061b2:	2f00      	cmp	r7, #0
 80061b4:	bf08      	it	eq
 80061b6:	461f      	moveq	r7, r3
 80061b8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80061bc:	bf14      	ite	ne
 80061be:	4631      	movne	r1, r6
 80061c0:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
 80061c4:	4638      	mov	r0, r7
 80061c6:	f001 ff84 	bl	80080d2 <strnlen>
 80061ca:	4604      	mov	r4, r0
 80061cc:	e7dc      	b.n	8006188 <__d_vfprintf+0x6b4>
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	4641      	mov	r1, r8
 80061d2:	2020      	movs	r0, #32
 80061d4:	4798      	blx	r3
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f6ff ac99 	blt.w	8005b0e <__d_vfprintf+0x3a>
 80061dc:	3e01      	subs	r6, #1
 80061de:	42b4      	cmp	r4, r6
 80061e0:	d3f5      	bcc.n	80061ce <__d_vfprintf+0x6fa>
 80061e2:	4455      	add	r5, sl
 80061e4:	1bad      	subs	r5, r5, r6
 80061e6:	46b2      	mov	sl, r6
 80061e8:	e7d1      	b.n	800618e <__d_vfprintf+0x6ba>
 80061ea:	4656      	mov	r6, sl
 80061ec:	e7f7      	b.n	80061de <__d_vfprintf+0x70a>
 80061ee:	f819 0b01 	ldrb.w	r0, [r9], #1
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	4641      	mov	r1, r8
 80061f6:	4798      	blx	r3
 80061f8:	2800      	cmp	r0, #0
 80061fa:	daca      	bge.n	8006192 <__d_vfprintf+0x6be>
 80061fc:	e487      	b.n	8005b0e <__d_vfprintf+0x3a>
 80061fe:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8006202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006204:	d035      	beq.n	8006272 <__d_vfprintf+0x79e>
 8006206:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800620a:	d02d      	beq.n	8006268 <__d_vfprintf+0x794>
 800620c:	3307      	adds	r3, #7
 800620e:	f023 0307 	bic.w	r3, r3, #7
 8006212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006216:	f103 0208 	add.w	r2, r3, #8
 800621a:	920b      	str	r2, [sp, #44]	; 0x2c
 800621c:	f02b 0910 	bic.w	r9, fp, #16
 8006220:	2900      	cmp	r1, #0
 8006222:	fa1f f989 	uxth.w	r9, r9
 8006226:	da36      	bge.n	8006296 <__d_vfprintf+0x7c2>
 8006228:	4240      	negs	r0, r0
 800622a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800622e:	f449 6980 	orr.w	r9, r9, #1024	; 0x400
 8006232:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006236:	230a      	movs	r3, #10
 8006238:	465a      	mov	r2, fp
 800623a:	f001 ff56 	bl	80080ea <__ultoa_invert>
 800623e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8006242:	eba0 0b0b 	sub.w	fp, r0, fp
 8006246:	d065      	beq.n	8006314 <__d_vfprintf+0x840>
 8006248:	f029 0201 	bic.w	r2, r9, #1
 800624c:	455e      	cmp	r6, fp
 800624e:	b292      	uxth	r2, r2
 8006250:	f340 80b2 	ble.w	80063b8 <__d_vfprintf+0x8e4>
 8006254:	2f00      	cmp	r7, #0
 8006256:	f000 80a9 	beq.w	80063ac <__d_vfprintf+0x8d8>
 800625a:	f019 0310 	ands.w	r3, r9, #16
 800625e:	4634      	mov	r4, r6
 8006260:	4691      	mov	r9, r2
 8006262:	d026      	beq.n	80062b2 <__d_vfprintf+0x7de>
 8006264:	3402      	adds	r4, #2
 8006266:	e05c      	b.n	8006322 <__d_vfprintf+0x84e>
 8006268:	1d1a      	adds	r2, r3, #4
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	920b      	str	r2, [sp, #44]	; 0x2c
 800626e:	17c1      	asrs	r1, r0, #31
 8006270:	e7d4      	b.n	800621c <__d_vfprintf+0x748>
 8006272:	1d1a      	adds	r2, r3, #4
 8006274:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006278:	6819      	ldr	r1, [r3, #0]
 800627a:	920b      	str	r2, [sp, #44]	; 0x2c
 800627c:	d101      	bne.n	8006282 <__d_vfprintf+0x7ae>
 800627e:	4608      	mov	r0, r1
 8006280:	e7f5      	b.n	800626e <__d_vfprintf+0x79a>
 8006282:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006286:	bf15      	itete	ne
 8006288:	b248      	sxtbne	r0, r1
 800628a:	b208      	sxtheq	r0, r1
 800628c:	f341 11c0 	sbfxne	r1, r1, #7, #1
 8006290:	f341 31c0 	sbfxeq	r1, r1, #15, #1
 8006294:	e7c2      	b.n	800621c <__d_vfprintf+0x748>
 8006296:	ea50 0301 	orrs.w	r3, r0, r1
 800629a:	d1ca      	bne.n	8006232 <__d_vfprintf+0x75e>
 800629c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80062a0:	d0c7      	beq.n	8006232 <__d_vfprintf+0x75e>
 80062a2:	2e00      	cmp	r6, #0
 80062a4:	d1c5      	bne.n	8006232 <__d_vfprintf+0x75e>
 80062a6:	f02b 0b11 	bic.w	fp, fp, #17
 80062aa:	fa1f f98b 	uxth.w	r9, fp
 80062ae:	4634      	mov	r4, r6
 80062b0:	46b3      	mov	fp, r6
 80062b2:	f240 4306 	movw	r3, #1030	; 0x406
 80062b6:	ea19 0303 	ands.w	r3, r9, r3
 80062ba:	bf1c      	itt	ne
 80062bc:	3401      	addne	r4, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	e02f      	b.n	8006322 <__d_vfprintf+0x84e>
 80062c2:	f02b 0b10 	bic.w	fp, fp, #16
 80062c6:	fa1f fb8b 	uxth.w	fp, fp
 80062ca:	230a      	movs	r3, #10
 80062cc:	f01b 0480 	ands.w	r4, fp, #128	; 0x80
 80062d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062d2:	d057      	beq.n	8006384 <__d_vfprintf+0x8b0>
 80062d4:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
 80062d8:	bf1d      	ittte	ne
 80062da:	3207      	addne	r2, #7
 80062dc:	f022 0207 	bicne.w	r2, r2, #7
 80062e0:	f102 0108 	addne.w	r1, r2, #8
 80062e4:	1d10      	addeq	r0, r2, #4
 80062e6:	bf19      	ittee	ne
 80062e8:	910b      	strne	r1, [sp, #44]	; 0x2c
 80062ea:	e9d2 0100 	ldrdne	r0, r1, [r2]
 80062ee:	900b      	streq	r0, [sp, #44]	; 0x2c
 80062f0:	6810      	ldreq	r0, [r2, #0]
 80062f2:	ea50 0201 	orrs.w	r2, r0, r1
 80062f6:	d152      	bne.n	800639e <__d_vfprintf+0x8ca>
 80062f8:	f02b 0916 	bic.w	r9, fp, #22
 80062fc:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006300:	fa1f f989 	uxth.w	r9, r9
 8006304:	d04f      	beq.n	80063a6 <__d_vfprintf+0x8d2>
 8006306:	2e00      	cmp	r6, #0
 8006308:	d14d      	bne.n	80063a6 <__d_vfprintf+0x8d2>
 800630a:	f02b 0b17 	bic.w	fp, fp, #23
 800630e:	fa1f f98b 	uxth.w	r9, fp
 8006312:	46b3      	mov	fp, r6
 8006314:	f019 0310 	ands.w	r3, r9, #16
 8006318:	d052      	beq.n	80063c0 <__d_vfprintf+0x8ec>
 800631a:	2f00      	cmp	r7, #0
 800631c:	d14e      	bne.n	80063bc <__d_vfprintf+0x8e8>
 800631e:	f10b 0401 	add.w	r4, fp, #1
 8006322:	f019 0f08 	tst.w	r9, #8
 8006326:	d15e      	bne.n	80063e6 <__d_vfprintf+0x912>
 8006328:	f019 0f01 	tst.w	r9, #1
 800632c:	d006      	beq.n	800633c <__d_vfprintf+0x868>
 800632e:	45a2      	cmp	sl, r4
 8006330:	dd6e      	ble.n	8006410 <__d_vfprintf+0x93c>
 8006332:	ebaa 0404 	sub.w	r4, sl, r4
 8006336:	eb04 060b 	add.w	r6, r4, fp
 800633a:	4654      	mov	r4, sl
 800633c:	4622      	mov	r2, r4
 800633e:	e04d      	b.n	80063dc <__d_vfprintf+0x908>
 8006340:	f04b 0b10 	orr.w	fp, fp, #16
 8006344:	2310      	movs	r3, #16
 8006346:	2778      	movs	r7, #120	; 0x78
 8006348:	e7c0      	b.n	80062cc <__d_vfprintf+0x7f8>
 800634a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 800634e:	d104      	bne.n	800635a <__d_vfprintf+0x886>
 8006350:	f1c7 0378 	rsb	r3, r7, #120	; 0x78
 8006354:	f043 0310 	orr.w	r3, r3, #16
 8006358:	e7b8      	b.n	80062cc <__d_vfprintf+0x7f8>
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	4641      	mov	r1, r8
 800635e:	2025      	movs	r0, #37	; 0x25
 8006360:	4798      	blx	r3
 8006362:	2800      	cmp	r0, #0
 8006364:	f6ff abd3 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8006368:	9b01      	ldr	r3, [sp, #4]
 800636a:	4641      	mov	r1, r8
 800636c:	4638      	mov	r0, r7
 800636e:	4798      	blx	r3
 8006370:	2800      	cmp	r0, #0
 8006372:	f6ff abcc 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8006376:	3502      	adds	r5, #2
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	f7ff bbb9 	b.w	8005af0 <__d_vfprintf+0x1c>
 800637e:	2308      	movs	r3, #8
 8006380:	2700      	movs	r7, #0
 8006382:	e7a3      	b.n	80062cc <__d_vfprintf+0x7f8>
 8006384:	1d11      	adds	r1, r2, #4
 8006386:	910b      	str	r1, [sp, #44]	; 0x2c
 8006388:	f41b 7180 	ands.w	r1, fp, #256	; 0x100
 800638c:	6810      	ldr	r0, [r2, #0]
 800638e:	d0b0      	beq.n	80062f2 <__d_vfprintf+0x81e>
 8006390:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
 8006394:	bf1a      	itte	ne
 8006396:	b2c0      	uxtbne	r0, r0
 8006398:	4621      	movne	r1, r4
 800639a:	b280      	uxtheq	r0, r0
 800639c:	e7a9      	b.n	80062f2 <__d_vfprintf+0x81e>
 800639e:	f02b 0b06 	bic.w	fp, fp, #6
 80063a2:	fa1f f98b 	uxth.w	r9, fp
 80063a6:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80063aa:	e745      	b.n	8006238 <__d_vfprintf+0x764>
 80063ac:	f029 0911 	bic.w	r9, r9, #17
 80063b0:	fa1f f989 	uxth.w	r9, r9
 80063b4:	4634      	mov	r4, r6
 80063b6:	e77c      	b.n	80062b2 <__d_vfprintf+0x7de>
 80063b8:	4691      	mov	r9, r2
 80063ba:	e7ab      	b.n	8006314 <__d_vfprintf+0x840>
 80063bc:	465c      	mov	r4, fp
 80063be:	e751      	b.n	8006264 <__d_vfprintf+0x790>
 80063c0:	465c      	mov	r4, fp
 80063c2:	e776      	b.n	80062b2 <__d_vfprintf+0x7de>
 80063c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063c8:	4641      	mov	r1, r8
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	2020      	movs	r0, #32
 80063ce:	4798      	blx	r3
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f6ff ab9c 	blt.w	8005b0e <__d_vfprintf+0x3a>
 80063d6:	9a02      	ldr	r2, [sp, #8]
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	3201      	adds	r2, #1
 80063dc:	4592      	cmp	sl, r2
 80063de:	dcf1      	bgt.n	80063c4 <__d_vfprintf+0x8f0>
 80063e0:	1b2c      	subs	r4, r5, r4
 80063e2:	18a5      	adds	r5, r4, r2
 80063e4:	4614      	mov	r4, r2
 80063e6:	b1f3      	cbz	r3, 8006426 <__d_vfprintf+0x952>
 80063e8:	9b01      	ldr	r3, [sp, #4]
 80063ea:	4641      	mov	r1, r8
 80063ec:	2030      	movs	r0, #48	; 0x30
 80063ee:	4798      	blx	r3
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f6ff ab8c 	blt.w	8005b0e <__d_vfprintf+0x3a>
 80063f6:	b96f      	cbnz	r7, 8006414 <__d_vfprintf+0x940>
 80063f8:	3501      	adds	r5, #1
 80063fa:	46a9      	mov	r9, r5
 80063fc:	442e      	add	r6, r5
 80063fe:	eba6 0309 	sub.w	r3, r6, r9
 8006402:	455b      	cmp	r3, fp
 8006404:	dc21      	bgt.n	800644a <__d_vfprintf+0x976>
 8006406:	465d      	mov	r5, fp
 8006408:	ae0c      	add	r6, sp, #48	; 0x30
 800640a:	bb5d      	cbnz	r5, 8006464 <__d_vfprintf+0x990>
 800640c:	44d9      	add	r9, fp
 800640e:	e6c4      	b.n	800619a <__d_vfprintf+0x6c6>
 8006410:	465e      	mov	r6, fp
 8006412:	e793      	b.n	800633c <__d_vfprintf+0x868>
 8006414:	3502      	adds	r5, #2
 8006416:	4641      	mov	r1, r8
 8006418:	4638      	mov	r0, r7
 800641a:	9b01      	ldr	r3, [sp, #4]
 800641c:	4798      	blx	r3
 800641e:	2800      	cmp	r0, #0
 8006420:	daeb      	bge.n	80063fa <__d_vfprintf+0x926>
 8006422:	f7ff bb74 	b.w	8005b0e <__d_vfprintf+0x3a>
 8006426:	f240 4306 	movw	r3, #1030	; 0x406
 800642a:	ea19 0f03 	tst.w	r9, r3
 800642e:	d0e4      	beq.n	80063fa <__d_vfprintf+0x926>
 8006430:	f019 0f02 	tst.w	r9, #2
 8006434:	bf14      	ite	ne
 8006436:	202b      	movne	r0, #43	; 0x2b
 8006438:	2020      	moveq	r0, #32
 800643a:	f419 6f80 	tst.w	r9, #1024	; 0x400
 800643e:	f105 0501 	add.w	r5, r5, #1
 8006442:	4641      	mov	r1, r8
 8006444:	bf18      	it	ne
 8006446:	202d      	movne	r0, #45	; 0x2d
 8006448:	e7e7      	b.n	800641a <__d_vfprintf+0x946>
 800644a:	9b01      	ldr	r3, [sp, #4]
 800644c:	4641      	mov	r1, r8
 800644e:	2030      	movs	r0, #48	; 0x30
 8006450:	4798      	blx	r3
 8006452:	2800      	cmp	r0, #0
 8006454:	f109 0901 	add.w	r9, r9, #1
 8006458:	dad1      	bge.n	80063fe <__d_vfprintf+0x92a>
 800645a:	f7ff bb58 	b.w	8005b0e <__d_vfprintf+0x3a>
 800645e:	bf00      	nop
 8006460:	0800a8f0 	.word	0x0800a8f0
 8006464:	3d01      	subs	r5, #1
 8006466:	9b01      	ldr	r3, [sp, #4]
 8006468:	5d70      	ldrb	r0, [r6, r5]
 800646a:	4641      	mov	r1, r8
 800646c:	4798      	blx	r3
 800646e:	2800      	cmp	r0, #0
 8006470:	dacb      	bge.n	800640a <__d_vfprintf+0x936>
 8006472:	f7ff bb4c 	b.w	8005b0e <__d_vfprintf+0x3a>
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	4641      	mov	r1, r8
 800647a:	2020      	movs	r0, #32
 800647c:	4798      	blx	r3
 800647e:	2800      	cmp	r0, #0
 8006480:	f105 0501 	add.w	r5, r5, #1
 8006484:	f6ff ab43 	blt.w	8005b0e <__d_vfprintf+0x3a>
 8006488:	1b63      	subs	r3, r4, r5
 800648a:	2b00      	cmp	r3, #0
 800648c:	dcf3      	bgt.n	8006476 <__d_vfprintf+0x9a2>
 800648e:	e773      	b.n	8006378 <__d_vfprintf+0x8a4>

08006490 <div10>:
 8006490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006492:	ab02      	add	r3, sp, #8
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <div10+0x24>)
 8006498:	f04f 33cc 	mov.w	r3, #3435973836	; 0xcccccccc
 800649c:	f001 ff0a 	bl	80082b4 <__umul128>
 80064a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a4:	08c0      	lsrs	r0, r0, #3
 80064a6:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 80064aa:	08c9      	lsrs	r1, r1, #3
 80064ac:	b005      	add	sp, #20
 80064ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80064b2:	bf00      	nop
 80064b4:	cccccccd 	.word	0xcccccccd

080064b8 <__dtoa_engine>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ec55 4b10 	vmov	r4, r5, d0
 80064c0:	b09d      	sub	sp, #116	; 0x74
 80064c2:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 80064c6:	462a      	mov	r2, r5
 80064c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80064ca:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80064ce:	0d29      	lsrs	r1, r5, #20
 80064d0:	0fd2      	lsrs	r2, r2, #31
 80064d2:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80064d6:	9007      	str	r0, [sp, #28]
 80064d8:	ed8d 0a05 	vstr	s0, [sp, #20]
 80064dc:	920a      	str	r2, [sp, #40]	; 0x28
 80064de:	b975      	cbnz	r5, 80064fe <__dtoa_engine+0x46>
 80064e0:	4622      	mov	r2, r4
 80064e2:	431a      	orrs	r2, r3
 80064e4:	d11b      	bne.n	800651e <__dtoa_engine+0x66>
 80064e6:	2330      	movs	r3, #48	; 0x30
 80064e8:	7143      	strb	r3, [r0, #5]
 80064ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ec:	6005      	str	r5, [r0, #0]
 80064ee:	f043 0302 	orr.w	r3, r3, #2
 80064f2:	7103      	strb	r3, [r0, #4]
 80064f4:	2701      	movs	r7, #1
 80064f6:	4638      	mov	r0, r7
 80064f8:	b01d      	add	sp, #116	; 0x74
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006502:	4295      	cmp	r5, r2
 8006504:	d14d      	bne.n	80065a2 <__dtoa_engine+0xea>
 8006506:	9a05      	ldr	r2, [sp, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650c:	9a07      	ldr	r2, [sp, #28]
 800650e:	bf14      	ite	ne
 8006510:	f043 0308 	orrne.w	r3, r3, #8
 8006514:	f043 0304 	orreq.w	r3, r3, #4
 8006518:	7113      	strb	r3, [r2, #4]
 800651a:	2700      	movs	r7, #0
 800651c:	e7eb      	b.n	80064f6 <__dtoa_engine+0x3e>
 800651e:	9a05      	ldr	r2, [sp, #20]
 8006520:	4db2      	ldr	r5, [pc, #712]	; (80067ec <__dtoa_engine+0x334>)
 8006522:	f002 0201 	and.w	r2, r2, #1
 8006526:	9209      	str	r2, [sp, #36]	; 0x24
 8006528:	9a05      	ldr	r2, [sp, #20]
 800652a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800652e:	ea48 7892 	orr.w	r8, r8, r2, lsr #30
 8006532:	0097      	lsls	r7, r2, #2
 8006534:	2201      	movs	r2, #1
 8006536:	469a      	mov	sl, r3
 8006538:	4616      	mov	r6, r2
 800653a:	f1c5 0b00 	rsb	fp, r5, #0
 800653e:	4658      	mov	r0, fp
 8006540:	9208      	str	r2, [sp, #32]
 8006542:	f000 fa17 	bl	8006974 <__log10Pow5>
 8006546:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800654a:	bfac      	ite	ge
 800654c:	4681      	movge	r9, r0
 800654e:	f1a0 0901 	sublt.w	r9, r0, #1
 8006552:	ebab 0b09 	sub.w	fp, fp, r9
 8006556:	eb09 0305 	add.w	r3, r9, r5
 800655a:	4658      	mov	r0, fp
 800655c:	9306      	str	r3, [sp, #24]
 800655e:	f000 fa0f 	bl	8006980 <__pow5bits>
 8006562:	a918      	add	r1, sp, #96	; 0x60
 8006564:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 8006568:	4658      	mov	r0, fp
 800656a:	f000 fa29 	bl	80069c0 <__double_computePow5>
 800656e:	ab14      	add	r3, sp, #80	; 0x50
 8006570:	9a08      	ldr	r2, [sp, #32]
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	eba9 0505 	sub.w	r5, r9, r5
 8006578:	ab12      	add	r3, sp, #72	; 0x48
 800657a:	9202      	str	r2, [sp, #8]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	9805      	ldr	r0, [sp, #20]
 8006580:	462b      	mov	r3, r5
 8006582:	aa18      	add	r2, sp, #96	; 0x60
 8006584:	4651      	mov	r1, sl
 8006586:	f001 fdd8 	bl	800813a <mulShiftAll64>
 800658a:	f1b9 0f01 	cmp.w	r9, #1
 800658e:	4604      	mov	r4, r0
 8006590:	460d      	mov	r5, r1
 8006592:	f200 80d8 	bhi.w	8006746 <__dtoa_engine+0x28e>
 8006596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	f040 80cb 	bne.w	8006734 <__dtoa_engine+0x27c>
 800659e:	2701      	movs	r7, #1
 80065a0:	e06f      	b.n	8006682 <__dtoa_engine+0x1ca>
 80065a2:	9a05      	ldr	r2, [sp, #20]
 80065a4:	f002 0201 	and.w	r2, r2, #1
 80065a8:	9209      	str	r2, [sp, #36]	; 0x24
 80065aa:	9a05      	ldr	r2, [sp, #20]
 80065ac:	f443 1a80 	orr.w	sl, r3, #1048576	; 0x100000
 80065b0:	ea4f 088a 	mov.w	r8, sl, lsl #2
 80065b4:	4313      	orrs	r3, r2
 80065b6:	f2a5 4535 	subw	r5, r5, #1077	; 0x435
 80065ba:	ea48 7892 	orr.w	r8, r8, r2, lsr #30
 80065be:	ea4f 0782 	mov.w	r7, r2, lsl #2
 80065c2:	d14b      	bne.n	800665c <__dtoa_engine+0x1a4>
 80065c4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80065c8:	4219      	tst	r1, r3
 80065ca:	bf0c      	ite	eq
 80065cc:	2601      	moveq	r6, #1
 80065ce:	2600      	movne	r6, #0
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	4632      	mov	r2, r6
 80065d4:	dbb1      	blt.n	800653a <__dtoa_engine+0x82>
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f9c6 	bl	8006968 <__log10Pow2>
 80065dc:	4603      	mov	r3, r0
 80065de:	2d03      	cmp	r5, #3
 80065e0:	bfc8      	it	gt
 80065e2:	3b01      	subgt	r3, #1
 80065e4:	4618      	mov	r0, r3
 80065e6:	9306      	str	r3, [sp, #24]
 80065e8:	f000 f9ca 	bl	8006980 <__pow5bits>
 80065ec:	9b06      	ldr	r3, [sp, #24]
 80065ee:	307c      	adds	r0, #124	; 0x7c
 80065f0:	1b5d      	subs	r5, r3, r5
 80065f2:	4405      	add	r5, r0
 80065f4:	a918      	add	r1, sp, #96	; 0x60
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fa56 	bl	8006aa8 <__double_computeInvPow5>
 80065fc:	ab14      	add	r3, sp, #80	; 0x50
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	ab12      	add	r3, sp, #72	; 0x48
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	9805      	ldr	r0, [sp, #20]
 8006606:	9602      	str	r6, [sp, #8]
 8006608:	462b      	mov	r3, r5
 800660a:	aa18      	add	r2, sp, #96	; 0x60
 800660c:	4651      	mov	r1, sl
 800660e:	f001 fd94 	bl	800813a <mulShiftAll64>
 8006612:	9b06      	ldr	r3, [sp, #24]
 8006614:	2b15      	cmp	r3, #21
 8006616:	4604      	mov	r4, r0
 8006618:	460d      	mov	r5, r1
 800661a:	f200 8088 	bhi.w	800672e <__dtoa_engine+0x276>
 800661e:	ab16      	add	r3, sp, #88	; 0x58
 8006620:	4a73      	ldr	r2, [pc, #460]	; (80067f0 <__dtoa_engine+0x338>)
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	4638      	mov	r0, r7
 8006626:	f04f 33cc 	mov.w	r3, #3435973836	; 0xcccccccc
 800662a:	4641      	mov	r1, r8
 800662c:	f001 fe42 	bl	80082b4 <__umul128>
 8006630:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006634:	089b      	lsrs	r3, r3, #2
 8006636:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800663a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800663e:	42bb      	cmp	r3, r7
 8006640:	e9dd 9a12 	ldrd	r9, sl, [sp, #72]	; 0x48
 8006644:	d10c      	bne.n	8006660 <__dtoa_engine+0x1a8>
 8006646:	4638      	mov	r0, r7
 8006648:	4641      	mov	r1, r8
 800664a:	f000 f9a1 	bl	8006990 <__pow5Factor>
 800664e:	9b06      	ldr	r3, [sp, #24]
 8006650:	4283      	cmp	r3, r0
 8006652:	bf8c      	ite	hi
 8006654:	2700      	movhi	r7, #0
 8006656:	2701      	movls	r7, #1
 8006658:	2600      	movs	r6, #0
 800665a:	e012      	b.n	8006682 <__dtoa_engine+0x1ca>
 800665c:	2601      	movs	r6, #1
 800665e:	e7b7      	b.n	80065d0 <__dtoa_engine+0x118>
 8006660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d153      	bne.n	800670e <__dtoa_engine+0x256>
 8006666:	3f01      	subs	r7, #1
 8006668:	f148 31ff 	adc.w	r1, r8, #4294967295	; 0xffffffff
 800666c:	1bb8      	subs	r0, r7, r6
 800666e:	f161 0100 	sbc.w	r1, r1, #0
 8006672:	f000 f98d 	bl	8006990 <__pow5Factor>
 8006676:	9b06      	ldr	r3, [sp, #24]
 8006678:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800667a:	4283      	cmp	r3, r0
 800667c:	bf8c      	ite	hi
 800667e:	2600      	movhi	r6, #0
 8006680:	2601      	movls	r6, #1
 8006682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006684:	2b00      	cmp	r3, #0
 8006686:	f040 8093 	bne.w	80067b0 <__dtoa_engine+0x2f8>
 800668a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800668e:	f04f 0800 	mov.w	r8, #0
 8006692:	f8cd 8020 	str.w	r8, [sp, #32]
 8006696:	f8cd 8014 	str.w	r8, [sp, #20]
 800669a:	f04f 0a0a 	mov.w	sl, #10
 800669e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80066a2:	f7ff fef5 	bl	8006490 <div10>
 80066a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066a8:	9310      	str	r3, [sp, #64]	; 0x40
 80066aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80066ae:	4618      	mov	r0, r3
 80066b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80066b2:	f7ff feed 	bl	8006490 <div10>
 80066b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066ba:	9111      	str	r1, [sp, #68]	; 0x44
 80066bc:	4298      	cmp	r0, r3
 80066be:	460b      	mov	r3, r1
 80066c0:	4193      	sbcs	r3, r2
 80066c2:	4681      	mov	r9, r0
 80066c4:	f080 808e 	bcs.w	80067e4 <__dtoa_engine+0x32c>
 80066c8:	4620      	mov	r0, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	f7ff fee0 	bl	8006490 <div10>
 80066d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066d2:	fb0a f309 	mul.w	r3, sl, r9
 80066d6:	4293      	cmp	r3, r2
 80066d8:	bf14      	ite	ne
 80066da:	2600      	movne	r6, #0
 80066dc:	f006 0601 	andeq.w	r6, r6, #1
 80066e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e2:	9312      	str	r3, [sp, #72]	; 0x48
 80066e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066e6:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
 80066ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066ec:	9315      	str	r3, [sp, #84]	; 0x54
 80066ee:	9b08      	ldr	r3, [sp, #32]
 80066f0:	f1b8 0f00 	cmp.w	r8, #0
 80066f4:	bf14      	ite	ne
 80066f6:	2700      	movne	r7, #0
 80066f8:	f007 0701 	andeq.w	r7, r7, #1
 80066fc:	3301      	adds	r3, #1
 80066fe:	fb0a 4810 	mls	r8, sl, r0, r4
 8006702:	fa5f f888 	uxtb.w	r8, r8
 8006706:	9308      	str	r3, [sp, #32]
 8006708:	4604      	mov	r4, r0
 800670a:	460d      	mov	r5, r1
 800670c:	e7c7      	b.n	800669e <__dtoa_engine+0x1e6>
 800670e:	1cb8      	adds	r0, r7, #2
 8006710:	f148 0100 	adc.w	r1, r8, #0
 8006714:	f000 f93c 	bl	8006990 <__pow5Factor>
 8006718:	9b06      	ldr	r3, [sp, #24]
 800671a:	4283      	cmp	r3, r0
 800671c:	bf8c      	ite	hi
 800671e:	2000      	movhi	r0, #0
 8006720:	2001      	movls	r0, #1
 8006722:	ebb9 0000 	subs.w	r0, r9, r0
 8006726:	f16a 0200 	sbc.w	r2, sl, #0
 800672a:	e9cd 0212 	strd	r0, r2, [sp, #72]	; 0x48
 800672e:	2700      	movs	r7, #0
 8006730:	463e      	mov	r6, r7
 8006732:	e7a6      	b.n	8006682 <__dtoa_engine+0x1ca>
 8006734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006736:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006738:	3b01      	subs	r3, #1
 800673a:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 800673e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8006742:	2701      	movs	r7, #1
 8006744:	e788      	b.n	8006658 <__dtoa_engine+0x1a0>
 8006746:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
 800674a:	d8f0      	bhi.n	800672e <__dtoa_engine+0x276>
 800674c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006750:	f1a9 0020 	sub.w	r0, r9, #32
 8006754:	fa03 f209 	lsl.w	r2, r3, r9
 8006758:	fa03 f000 	lsl.w	r0, r3, r0
 800675c:	f1c9 0120 	rsb	r1, r9, #32
 8006760:	fa23 f101 	lsr.w	r1, r3, r1
 8006764:	4302      	orrs	r2, r0
 8006766:	430a      	orrs	r2, r1
 8006768:	fa03 f309 	lsl.w	r3, r3, r9
 800676c:	ea27 0703 	bic.w	r7, r7, r3
 8006770:	ea28 0802 	bic.w	r8, r8, r2
 8006774:	ea57 0708 	orrs.w	r7, r7, r8
 8006778:	bf0c      	ite	eq
 800677a:	2701      	moveq	r7, #1
 800677c:	2700      	movne	r7, #0
 800677e:	e76b      	b.n	8006658 <__dtoa_engine+0x1a0>
 8006780:	fb00 fc02 	mul.w	ip, r0, r2
 8006784:	fba1 1200 	umull	r1, r2, r1, r0
 8006788:	3301      	adds	r3, #1
 800678a:	4462      	add	r2, ip
 800678c:	428c      	cmp	r4, r1
 800678e:	eb75 0c02 	sbcs.w	ip, r5, r2
 8006792:	d2f5      	bcs.n	8006780 <__dtoa_engine+0x2c8>
 8006794:	9a06      	ldr	r2, [sp, #24]
 8006796:	4413      	add	r3, r2
 8006798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800679a:	4413      	add	r3, r2
 800679c:	0fd2      	lsrs	r2, r2, #31
 800679e:	4293      	cmp	r3, r2
 80067a0:	bfb8      	it	lt
 80067a2:	4613      	movlt	r3, r2
 80067a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067a6:	429a      	cmp	r2, r3
 80067a8:	bfa8      	it	ge
 80067aa:	461a      	movge	r2, r3
 80067ac:	4693      	mov	fp, r2
 80067ae:	e76e      	b.n	800668e <__dtoa_engine+0x1d6>
 80067b0:	210a      	movs	r1, #10
 80067b2:	2200      	movs	r2, #0
 80067b4:	2301      	movs	r3, #1
 80067b6:	4608      	mov	r0, r1
 80067b8:	e7e8      	b.n	800678c <__dtoa_engine+0x2d4>
 80067ba:	fb0a f003 	mul.w	r0, sl, r3
 80067be:	fba2 230a 	umull	r2, r3, r2, sl
 80067c2:	3101      	adds	r1, #1
 80067c4:	4403      	add	r3, r0
 80067c6:	4294      	cmp	r4, r2
 80067c8:	eb75 0003 	sbcs.w	r0, r5, r3
 80067cc:	d2f5      	bcs.n	80067ba <__dtoa_engine+0x302>
 80067ce:	4559      	cmp	r1, fp
 80067d0:	dd10      	ble.n	80067f4 <__dtoa_engine+0x33c>
 80067d2:	f1bb 0f00 	cmp.w	fp, #0
 80067d6:	d102      	bne.n	80067de <__dtoa_engine+0x326>
 80067d8:	ea54 0305 	orrs.w	r3, r4, r5
 80067dc:	d00a      	beq.n	80067f4 <__dtoa_engine+0x33c>
 80067de:	2301      	movs	r3, #1
 80067e0:	9305      	str	r3, [sp, #20]
 80067e2:	e771      	b.n	80066c8 <__dtoa_engine+0x210>
 80067e4:	220a      	movs	r2, #10
 80067e6:	2300      	movs	r3, #0
 80067e8:	2101      	movs	r1, #1
 80067ea:	e7ec      	b.n	80067c6 <__dtoa_engine+0x30e>
 80067ec:	fffffbcc 	.word	0xfffffbcc
 80067f0:	cccccccd 	.word	0xcccccccd
 80067f4:	b37e      	cbz	r6, 8006856 <__dtoa_engine+0x39e>
 80067f6:	f04f 0a0a 	mov.w	sl, #10
 80067fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067fc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80067fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff fe45 	bl	8006490 <div10>
 8006806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006808:	910e      	str	r1, [sp, #56]	; 0x38
 800680a:	fb0a f200 	mul.w	r2, sl, r0
 800680e:	429a      	cmp	r2, r3
 8006810:	4681      	mov	r9, r0
 8006812:	d120      	bne.n	8006856 <__dtoa_engine+0x39e>
 8006814:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006818:	f7ff fe3a 	bl	8006490 <div10>
 800681c:	9010      	str	r0, [sp, #64]	; 0x40
 800681e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006820:	4620      	mov	r0, r4
 8006822:	4629      	mov	r1, r5
 8006824:	f7ff fe34 	bl	8006490 <div10>
 8006828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800682a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800682c:	9212      	str	r2, [sp, #72]	; 0x48
 800682e:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
 8006832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006834:	9315      	str	r3, [sp, #84]	; 0x54
 8006836:	9b08      	ldr	r3, [sp, #32]
 8006838:	f1b8 0f00 	cmp.w	r8, #0
 800683c:	bf14      	ite	ne
 800683e:	2700      	movne	r7, #0
 8006840:	f007 0701 	andeq.w	r7, r7, #1
 8006844:	3301      	adds	r3, #1
 8006846:	fb0a 4810 	mls	r8, sl, r0, r4
 800684a:	fa5f f888 	uxtb.w	r8, r8
 800684e:	9308      	str	r3, [sp, #32]
 8006850:	4604      	mov	r4, r0
 8006852:	460d      	mov	r5, r1
 8006854:	e7d1      	b.n	80067fa <__dtoa_engine+0x342>
 8006856:	9b06      	ldr	r3, [sp, #24]
 8006858:	9a08      	ldr	r2, [sp, #32]
 800685a:	4413      	add	r3, r2
 800685c:	4699      	mov	r9, r3
 800685e:	2f00      	cmp	r7, #0
 8006860:	d05a      	beq.n	8006918 <__dtoa_engine+0x460>
 8006862:	f1b8 0f05 	cmp.w	r8, #5
 8006866:	d157      	bne.n	8006918 <__dtoa_engine+0x460>
 8006868:	f014 0301 	ands.w	r3, r4, #1
 800686c:	d14a      	bne.n	8006904 <__dtoa_engine+0x44c>
 800686e:	9a05      	ldr	r2, [sp, #20]
 8006870:	b932      	cbnz	r2, 8006880 <__dtoa_engine+0x3c8>
 8006872:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006876:	429d      	cmp	r5, r3
 8006878:	bf08      	it	eq
 800687a:	4294      	cmpeq	r4, r2
 800687c:	d05f      	beq.n	800693e <__dtoa_engine+0x486>
 800687e:	9b05      	ldr	r3, [sp, #20]
 8006880:	1918      	adds	r0, r3, r4
 8006882:	f04f 040a 	mov.w	r4, #10
 8006886:	f145 0100 	adc.w	r1, r5, #0
 800688a:	2200      	movs	r2, #0
 800688c:	2601      	movs	r6, #1
 800688e:	4625      	mov	r5, r4
 8006890:	42a0      	cmp	r0, r4
 8006892:	eb71 0702 	sbcs.w	r7, r1, r2
 8006896:	d255      	bcs.n	8006944 <__dtoa_engine+0x48c>
 8006898:	b1f3      	cbz	r3, 80068d8 <__dtoa_engine+0x420>
 800689a:	45b3      	cmp	fp, r6
 800689c:	da1c      	bge.n	80068d8 <__dtoa_engine+0x420>
 800689e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068a0:	b173      	cbz	r3, 80068c0 <__dtoa_engine+0x408>
 80068a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068a4:	eb06 0309 	add.w	r3, r6, r9
 80068a8:	441a      	add	r2, r3
 80068aa:	4613      	mov	r3, r2
 80068ac:	2a01      	cmp	r2, #1
 80068ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068b0:	bfb8      	it	lt
 80068b2:	2301      	movlt	r3, #1
 80068b4:	429a      	cmp	r2, r3
 80068b6:	bfa8      	it	ge
 80068b8:	461a      	movge	r2, r3
 80068ba:	4296      	cmp	r6, r2
 80068bc:	4693      	mov	fp, r2
 80068be:	dd0b      	ble.n	80068d8 <__dtoa_engine+0x420>
 80068c0:	3005      	adds	r0, #5
 80068c2:	f04f 020a 	mov.w	r2, #10
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	f141 0100 	adc.w	r1, r1, #0
 80068ce:	f7f9 fcfd 	bl	80002cc <__aeabi_uldivmod>
 80068d2:	f109 0901 	add.w	r9, r9, #1
 80068d6:	3e01      	subs	r6, #1
 80068d8:	455e      	cmp	r6, fp
 80068da:	bfa8      	it	ge
 80068dc:	465e      	movge	r6, fp
 80068de:	b237      	sxth	r7, r6
 80068e0:	fa0f f989 	sxth.w	r9, r9
 80068e4:	9b07      	ldr	r3, [sp, #28]
 80068e6:	fa09 f686 	sxtah	r6, r9, r6
 80068ea:	f107 0805 	add.w	r8, r7, #5
 80068ee:	3e01      	subs	r6, #1
 80068f0:	4498      	add	r8, r3
 80068f2:	f04f 0900 	mov.w	r9, #0
 80068f6:	45b9      	cmp	r9, r7
 80068f8:	db2b      	blt.n	8006952 <__dtoa_engine+0x49a>
 80068fa:	9b07      	ldr	r3, [sp, #28]
 80068fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068fe:	601e      	str	r6, [r3, #0]
 8006900:	711a      	strb	r2, [r3, #4]
 8006902:	e5f8      	b.n	80064f6 <__dtoa_engine+0x3e>
 8006904:	9b05      	ldr	r3, [sp, #20]
 8006906:	b92b      	cbnz	r3, 8006914 <__dtoa_engine+0x45c>
 8006908:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800690c:	429d      	cmp	r5, r3
 800690e:	bf08      	it	eq
 8006910:	4294      	cmpeq	r4, r2
 8006912:	d009      	beq.n	8006928 <__dtoa_engine+0x470>
 8006914:	2301      	movs	r3, #1
 8006916:	e7b3      	b.n	8006880 <__dtoa_engine+0x3c8>
 8006918:	9b05      	ldr	r3, [sp, #20]
 800691a:	b953      	cbnz	r3, 8006932 <__dtoa_engine+0x47a>
 800691c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006920:	429d      	cmp	r5, r3
 8006922:	bf08      	it	eq
 8006924:	4294      	cmpeq	r4, r2
 8006926:	d104      	bne.n	8006932 <__dtoa_engine+0x47a>
 8006928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f2      	bne.n	8006914 <__dtoa_engine+0x45c>
 800692e:	2e00      	cmp	r6, #0
 8006930:	d0f0      	beq.n	8006914 <__dtoa_engine+0x45c>
 8006932:	f1b8 0f04 	cmp.w	r8, #4
 8006936:	bf94      	ite	ls
 8006938:	2300      	movls	r3, #0
 800693a:	2301      	movhi	r3, #1
 800693c:	e7a0      	b.n	8006880 <__dtoa_engine+0x3c8>
 800693e:	f04f 0804 	mov.w	r8, #4
 8006942:	e7f1      	b.n	8006928 <__dtoa_engine+0x470>
 8006944:	fb05 f702 	mul.w	r7, r5, r2
 8006948:	fba4 4205 	umull	r4, r2, r4, r5
 800694c:	3601      	adds	r6, #1
 800694e:	443a      	add	r2, r7
 8006950:	e79e      	b.n	8006890 <__dtoa_engine+0x3d8>
 8006952:	220a      	movs	r2, #10
 8006954:	2300      	movs	r3, #0
 8006956:	f7f9 fcb9 	bl	80002cc <__aeabi_uldivmod>
 800695a:	3230      	adds	r2, #48	; 0x30
 800695c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8006960:	f109 0901 	add.w	r9, r9, #1
 8006964:	e7c7      	b.n	80068f6 <__dtoa_engine+0x43e>
 8006966:	bf00      	nop

08006968 <__log10Pow2>:
 8006968:	4b01      	ldr	r3, [pc, #4]	; (8006970 <__log10Pow2+0x8>)
 800696a:	4358      	muls	r0, r3
 800696c:	0c80      	lsrs	r0, r0, #18
 800696e:	4770      	bx	lr
 8006970:	00013441 	.word	0x00013441

08006974 <__log10Pow5>:
 8006974:	4b01      	ldr	r3, [pc, #4]	; (800697c <__log10Pow5+0x8>)
 8006976:	4358      	muls	r0, r3
 8006978:	0d00      	lsrs	r0, r0, #20
 800697a:	4770      	bx	lr
 800697c:	000b2efb 	.word	0x000b2efb

08006980 <__pow5bits>:
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <__pow5bits+0xc>)
 8006982:	4358      	muls	r0, r3
 8006984:	0cc0      	lsrs	r0, r0, #19
 8006986:	3001      	adds	r0, #1
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	0012934f 	.word	0x0012934f

08006990 <__pow5Factor>:
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <__pow5Factor+0x2c>)
 8006992:	b570      	push	{r4, r5, r6, lr}
 8006994:	4603      	mov	r3, r0
 8006996:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
 800699a:	2000      	movs	r0, #0
 800699c:	f04f 3533 	mov.w	r5, #858993459	; 0x33333333
 80069a0:	fb06 f403 	mul.w	r4, r6, r3
 80069a4:	fb02 4401 	mla	r4, r2, r1, r4
 80069a8:	fba3 3102 	umull	r3, r1, r3, r2
 80069ac:	4421      	add	r1, r4
 80069ae:	429d      	cmp	r5, r3
 80069b0:	eb75 0401 	sbcs.w	r4, r5, r1
 80069b4:	d301      	bcc.n	80069ba <__pow5Factor+0x2a>
 80069b6:	3001      	adds	r0, #1
 80069b8:	e7f2      	b.n	80069a0 <__pow5Factor+0x10>
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	cccccccd 	.word	0xcccccccd

080069c0 <__double_computePow5>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	231a      	movs	r3, #26
 80069c6:	4e35      	ldr	r6, [pc, #212]	; (8006a9c <__double_computePow5+0xdc>)
 80069c8:	fbb0 faf3 	udiv	sl, r0, r3
 80069cc:	fb03 031a 	mls	r3, r3, sl, r0
 80069d0:	b089      	sub	sp, #36	; 0x24
 80069d2:	4604      	mov	r4, r0
 80069d4:	460d      	mov	r5, r1
 80069d6:	eb06 160a 	add.w	r6, r6, sl, lsl #4
 80069da:	b953      	cbnz	r3, 80069f2 <__double_computePow5+0x32>
 80069dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069e0:	e9c1 2300 	strd	r2, r3, [r1]
 80069e4:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 80069e8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80069ec:	b009      	add	sp, #36	; 0x24
 80069ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f2:	4a2b      	ldr	r2, [pc, #172]	; (8006aa0 <__double_computePow5+0xe0>)
 80069f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069fc:	ab04      	add	r3, sp, #16
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8006a04:	4640      	mov	r0, r8
 8006a06:	4649      	mov	r1, r9
 8006a08:	f001 fc54 	bl	80082b4 <__umul128>
 8006a0c:	ab06      	add	r3, sp, #24
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a14:	4683      	mov	fp, r0
 8006a16:	460f      	mov	r7, r1
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f001 fc4a 	bl	80082b4 <__umul128>
 8006a20:	e9dd 6206 	ldrd	r6, r2, [sp, #24]
 8006a24:	eb16 060b 	adds.w	r6, r6, fp
 8006a28:	eb52 0807 	adcs.w	r8, r2, r7
 8006a2c:	f04f 0300 	mov.w	r3, #0
 8006a30:	bf28      	it	cs
 8006a32:	2301      	movcs	r3, #1
 8006a34:	4681      	mov	r9, r0
 8006a36:	b133      	cbz	r3, 8006a46 <__double_computePow5+0x86>
 8006a38:	9b04      	ldr	r3, [sp, #16]
 8006a3a:	9a05      	ldr	r2, [sp, #20]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f142 0200 	adc.w	r2, r2, #0
 8006a42:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8006a46:	4620      	mov	r0, r4
 8006a48:	9103      	str	r1, [sp, #12]
 8006a4a:	f7ff ff99 	bl	8006980 <__pow5bits>
 8006a4e:	4607      	mov	r7, r0
 8006a50:	201a      	movs	r0, #26
 8006a52:	fb00 f00a 	mul.w	r0, r0, sl
 8006a56:	f7ff ff93 	bl	8006980 <__pow5bits>
 8006a5a:	1a3f      	subs	r7, r7, r0
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	4643      	mov	r3, r8
 8006a60:	9903      	ldr	r1, [sp, #12]
 8006a62:	9700      	str	r7, [sp, #0]
 8006a64:	4648      	mov	r0, r9
 8006a66:	f001 fc40 	bl	80082ea <__shiftright128>
 8006a6a:	ea4f 1c14 	mov.w	ip, r4, lsr #4
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <__double_computePow5+0xe4>)
 8006a70:	0064      	lsls	r4, r4, #1
 8006a72:	f004 031e 	and.w	r3, r4, #30
 8006a76:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8006a7a:	40dc      	lsrs	r4, r3
 8006a7c:	f004 0403 	and.w	r4, r4, #3
 8006a80:	1824      	adds	r4, r4, r0
 8006a82:	f141 0100 	adc.w	r1, r1, #0
 8006a86:	e9c5 4100 	strd	r4, r1, [r5]
 8006a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8e:	9700      	str	r7, [sp, #0]
 8006a90:	4630      	mov	r0, r6
 8006a92:	4641      	mov	r1, r8
 8006a94:	f001 fc29 	bl	80082ea <__shiftright128>
 8006a98:	e7a6      	b.n	80069e8 <__double_computePow5+0x28>
 8006a9a:	bf00      	nop
 8006a9c:	08008df8 	.word	0x08008df8
 8006aa0:	08008d28 	.word	0x08008d28
 8006aa4:	08009c74 	.word	0x08009c74

08006aa8 <__double_computeInvPow5>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	271a      	movs	r7, #26
 8006aae:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8006b9c <__double_computeInvPow5+0xf4>
 8006ab2:	f100 0519 	add.w	r5, r0, #25
 8006ab6:	fbb5 f5f7 	udiv	r5, r5, r7
 8006aba:	436f      	muls	r7, r5
 8006abc:	1a3a      	subs	r2, r7, r0
 8006abe:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460e      	mov	r6, r1
 8006ac8:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
 8006acc:	d10a      	bne.n	8006ae4 <__double_computeInvPow5+0x3c>
 8006ace:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ad2:	e9c1 2300 	strd	r2, r3, [r1]
 8006ad6:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8006ada:	e9c6 0102 	strd	r0, r1, [r6, #8]
 8006ade:	b009      	add	sp, #36	; 0x24
 8006ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae4:	4b2b      	ldr	r3, [pc, #172]	; (8006b94 <__double_computeInvPow5+0xec>)
 8006ae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aee:	ab04      	add	r3, sp, #16
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f001 fbdb 	bl	80082b4 <__umul128>
 8006afe:	f85a 200b 	ldr.w	r2, [sl, fp]
 8006b02:	686b      	ldr	r3, [r5, #4]
 8006b04:	3a01      	subs	r2, #1
 8006b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b0a:	a906      	add	r1, sp, #24
 8006b0c:	f163 0300 	sbc.w	r3, r3, #0
 8006b10:	9100      	str	r1, [sp, #0]
 8006b12:	4640      	mov	r0, r8
 8006b14:	4649      	mov	r1, r9
 8006b16:	f001 fbcd 	bl	80082b4 <__umul128>
 8006b1a:	e9dd 5206 	ldrd	r5, r2, [sp, #24]
 8006b1e:	468a      	mov	sl, r1
 8006b20:	9902      	ldr	r1, [sp, #8]
 8006b22:	186d      	adds	r5, r5, r1
 8006b24:	9903      	ldr	r1, [sp, #12]
 8006b26:	eb52 0801 	adcs.w	r8, r2, r1
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	bf28      	it	cs
 8006b30:	2301      	movcs	r3, #1
 8006b32:	4681      	mov	r9, r0
 8006b34:	b133      	cbz	r3, 8006b44 <__double_computeInvPow5+0x9c>
 8006b36:	9b04      	ldr	r3, [sp, #16]
 8006b38:	9a05      	ldr	r2, [sp, #20]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	f142 0200 	adc.w	r2, r2, #0
 8006b40:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff ff1b 	bl	8006980 <__pow5bits>
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f7ff ff17 	bl	8006980 <__pow5bits>
 8006b52:	1a3f      	subs	r7, r7, r0
 8006b54:	462a      	mov	r2, r5
 8006b56:	4643      	mov	r3, r8
 8006b58:	9700      	str	r7, [sp, #0]
 8006b5a:	4648      	mov	r0, r9
 8006b5c:	4651      	mov	r1, sl
 8006b5e:	f001 fbc4 	bl	80082ea <__shiftright128>
 8006b62:	ea4f 1c14 	mov.w	ip, r4, lsr #4
 8006b66:	4a0c      	ldr	r2, [pc, #48]	; (8006b98 <__double_computeInvPow5+0xf0>)
 8006b68:	0064      	lsls	r4, r4, #1
 8006b6a:	f004 031e 	and.w	r3, r4, #30
 8006b6e:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8006b72:	40dc      	lsrs	r4, r3
 8006b74:	f004 0403 	and.w	r4, r4, #3
 8006b78:	3401      	adds	r4, #1
 8006b7a:	1824      	adds	r4, r4, r0
 8006b7c:	f141 0100 	adc.w	r1, r1, #0
 8006b80:	e9c6 4100 	strd	r4, r1, [r6]
 8006b84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b88:	9700      	str	r7, [sp, #0]
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	f001 fbac 	bl	80082ea <__shiftright128>
 8006b92:	e7a2      	b.n	8006ada <__double_computeInvPow5+0x32>
 8006b94:	08008d28 	.word	0x08008d28
 8006b98:	08009cc8 	.word	0x08009cc8
 8006b9c:	08008ec8 	.word	0x08008ec8

08006ba0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8006ba0:	4770      	bx	lr

08006ba2 <adc_stm32_isr>:
    if (LL_ADC_IsActiveFlag_JEOS(cfg->adc)) 
 8006ba2:	6843      	ldr	r3, [r0, #4]
    struct currsmp_shunt_stm32_data* data = dev->data;
 8006ba4:	6902      	ldr	r2, [r0, #16]
    if (LL_ADC_IsActiveFlag_JEOS(cfg->adc)) 
 8006ba6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS)) ? 1UL : 0UL);
 8006ba8:	6819      	ldr	r1, [r3, #0]
 8006baa:	0649      	lsls	r1, r1, #25
 8006bac:	d505      	bpl.n	8006bba <adc_stm32_isr+0x18>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8006bae:	2140      	movs	r1, #64	; 0x40
 8006bb0:	6019      	str	r1, [r3, #0]
      if(data->regulation_cb)
 8006bb2:	6813      	ldr	r3, [r2, #0]
 8006bb4:	b10b      	cbz	r3, 8006bba <adc_stm32_isr+0x18>
        data->regulation_cb(data->regulation_ctx);
 8006bb6:	6850      	ldr	r0, [r2, #4]
 8006bb8:	4718      	bx	r3
}
 8006bba:	4770      	bx	lr

08006bbc <currsmp_shunt_stm32_configure>:
	struct currsmp_shunt_stm32_data *data = dev->data;
 8006bbc:	6903      	ldr	r3, [r0, #16]
	data->regulation_ctx = ctx;
 8006bbe:	e9c3 1200 	strd	r1, r2, [r3]
}
 8006bc2:	4770      	bx	lr

08006bc4 <adc_stm32_isr_18_init>:
DT_INST_FOREACH_STATUS_OKAY(GENERATE_ISR)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2012      	movs	r0, #18
 8006bc8:	b508      	push	{r3, lr}
 8006bca:	4611      	mov	r1, r2
 8006bcc:	f7fc f8d0 	bl	8002d70 <z_arm_irq_priority_set>
 8006bd0:	2012      	movs	r0, #18
 8006bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006bd6:	f7fc b8bd 	b.w	8002d54 <arch_irq_enable>

08006bda <pwm_stm32_stop>:
}
 8006bda:	4770      	bx	lr

08006bdc <pwm_stm32_setduties>:
	const struct pwm_stm32_config *cfg = dev->config;
 8006bdc:	6843      	ldr	r3, [r0, #4]
    LL_TIM_OC_SetCompareCH1(cfg->timer, (uint32_t)(cfg->timing_params[1]*a));
 8006bde:	edd3 7a05 	vldr	s15, [r3, #20]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006bf0:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
    LL_TIM_OC_SetCompareCH2(cfg->timer, (uint32_t)(cfg->timing_params[1]*b));
 8006bf4:	edd3 7a05 	vldr	s15, [r3, #20]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8006c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c06:	edc2 7a0e 	vstr	s15, [r2, #56]	; 0x38
    LL_TIM_OC_SetCompareCH3(cfg->timer, (uint32_t)(cfg->timing_params[1]*c));
 8006c0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c14:	ee67 7a81 	vmul.f32	s15, s15, s2
 8006c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006c1c:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
	if(!cfg->slave_enable)
 8006c20:	69da      	ldr	r2, [r3, #28]
 8006c22:	b91a      	cbnz	r2, 8006c2c <pwm_stm32_setduties+0x50>
		LL_TIM_OC_SetCompareCH4(cfg->timer, (uint32_t)(cfg->timing_params[1]-200)); //TODO
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	3bc8      	subs	r3, #200	; 0xc8
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006c2a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006c2c:	4770      	bx	lr

08006c2e <gpio_add_callback>:
		(const struct gpio_driver_api *)port->api;
	int ret;

	SYS_PORT_TRACING_FUNC_ENTER(gpio, add_callback, port, callback);

	if (api->manage_callback == NULL) {
 8006c2e:	6883      	ldr	r3, [r0, #8]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	b10b      	cbz	r3, 8006c38 <gpio_add_callback+0xa>
		SYS_PORT_TRACING_FUNC_EXIT(gpio, add_callback, port, -ENOSYS);
		return -ENOSYS;
	}

	ret = api->manage_callback(port, callback, true);
 8006c34:	2201      	movs	r2, #1
 8006c36:	4718      	bx	r3
	SYS_PORT_TRACING_FUNC_EXIT(gpio, add_callback, port, ret);
	return ret;
}
 8006c38:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8006c3c:	4770      	bx	lr

08006c3e <gpio_pin_get_dt>:
{
 8006c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c40:	4603      	mov	r3, r0
	return gpio_pin_get(spec->port, spec->pin);
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
 8006c46:	6905      	ldr	r5, [r0, #16]
	ret = api->port_get_raw(port, value);
 8006c48:	6883      	ldr	r3, [r0, #8]
 8006c4a:	a901      	add	r1, sp, #4
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4798      	blx	r3
	if (ret == 0) {
 8006c50:	b940      	cbnz	r0, 8006c64 <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
 8006c52:	9b01      	ldr	r3, [sp, #4]
 8006c54:	682a      	ldr	r2, [r5, #0]
 8006c56:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	40a3      	lsls	r3, r4
 8006c5c:	421a      	tst	r2, r3
 8006c5e:	bf14      	ite	ne
 8006c60:	2001      	movne	r0, #1
 8006c62:	2000      	moveq	r0, #0
}
 8006c64:	b003      	add	sp, #12
 8006c66:	bd30      	pop	{r4, r5, pc}

08006c68 <gpio_pin_configure_dt.constprop.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
 8006c68:	4603      	mov	r3, r0
 8006c6a:	b470      	push	{r4, r5, r6}
				  spec->pin,
 8006c6c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
 8006c6e:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
 8006c70:	6800      	ldr	r0, [r0, #0]
 8006c72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006c76:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
 8006c78:	6905      	ldr	r5, [r0, #16]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006c7a:	f013 0f01 	tst.w	r3, #1
	const struct gpio_driver_api *api =
 8006c7e:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006c80:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006c82:	fa04 f401 	lsl.w	r4, r4, r1
 8006c86:	bf14      	ite	ne
 8006c88:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006c8a:	43a3      	biceq	r3, r4
 8006c8c:	602b      	str	r3, [r5, #0]
	ret = api->pin_configure(port, pin, flags);
 8006c8e:	6833      	ldr	r3, [r6, #0]
}
 8006c90:	bc70      	pop	{r4, r5, r6}
	ret = api->pin_configure(port, pin, flags);
 8006c92:	4718      	bx	r3

08006c94 <gpio_pin_configure_dt.constprop.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
 8006c94:	4603      	mov	r3, r0
 8006c96:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
 8006c98:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
 8006c9a:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 8006c9c:	88db      	ldrh	r3, [r3, #6]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8006c9e:	07da      	lsls	r2, r3, #31
	struct gpio_driver_data *data =
 8006ca0:	6906      	ldr	r6, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006ca2:	f04f 0501 	mov.w	r5, #1
	const struct gpio_driver_api *api =
 8006ca6:	6887      	ldr	r7, [r0, #8]
	return gpio_pin_configure(spec->port,
 8006ca8:	bf54      	ite	pl
 8006caa:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006cae:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006cb2:	6834      	ldr	r4, [r6, #0]
 8006cb4:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8006cb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006cba:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006cbc:	bf4c      	ite	mi
 8006cbe:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006cc0:	43ac      	bicpl	r4, r5
 8006cc2:	6034      	str	r4, [r6, #0]
	ret = api->pin_configure(port, pin, flags);
 8006cc4:	683b      	ldr	r3, [r7, #0]
}
 8006cc6:	bcf0      	pop	{r4, r5, r6, r7}
	ret = api->pin_configure(port, pin, flags);
 8006cc8:	4718      	bx	r3

08006cca <foc_posloop>:
}
 8006cca:	2000      	movs	r0, #0
 8006ccc:	4770      	bx	lr

08006cce <foc_openloop>:
static int foc_openloop(const struct device* dev)
 8006cce:	2000      	movs	r0, #0
 8006cd0:	4770      	bx	lr

08006cd2 <foc_currentloop>:
static int foc_currentloop(const struct device* dev)
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	4770      	bx	lr

08006cd6 <foc_start>:
//todo
void foc_start(const struct device* dev)
{
    const struct foc_config *cfg = dev->config;
    const struct device *devc = cfg->pwm;
 8006cd6:	6843      	ldr	r3, [r0, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
     api->start(dev);
 8006cda:	6883      	ldr	r3, [r0, #8]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4718      	bx	r3

08006ce0 <main>:
extern void motor_thread_entry(void *p1, void *p2, void *p3);

int main(void)
{
    // motor_thread_creat(NULL);
    motor_thread_entry(NULL,NULL,NULL);
 8006ce0:	2200      	movs	r2, #0
{
 8006ce2:	b508      	push	{r3, lr}
    motor_thread_entry(NULL,NULL,NULL);
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f7fa f94e 	bl	8000f88 <motor_thread_entry>
	return z_impl_k_sleep(timeout);
 8006cec:	2100      	movs	r1, #0
 8006cee:	200a      	movs	r0, #10
 8006cf0:	f001 f958 	bl	8007fa4 <z_impl_k_sleep>
 8006cf4:	e7fa      	b.n	8006cec <main+0xc>

08006cf6 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8006cf6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8006cf8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8006cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 8006d00:	bf2c      	ite	cs
 8006d02:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 8006d06:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 8006d0a:	4770      	bx	lr

08006d0c <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 8006d0c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 8006d10:	6880      	ldr	r0, [r0, #8]
 8006d12:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8006d16:	bf2c      	ite	cs
 8006d18:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 8006d1c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 8006d20:	4770      	bx	lr

08006d22 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8006d22:	2201      	movs	r2, #1
{
 8006d24:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8006d26:	f7ff ffe6 	bl	8006cf6 <chunk_field>
}
 8006d2a:	40d0      	lsrs	r0, r2
 8006d2c:	bd08      	pop	{r3, pc}

08006d2e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8006d2e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8006d30:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8006d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d38:	d308      	bcc.n	8006d4c <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8006d3a:	684b      	ldr	r3, [r1, #4]
		if (used) {
 8006d3c:	b11a      	cbz	r2, 8006d46 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8006d42:	604b      	str	r3, [r1, #4]
 8006d44:	4770      	bx	lr
 8006d46:	f023 0301 	bic.w	r3, r3, #1
 8006d4a:	e7fa      	b.n	8006d42 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8006d4c:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 8006d4e:	b11a      	cbz	r2, 8006d58 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8006d50:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8006d54:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8006d56:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8006d58:	f023 0301 	bic.w	r3, r3, #1
 8006d5c:	e7fa      	b.n	8006d54 <set_chunk_used+0x26>

08006d5e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8006d5e:	0053      	lsls	r3, r2, #1
 8006d60:	2201      	movs	r2, #1
 8006d62:	f7ff bfd3 	b.w	8006d0c <chunk_set>

08006d66 <bucket_idx.isra.0>:
	return big_heap(h) && (chunk_size(h, c) == 1U);
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 8006d66:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8006d6a:	f101 0001 	add.w	r0, r1, #1
	return big_heap(h) ? 8 : 4;
 8006d6e:	bf34      	ite	cc
 8006d70:	2304      	movcc	r3, #4
 8006d72:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8006d74:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8006d76:	eba0 00d3 	sub.w	r0, r0, r3, lsr #3
	return 31 - __builtin_clz(usable_sz);
 8006d7a:	fab0 f080 	clz	r0, r0
}
 8006d7e:	f1c0 001f 	rsb	r0, r0, #31
 8006d82:	4770      	bx	lr

08006d84 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8006d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 8006d88:	6886      	ldr	r6, [r0, #8]
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	4604      	mov	r4, r0
	return big_heap(h) && (chunk_size(h, c) == 1U);
 8006d8e:	f7ff ffc8 	bl	8006d22 <chunk_size>
 8006d92:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8006d96:	4601      	mov	r1, r0
 8006d98:	d301      	bcc.n	8006d9e <free_list_add+0x1a>
 8006d9a:	2801      	cmp	r0, #1
 8006d9c:	d032      	beq.n	8006e04 <free_list_add+0x80>
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ffe1 	bl	8006d66 <bucket_idx.isra.0>
	if (b->next == 0U) {
 8006da4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 8006da8:	690e      	ldr	r6, [r1, #16]
 8006daa:	b996      	cbnz	r6, 8006dd2 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
 8006dac:	2201      	movs	r2, #1
 8006dae:	68e3      	ldr	r3, [r4, #12]
 8006db0:	4082      	lsls	r2, r0
	chunk_set(h, c, FREE_PREV, prev);
 8006db2:	4620      	mov	r0, r4
 8006db4:	4313      	orrs	r3, r2
 8006db6:	2202      	movs	r2, #2
 8006db8:	60e3      	str	r3, [r4, #12]
 8006dba:	462b      	mov	r3, r5
		b->next = c;
 8006dbc:	610d      	str	r5, [r1, #16]
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f7ff ffa4 	bl	8006d0c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8006dc8:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 8006dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dce:	f7ff bf9d 	b.w	8006d0c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f7ff ff8d 	bl	8006cf6 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 8006de0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8006de2:	4620      	mov	r0, r4
 8006de4:	f7ff ff92 	bl	8006d0c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8006de8:	2203      	movs	r2, #3
 8006dea:	4633      	mov	r3, r6
 8006dec:	4629      	mov	r1, r5
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff ff8c 	bl	8006d0c <chunk_set>
 8006df4:	4639      	mov	r1, r7
 8006df6:	462b      	mov	r3, r5
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f7ff ff87 	bl	8006d0c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8006dfe:	2202      	movs	r2, #2
 8006e00:	4631      	mov	r1, r6
 8006e02:	e7e1      	b.n	8006dc8 <free_list_add+0x44>
 8006e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e08 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8006e08:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006e0c:	bf2c      	ite	cs
 8006e0e:	2308      	movcs	r3, #8
 8006e10:	2304      	movcc	r3, #4
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8006e12:	1ad2      	subs	r2, r2, r3
{
 8006e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8006e18:	188c      	adds	r4, r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8006e1a:	1dcd      	adds	r5, r1, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8006e1c:	2600      	movs	r6, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8006e1e:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8006e22:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8006e26:	1b64      	subs	r4, r4, r5
	heap->heap = h;
 8006e28:	6005      	str	r5, [r0, #0]
	h->avail_buckets = 0;
 8006e2a:	60ee      	str	r6, [r5, #12]
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8006e2c:	08e4      	lsrs	r4, r4, #3

#if CONFIG_SYS_HEAP_ARRAY_SIZE
	sys_heap_array_save(heap);
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
 8006e32:	60ac      	str	r4, [r5, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8006e34:	f7ff ff97 	bl	8006d66 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8006e38:	1d42      	adds	r2, r0, #5
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	4631      	mov	r1, r6
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8006e3e:	ea4f 0282 	mov.w	r2, r2, lsl #2
		h->buckets[i].next = 0;
 8006e42:	f105 0010 	add.w	r0, r5, #16
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8006e46:	f102 0707 	add.w	r7, r2, #7
 8006e4a:	f1a2 0210 	sub.w	r2, r2, #16
 8006e4e:	bfb8      	it	lt
 8006e50:	4632      	movlt	r2, r6
 8006e52:	08ff      	lsrs	r7, r7, #3
 8006e54:	f001 f935 	bl	80080c2 <memset>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 8006e58:	4631      	mov	r1, r6
 8006e5a:	463a      	mov	r2, r7
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f7ff ff7e 	bl	8006d5e <set_chunk_size>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8006e62:	eba4 0807 	sub.w	r8, r4, r7
	chunk_set(h, c, LEFT_SIZE, size);
 8006e66:	4633      	mov	r3, r6
 8006e68:	4632      	mov	r2, r6
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f7ff ff4d 	bl	8006d0c <chunk_set>
	set_chunk_used(h, 0, true);
 8006e72:	4628      	mov	r0, r5
 8006e74:	4631      	mov	r1, r6
 8006e76:	2201      	movs	r2, #1
 8006e78:	f7ff ff59 	bl	8006d2e <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	4639      	mov	r1, r7
 8006e80:	f7ff ff6d 	bl	8006d5e <set_chunk_size>
 8006e84:	463b      	mov	r3, r7
 8006e86:	4632      	mov	r2, r6
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f7ff ff3e 	bl	8006d0c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f7ff ff63 	bl	8006d5e <set_chunk_size>
 8006e98:	4643      	mov	r3, r8
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f7ff ff34 	bl	8006d0c <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f7ff ff40 	bl	8006d2e <set_chunk_used>

	free_list_add(h, chunk0_size);
 8006eae:	4639      	mov	r1, r7
}
 8006eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
 8006eb4:	f7ff bf66 	b.w	8006d84 <free_list_add>

08006eb8 <cbpprintf_external>:
{
 8006eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	4617      	mov	r7, r2
	if (buf == NULL) {
 8006ec2:	4698      	mov	r8, r3
 8006ec4:	b32b      	cbz	r3, 8006f12 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
 8006ec6:	f898 4000 	ldrb.w	r4, [r8]
	for (i = 0; i < s_nbr; i++) {
 8006eca:	f04f 0a00 	mov.w	sl, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
 8006ece:	f893 9001 	ldrb.w	r9, [r3, #1]
	args_size = hdr->hdr.desc.len * sizeof(int);
 8006ed2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 8006ed4:	78db      	ldrb	r3, [r3, #3]
 8006ed6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
 8006eda:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 8006ede:	441c      	add	r4, r3
 8006ee0:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
 8006ee2:	45ca      	cmp	sl, r9
 8006ee4:	d309      	bcc.n	8006efa <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
 8006ee6:	f108 0308 	add.w	r3, r8, #8
 8006eea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006eee:	4639      	mov	r1, r7
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	46ac      	mov	ip, r5
}
 8006ef4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 8006ef8:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 8006efa:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
 8006efe:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
 8006f02:	4620      	mov	r0, r4
		*ps = s;
 8006f04:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
 8006f08:	f7f9 f9fa 	bl	8000300 <strlen>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 8006f10:	e7e7      	b.n	8006ee2 <cbpprintf_external+0x2a>
}
 8006f12:	f06f 0015 	mvn.w	r0, #21
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006f1a <is_ptr>:
{
 8006f1a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
 8006f1c:	2500      	movs	r5, #0
{
 8006f1e:	4602      	mov	r2, r0
	bool mod = false;
 8006f20:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
 8006f22:	4614      	mov	r4, r2
 8006f24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f28:	b90b      	cbnz	r3, 8006f2e <is_ptr+0x14>
					return false;
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	e009      	b.n	8006f42 <is_ptr+0x28>
		if (mod) {
 8006f2e:	b198      	cbz	r0, 8006f58 <is_ptr+0x3e>
			if (cnt == n) {
 8006f30:	428d      	cmp	r5, r1
 8006f32:	d107      	bne.n	8006f44 <is_ptr+0x2a>
				if (c == 'p') {
 8006f34:	2b70      	cmp	r3, #112	; 0x70
 8006f36:	d004      	beq.n	8006f42 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
 8006f38:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8006f3c:	2a3a      	cmp	r2, #58	; 0x3a
 8006f3e:	d80b      	bhi.n	8006f58 <is_ptr+0x3e>
					return false;
 8006f40:	2000      	movs	r0, #0
}
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
 8006f44:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
 8006f48:	2e3a      	cmp	r6, #58	; 0x3a
 8006f4a:	d805      	bhi.n	8006f58 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
 8006f4c:	7853      	ldrb	r3, [r2, #1]
				cnt++;
 8006f4e:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
 8006f50:	1c94      	adds	r4, r2, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0e9      	beq.n	8006f2a <is_ptr+0x10>
 8006f56:	2000      	movs	r0, #0
		if (c == '%') {
 8006f58:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
 8006f5a:	4622      	mov	r2, r4
			mod = !mod;
 8006f5c:	bf08      	it	eq
 8006f5e:	f080 0001 	eoreq.w	r0, r0, #1
 8006f62:	e7de      	b.n	8006f22 <is_ptr+0x8>

08006f64 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8006f64:	b40f      	push	{r0, r1, r2, r3}
 8006f66:	b507      	push	{r0, r1, r2, lr}
 8006f68:	a904      	add	r1, sp, #16
 8006f6a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8006f6e:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
 8006f70:	f000 fa96 	bl	80074a0 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
 8006f74:	b003      	add	sp, #12
 8006f76:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f7a:	b004      	add	sp, #16
 8006f7c:	4770      	bx	lr

08006f7e <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
 8006f7e:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
 8006f80:	6903      	ldr	r3, [r0, #16]
{
 8006f82:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
 8006f84:	f013 0008 	ands.w	r0, r3, #8
 8006f88:	d109      	bne.n	8006f9e <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	68d4      	ldr	r4, [r2, #12]
 8006f8e:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
 8006f90:	bf97      	itett	ls
 8006f92:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
 8006f94:	1ae3      	subhi	r3, r4, r3

	return true;
 8006f96:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
 8006f98:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
 8006f9a:	600b      	str	r3, [r1, #0]
}
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	2300      	movs	r3, #0
		return false;
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	e7fa      	b.n	8006f9a <free_space+0x1c>

08006fa4 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
 8006fa4:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
 8006fa6:	a901      	add	r1, sp, #4
{
 8006fa8:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 8006faa:	f7ff ffe8 	bl	8006f7e <free_space>
 8006fae:	b120      	cbz	r0, 8006fba <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 8006fb0:	9b01      	ldr	r3, [sp, #4]
 8006fb2:	68e2      	ldr	r2, [r4, #12]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
 8006fba:	6a20      	ldr	r0, [r4, #32]
 8006fbc:	9b01      	ldr	r3, [sp, #4]
 8006fbe:	1ac0      	subs	r0, r0, r3
}
 8006fc0:	3801      	subs	r0, #1
 8006fc2:	b002      	add	sp, #8
 8006fc4:	bd10      	pop	{r4, pc}

08006fc6 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 8006fca:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8006fcc:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 8006fce:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8006fd0:	07d2      	lsls	r2, r2, #31
 8006fd2:	d502      	bpl.n	8006fda <idx_inc+0x14>
		return i & (buffer->size - 1);
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
 8006fd8:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 8006fda:	4298      	cmp	r0, r3
 8006fdc:	bf28      	it	cs
 8006fde:	1ac0      	subcs	r0, r0, r3
 8006fe0:	e7fa      	b.n	8006fd8 <idx_inc+0x12>

08006fe2 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 8006fe8:	68c1      	ldr	r1, [r0, #12]
 8006fea:	f7ff ffec 	bl	8006fc6 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
 8006fee:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 8006ff0:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
 8006ff2:	f023 0308 	bic.w	r3, r3, #8
 8006ff6:	6123      	str	r3, [r4, #16]
}
 8006ff8:	bd10      	pop	{r4, pc}

08006ffa <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 8006ffa:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
 8006ffc:	008b      	lsls	r3, r1, #2
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8006ffe:	69c2      	ldr	r2, [r0, #28]
{
 8007000:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8007002:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 8007004:	f043 0302 	orr.w	r3, r3, #2
{
 8007008:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800700a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800700e:	462a      	mov	r2, r5
 8007010:	6801      	ldr	r1, [r0, #0]
 8007012:	f7ff ffd8 	bl	8006fc6 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 8007016:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8007018:	6861      	ldr	r1, [r4, #4]
 800701a:	462a      	mov	r2, r5
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 800701c:	4298      	cmp	r0, r3
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800701e:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8007020:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
 8007022:	bf02      	ittt	eq
 8007024:	6923      	ldreq	r3, [r4, #16]
 8007026:	f043 0308 	orreq.w	r3, r3, #8
 800702a:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800702c:	f7ff ffcb 	bl	8006fc6 <idx_inc>
 8007030:	6060      	str	r0, [r4, #4]
}
 8007032:	bd38      	pop	{r3, r4, r5, pc}

08007034 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
 8007034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 8007038:	68c7      	ldr	r7, [r0, #12]
{
 800703a:	469b      	mov	fp, r3
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800703c:	69c6      	ldr	r6, [r0, #28]
{
 800703e:	4604      	mov	r4, r0
 8007040:	4688      	mov	r8, r1
 8007042:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 8007044:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 8007048:	9300      	str	r3, [sp, #0]
	if (item->hdr.busy && !item->hdr.valid) {
 800704a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	2b02      	cmp	r3, #2
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	d00b      	beq.n	8007072 <drop_item_locked+0x3e>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
 800705a:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
 800705c:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	079b      	lsls	r3, r3, #30
 8007064:	d413      	bmi.n	800708e <drop_item_locked+0x5a>
		return false;
 8007066:	f04f 0a00 	mov.w	sl, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
 800706a:	4650      	mov	r0, sl
 800706c:	b003      	add	sp, #12
 800706e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
 8007072:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
 8007076:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
 8007078:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
 800707a:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
 800707e:	d0ef      	beq.n	8007060 <drop_item_locked+0x2c>
		rd_idx_inc(buffer, skip_wlen);
 8007080:	f7ff ffaf 	bl	8006fe2 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 8007084:	68e3      	ldr	r3, [r4, #12]
 8007086:	60a3      	str	r3, [r4, #8]
		return true;
 8007088:	f04f 0a01 	mov.w	sl, #1
 800708c:	e7ed      	b.n	800706a <drop_item_locked+0x36>
	uint32_t rd_wlen = buffer->get_wlen(item);
 800708e:	69a3      	ldr	r3, [r4, #24]
 8007090:	9800      	ldr	r0, [sp, #0]
 8007092:	4798      	blx	r3
	return item->hdr.valid;
 8007094:	f816 2027 	ldrb.w	r2, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
 8007098:	4605      	mov	r5, r0
	if (!is_valid(item)) {
 800709a:	f012 0a01 	ands.w	sl, r2, #1
 800709e:	d0e2      	beq.n	8007066 <drop_item_locked+0x32>
	} else if (item->hdr.busy) {
 80070a0:	f012 0202 	ands.w	r2, r2, #2
 80070a4:	d01f      	beq.n	80070e6 <drop_item_locked+0xb2>
		if (free_wlen) {
 80070a6:	f1b8 0f00 	cmp.w	r8, #0
 80070aa:	d003      	beq.n	80070b4 <drop_item_locked+0x80>
			add_skip_item(buffer, free_wlen);
 80070ac:	4641      	mov	r1, r8
 80070ae:	4620      	mov	r0, r4
 80070b0:	f7ff ffa3 	bl	8006ffa <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 80070b4:	6861      	ldr	r1, [r4, #4]
 80070b6:	462a      	mov	r2, r5
 80070b8:	4620      	mov	r0, r4
 80070ba:	f7ff ff84 	bl	8006fc6 <idx_inc>
 80070be:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
 80070c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80070c4:	4291      	cmp	r1, r2
 80070c6:	d106      	bne.n	80070d6 <drop_item_locked+0xa2>
			ret = false;
 80070c8:	f04f 0a00 	mov.w	sl, #0
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
 80070cc:	462a      	mov	r2, r5
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff ff79 	bl	8006fc6 <idx_inc>
 80070d4:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
 80070d6:	68a2      	ldr	r2, [r4, #8]
 80070d8:	6022      	str	r2, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
 80070da:	60e2      	str	r2, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
 80070dc:	6922      	ldr	r2, [r4, #16]
 80070de:	f042 0208 	orr.w	r2, r2, #8
 80070e2:	6122      	str	r2, [r4, #16]
		return ret;
 80070e4:	e7c1      	b.n	800706a <drop_item_locked+0x36>
		rd_idx_inc(buffer, rd_wlen);
 80070e6:	4601      	mov	r1, r0
 80070e8:	4620      	mov	r0, r4
 80070ea:	9201      	str	r2, [sp, #4]
 80070ec:	f7ff ff79 	bl	8006fe2 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 80070f0:	68e3      	ldr	r3, [r4, #12]
 80070f2:	60a3      	str	r3, [r4, #8]
		if (free_wlen) {
 80070f4:	f1b8 0f00 	cmp.w	r8, #0
 80070f8:	d004      	beq.n	8007104 <drop_item_locked+0xd0>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
 80070fa:	6821      	ldr	r1, [r4, #0]
 80070fc:	69e3      	ldr	r3, [r4, #28]
 80070fe:	9a01      	ldr	r2, [sp, #4]
 8007100:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
 8007104:	eb05 0208 	add.w	r2, r5, r8
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 8007108:	4620      	mov	r0, r4
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
 800710a:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 800710e:	6821      	ldr	r1, [r4, #0]
 8007110:	f7ff ff59 	bl	8006fc6 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
 8007114:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 8007116:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
 8007118:	f043 0308 	orr.w	r3, r3, #8
 800711c:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
 800711e:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
 8007122:	f36f 0300 	bfc	r3, #0, #1
 8007126:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
 800712a:	9b00      	ldr	r3, [sp, #0]
 800712c:	f8c9 3000 	str.w	r3, [r9]
	return true;
 8007130:	e7aa      	b.n	8007088 <drop_item_locked+0x54>

08007132 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
 8007132:	b570      	push	{r4, r5, r6, lr}
 8007134:	4604      	mov	r4, r0
 8007136:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
 8007138:	f7ff ff45 	bl	8006fc6 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	4283      	cmp	r3, r0
 8007140:	d105      	bne.n	800714e <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
 8007142:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
 8007144:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
 8007146:	f023 0308 	bic.w	r3, r3, #8
 800714a:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
 800714c:	bd70      	pop	{r4, r5, r6, pc}
	union mpsc_pbuf_generic skip = {
 800714e:	00ab      	lsls	r3, r5, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
 8007150:	69e2      	ldr	r2, [r4, #28]
	buffer->wr_idx = idx_inc(buffer,
 8007152:	4620      	mov	r0, r4
	union mpsc_pbuf_generic skip = {
 8007154:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
 8007158:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
 800715c:	462a      	mov	r2, r5
 800715e:	6861      	ldr	r1, [r4, #4]
 8007160:	f7ff ff31 	bl	8006fc6 <idx_inc>
 8007164:	6060      	str	r0, [r4, #4]
 8007166:	e7f1      	b.n	800714c <post_drop_action+0x1a>

08007168 <max_utilization_update>:
{
 8007168:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 800716a:	6903      	ldr	r3, [r0, #16]
{
 800716c:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 800716e:	075b      	lsls	r3, r3, #29
 8007170:	d506      	bpl.n	8007180 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8007172:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007174:	f7ff ff16 	bl	8006fa4 <get_usage>
 8007178:	4285      	cmp	r5, r0
 800717a:	bf2c      	ite	cs
 800717c:	6265      	strcs	r5, [r4, #36]	; 0x24
 800717e:	6260      	strcc	r0, [r4, #36]	; 0x24
}
 8007180:	bd38      	pop	{r3, r4, r5, pc}

08007182 <mpsc_pbuf_init>:
{
 8007182:	b538      	push	{r3, r4, r5, lr}
 8007184:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
 8007186:	221c      	movs	r2, #28
 8007188:	2100      	movs	r1, #0
{
 800718a:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
 800718c:	f000 ff99 	bl	80080c2 <memset>
	buffer->get_wlen = cfg->get_wlen;
 8007190:	68eb      	ldr	r3, [r5, #12]
	buffer->max_usage = 0;
 8007192:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
 8007194:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
 8007196:	68ab      	ldr	r3, [r5, #8]
 8007198:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
 800719a:	682b      	ldr	r3, [r5, #0]
 800719c:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
 800719e:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
 80071a0:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
 80071a2:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
 80071a4:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
 80071a6:	b123      	cbz	r3, 80071b2 <mpsc_pbuf_init+0x30>
 80071a8:	1e59      	subs	r1, r3, #1
 80071aa:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 80071ac:	bf08      	it	eq
 80071ae:	f042 0201 	orreq.w	r2, r2, #1
 80071b2:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 80071b4:	2201      	movs	r2, #1
 80071b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80071ba:	2100      	movs	r1, #0
}
 80071bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c0:	f000 be48 	b.w	8007e54 <z_impl_k_sem_init>

080071c4 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
 80071ca:	2500      	movs	r5, #0
{
 80071cc:	4604      	mov	r4, r0
 80071ce:	460e      	mov	r6, r1
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
 80071d4:	6a03      	ldr	r3, [r0, #32]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
 80071d6:	46a9      	mov	r9, r5
	union mpsc_pbuf_generic *dropped_item = NULL;
 80071d8:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
 80071da:	428b      	cmp	r3, r1
	uint32_t tmp_wr_idx_shift = 0;
 80071dc:	9505      	str	r5, [sp, #20]
	if (wlen > (buffer->size)) {
 80071de:	d339      	bcc.n	8007254 <mpsc_pbuf_alloc+0x90>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071e0:	f3ef 8b11 	mrs	fp, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80071e4:	2310      	movs	r3, #16
 80071e6:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80071ea:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
 80071ee:	9a05      	ldr	r2, [sp, #20]

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
 80071f0:	46d8      	mov	r8, fp
 80071f2:	b12a      	cbz	r2, 8007200 <mpsc_pbuf_alloc+0x3c>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
 80071f4:	4629      	mov	r1, r5
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7ff ff9b 	bl	8007132 <post_drop_action>
			tmp_wr_idx_shift = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
 8007200:	a904      	add	r1, sp, #16
 8007202:	4620      	mov	r0, r4
 8007204:	f7ff febb 	bl	8006f7e <free_space>

		if (free_wlen >= wlen) {
 8007208:	9904      	ldr	r1, [sp, #16]
		wrap = free_space(buffer, &free_wlen);
 800720a:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
 800720c:	42b1      	cmp	r1, r6
 800720e:	d32a      	bcc.n	8007266 <mpsc_pbuf_alloc+0xa2>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 8007210:	6822      	ldr	r2, [r4, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8007212:	4620      	mov	r0, r4
			item =
 8007214:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
 8007216:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
 800721a:	eb03 0982 	add.w	r9, r3, r2, lsl #2
			item->hdr.valid = 0;
 800721e:	f021 0103 	bic.w	r1, r1, #3
 8007222:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8007226:	4632      	mov	r2, r6
 8007228:	6821      	ldr	r1, [r4, #0]
 800722a:	f7ff fecc 	bl	8006fc6 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 800722e:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8007230:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 8007232:	4298      	cmp	r0, r3
 8007234:	d012      	beq.n	800725c <mpsc_pbuf_alloc+0x98>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
 8007236:	2700      	movs	r7, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007238:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("isb 0xF":::"memory");
 800723c:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
 8007240:	9903      	ldr	r1, [sp, #12]
 8007242:	b129      	cbz	r1, 8007250 <mpsc_pbuf_alloc+0x8c>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
 8007244:	6962      	ldr	r2, [r4, #20]
 8007246:	b10a      	cbz	r2, 800724c <mpsc_pbuf_alloc+0x88>
				buffer->notify_drop(buffer, dropped_item);
 8007248:	4620      	mov	r0, r4
 800724a:	4790      	blx	r2
			}
			dropped_item = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
 8007250:	2f00      	cmp	r7, #0
 8007252:	d1c5      	bne.n	80071e0 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 8007254:	4648      	mov	r0, r9
 8007256:	b007      	add	sp, #28
 8007258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
 800725c:	6923      	ldr	r3, [r4, #16]
 800725e:	f043 0308 	orr.w	r3, r3, #8
 8007262:	6123      	str	r3, [r4, #16]
 8007264:	e7e7      	b.n	8007236 <mpsc_pbuf_alloc+0x72>
		} else if (wrap) {
 8007266:	b118      	cbz	r0, 8007270 <mpsc_pbuf_alloc+0xac>
			add_skip_item(buffer, free_wlen);
 8007268:	4620      	mov	r0, r4
 800726a:	f7ff fec6 	bl	8006ffa <add_skip_item>
			cont = true;
 800726e:	e7e3      	b.n	8007238 <mpsc_pbuf_alloc+0x74>
		} else if (IS_ENABLED(CONFIG_MULTITHREADING) && !K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8007270:	9b00      	ldr	r3, [sp, #0]
 8007272:	ea5a 0203 	orrs.w	r2, sl, r3
 8007276:	d01c      	beq.n	80072b2 <mpsc_pbuf_alloc+0xee>
 8007278:	9101      	str	r1, [sp, #4]
			   !k_is_in_isr() && arch_irq_unlocked(key.key)) {
 800727a:	f000 fdf7 	bl	8007e6c <k_is_in_isr>
		} else if (IS_ENABLED(CONFIG_MULTITHREADING) && !K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800727e:	9901      	ldr	r1, [sp, #4]
 8007280:	b9b8      	cbnz	r0, 80072b2 <mpsc_pbuf_alloc+0xee>
			   !k_is_in_isr() && arch_irq_unlocked(key.key)) {
 8007282:	f1bb 0f00 	cmp.w	fp, #0
 8007286:	d114      	bne.n	80072b2 <mpsc_pbuf_alloc+0xee>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007288:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("isb 0xF":::"memory");
 800728c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
 8007290:	4652      	mov	r2, sl
 8007292:	9b00      	ldr	r3, [sp, #0]
 8007294:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007298:	f7fd fd86 	bl	8004da8 <z_impl_k_sem_take>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800729c:	f3ef 8811 	mrs	r8, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80072a0:	2310      	movs	r3, #16
 80072a2:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80072a6:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
 80072aa:	fab0 f780 	clz	r7, r0
 80072ae:	097f      	lsrs	r7, r7, #5
			   !k_is_in_isr() && arch_irq_unlocked(key.key)) {
 80072b0:	e7c2      	b.n	8007238 <mpsc_pbuf_alloc+0x74>
			cont = drop_item_locked(buffer, free_wlen,
 80072b2:	ab05      	add	r3, sp, #20
 80072b4:	aa03      	add	r2, sp, #12
 80072b6:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
 80072b8:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
 80072ba:	f7ff febb 	bl	8007034 <drop_item_locked>
 80072be:	4607      	mov	r7, r0
 80072c0:	e7ba      	b.n	8007238 <mpsc_pbuf_alloc+0x74>

080072c2 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 80072c2:	b570      	push	{r4, r5, r6, lr}
 80072c4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 80072c6:	6983      	ldr	r3, [r0, #24]
 80072c8:	4608      	mov	r0, r1
{
 80072ca:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 80072cc:	4798      	blx	r3
 80072ce:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072d0:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80072d4:	2310      	movs	r3, #16
 80072d6:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80072da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 80072de:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 80072e0:	4620      	mov	r0, r4
	item->hdr.valid = 1;
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 80072e8:	6861      	ldr	r1, [r4, #4]
 80072ea:	f7ff fe6c 	bl	8006fc6 <idx_inc>
 80072ee:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 80072f0:	4620      	mov	r0, r4
 80072f2:	f7ff ff39 	bl	8007168 <max_utilization_update>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80072f6:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 80072fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
 80072fe:	bd70      	pop	{r4, r5, r6, pc}

08007300 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 8007300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007304:	4604      	mov	r4, r0
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007306:	2710      	movs	r7, #16
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007308:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800730c:	f387 8812 	msr	BASEPRI_MAX, r7
  __ASM volatile ("isb 0xF":::"memory");
 8007310:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	f013 0f08 	tst.w	r3, #8
 800731a:	68a3      	ldr	r3, [r4, #8]
 800731c:	d102      	bne.n	8007324 <mpsc_pbuf_claim+0x24>
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	4293      	cmp	r3, r2
 8007322:	d900      	bls.n	8007326 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
 8007324:	6a22      	ldr	r2, [r4, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 8007326:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
 8007328:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
 800732a:	b932      	cbnz	r2, 800733a <mpsc_pbuf_claim+0x3a>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800732c:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 8007330:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
 8007334:	f04f 0800 	mov.w	r8, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
 8007338:	e033      	b.n	80073a2 <mpsc_pbuf_claim+0xa2>
	return !item->hdr.valid && !item->hdr.busy;
 800733a:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
 800733e:	eb01 0883 	add.w	r8, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
 8007342:	f012 0003 	ands.w	r0, r2, #3
 8007346:	d0f1      	beq.n	800732c <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
 8007348:	2802      	cmp	r0, #2
 800734a:	d103      	bne.n	8007354 <mpsc_pbuf_claim+0x54>
		return item->skip.len;
 800734c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
 8007350:	08ad      	lsrs	r5, r5, #2
 8007352:	d105      	bne.n	8007360 <mpsc_pbuf_claim+0x60>
 8007354:	07d0      	lsls	r0, r2, #31
 8007356:	d412      	bmi.n	800737e <mpsc_pbuf_claim+0x7e>
					skip ? skip : buffer->get_wlen(item);
 8007358:	69a3      	ldr	r3, [r4, #24]
 800735a:	4640      	mov	r0, r8
 800735c:	4798      	blx	r3
 800735e:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 8007360:	68a1      	ldr	r1, [r4, #8]
 8007362:	462a      	mov	r2, r5
 8007364:	4620      	mov	r0, r4
 8007366:	f7ff fe2e 	bl	8006fc6 <idx_inc>
				rd_idx_inc(buffer, inc);
 800736a:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
 800736c:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
 800736e:	4620      	mov	r0, r4
 8007370:	f7ff fe37 	bl	8006fe2 <rd_idx_inc>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007374:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 8007378:	f3bf 8f6f 	isb	sy
	} while (cont);
 800737c:	e7c4      	b.n	8007308 <mpsc_pbuf_claim+0x8>
				item->hdr.busy = 1;
 800737e:	f042 0202 	orr.w	r2, r2, #2
						buffer->get_wlen(item));
 8007382:	4640      	mov	r0, r8
				item->hdr.busy = 1;
 8007384:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 8007388:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
 800738a:	69a3      	ldr	r3, [r4, #24]
 800738c:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
 800738e:	4629      	mov	r1, r5
						buffer->get_wlen(item));
 8007390:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
 8007392:	4620      	mov	r0, r4
 8007394:	f7ff fe17 	bl	8006fc6 <idx_inc>
				buffer->tmp_rd_idx =
 8007398:	60a0      	str	r0, [r4, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800739a:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("isb 0xF":::"memory");
 800739e:	f3bf 8f6f 	isb	sy
}
 80073a2:	4640      	mov	r0, r8
 80073a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073a8 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 80073ac:	6983      	ldr	r3, [r0, #24]
 80073ae:	4608      	mov	r0, r1
{
 80073b0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 80073b2:	4798      	blx	r3
 80073b4:	4606      	mov	r6, r0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073b6:	f3ef 8711 	mrs	r7, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80073ba:	2310      	movs	r3, #16
 80073bc:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 80073c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 80073c4:	782b      	ldrb	r3, [r5, #0]
 80073c6:	f36f 0300 	bfc	r3, #0, #1
 80073ca:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 80073cc:	6923      	ldr	r3, [r4, #16]
 80073ce:	079b      	lsls	r3, r3, #30
 80073d0:	d505      	bpl.n	80073de <mpsc_pbuf_free+0x36>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 80073d2:	68e2      	ldr	r2, [r4, #12]
 80073d4:	69e3      	ldr	r3, [r4, #28]
 80073d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 80073da:	429d      	cmp	r5, r3
 80073dc:	d11a      	bne.n	8007414 <mpsc_pbuf_free+0x6c>
		witem->hdr.busy = 0;
 80073de:	782b      	ldrb	r3, [r5, #0]
 80073e0:	f36f 0341 	bfc	r3, #1, #1
 80073e4:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
 80073e6:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 80073ea:	4299      	cmp	r1, r3
 80073ec:	d104      	bne.n	80073f8 <mpsc_pbuf_free+0x50>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
 80073ee:	4632      	mov	r2, r6
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7ff fde8 	bl	8006fc6 <idx_inc>
 80073f6:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
 80073f8:	4631      	mov	r1, r6
 80073fa:	4620      	mov	r0, r4
 80073fc:	f7ff fdf1 	bl	8006fe2 <rd_idx_inc>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007400:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("isb 0xF":::"memory");
 8007404:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 8007408:	f104 0028 	add.w	r0, r4, #40	; 0x28

	k_spin_unlock(&buffer->lock, key);
	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_sem_give(&buffer->sem);
	}
}
 800740c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007410:	f7fd bc96 	b.w	8004d40 <z_impl_k_sem_give>
		witem->skip.len = wlen;
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	f360 039f 	bfi	r3, r0, #2, #30
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	e7f0      	b.n	8007400 <mpsc_pbuf_free+0x58>

0800741e <mpsc_pbuf_is_pending>:
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800741e:	f3ef 8111 	mrs	r1, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007422:	2310      	movs	r3, #16
 8007424:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8007428:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
 800742c:	6903      	ldr	r3, [r0, #16]
 800742e:	f013 0f08 	tst.w	r3, #8
 8007432:	6883      	ldr	r3, [r0, #8]
 8007434:	d102      	bne.n	800743c <mpsc_pbuf_is_pending+0x1e>
 8007436:	6842      	ldr	r2, [r0, #4]
 8007438:	4293      	cmp	r3, r2
 800743a:	d900      	bls.n	800743e <mpsc_pbuf_is_pending+0x20>
		*res = buffer->size - buffer->tmp_rd_idx;
 800743c:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800743e:	1ad3      	subs	r3, r2, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007440:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("isb 0xF":::"memory");
 8007444:	f3bf 8f6f 	isb	sy

	(void)available(buffer, &a);
	k_spin_unlock(&buffer->lock, key);

	return a ? true : false;
}
 8007448:	1e18      	subs	r0, r3, #0
 800744a:	bf18      	it	ne
 800744c:	2001      	movne	r0, #1
 800744e:	4770      	bx	lr

08007450 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_CHECK_INIT_PRIORITIES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_GENERATED_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
 8007450:	4770      	bx	lr

08007452 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
 8007452:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 8007454:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8007456:	bf5f      	itttt	pl
 8007458:	6803      	ldrpl	r3, [r0, #0]
 800745a:	8842      	ldrhpl	r2, [r0, #2]
 800745c:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
 8007460:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
 8007464:	bf5d      	ittte	pl
 8007466:	3017      	addpl	r0, #23
 8007468:	f020 0007 	bicpl.w	r0, r0, #7
 800746c:	0880      	lsrpl	r0, r0, #2
	return 0;
 800746e:	2000      	movmi	r0, #0
}
 8007470:	4770      	bx	lr

08007472 <dummy_timestamp>:
}
 8007472:	2000      	movs	r0, #0
 8007474:	4770      	bx	lr

08007476 <atomic_inc>:
{
 8007476:	4603      	mov	r3, r0
}
 8007478:	f3bf 8f5b 	dmb	ish
 800747c:	e853 0f00 	ldrex	r0, [r3]
 8007480:	1c42      	adds	r2, r0, #1
 8007482:	e843 2100 	strex	r1, r2, [r3]
 8007486:	2900      	cmp	r1, #0
 8007488:	d1f8      	bne.n	800747c <atomic_inc+0x6>
 800748a:	f3bf 8f5b 	dmb	ish
 800748e:	4770      	bx	lr

08007490 <default_lf_get_timestamp>:
{
 8007490:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8007492:	f000 fdde 	bl	8008052 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
 8007496:	220a      	movs	r2, #10
 8007498:	2300      	movs	r3, #0
 800749a:	f7f8 ff17 	bl	80002cc <__aeabi_uldivmod>
}
 800749e:	bd08      	pop	{r3, pc}

080074a0 <z_log_vprintk>:
{
 80074a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_log_msg_runtime_vcreate(Z_LOG_LOCAL_DOMAIN_ID, NULL,
 80074a2:	2300      	movs	r3, #0
 80074a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a8:	461a      	mov	r2, r3
 80074aa:	4619      	mov	r1, r3
 80074ac:	4618      	mov	r0, r3
 80074ae:	e9cd 3300 	strd	r3, r3, [sp]
 80074b2:	f7fa fdf7 	bl	80020a4 <z_log_msg_runtime_vcreate>
}
 80074b6:	b005      	add	sp, #20
 80074b8:	f85d fb04 	ldr.w	pc, [sp], #4

080074bc <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
 80074bc:	2001      	movs	r0, #1
 80074be:	f7fa bbb3 	b.w	8001c28 <z_log_dropped>

080074c2 <z_log_get_tag>:
}
 80074c2:	2000      	movs	r0, #0
 80074c4:	4770      	bx	lr

080074c6 <log_backend_enable>:

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
	backend->cb->level = level;
 80074c6:	6843      	ldr	r3, [r0, #4]
 80074c8:	71da      	strb	r2, [r3, #7]
	backend->cb->active = true;
 80074ca:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
 80074cc:	6843      	ldr	r3, [r0, #4]
 80074ce:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 80074d0:	6843      	ldr	r3, [r0, #4]
 80074d2:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 80074d4:	f7fa bb9a 	b.w	8001c0c <z_log_notify_backend_enabled>

080074d8 <z_cbprintf_cpy>:
{
 80074d8:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
 80074da:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
{
 80074de:	460c      	mov	r4, r1
 80074e0:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
 80074e2:	1b9b      	subs	r3, r3, r6
 80074e4:	428b      	cmp	r3, r1
 80074e6:	d30a      	bcc.n	80074fe <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
 80074e8:	6813      	ldr	r3, [r2, #0]
 80074ea:	460a      	mov	r2, r1
 80074ec:	4601      	mov	r1, r0
 80074ee:	1998      	adds	r0, r3, r6
 80074f0:	f000 fdd9 	bl	80080a6 <memcpy>
	desc->off += len;
 80074f4:	68ab      	ldr	r3, [r5, #8]
	return len;
 80074f6:	4620      	mov	r0, r4
	desc->off += len;
 80074f8:	4423      	add	r3, r4
 80074fa:	60ab      	str	r3, [r5, #8]
}
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
 80074fe:	f06f 001b 	mvn.w	r0, #27
 8007502:	e7fb      	b.n	80074fc <z_cbprintf_cpy+0x24>

08007504 <z_log_msg_finalize>:
{
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	460e      	mov	r6, r1
 8007508:	4615      	mov	r5, r2
 800750a:	4619      	mov	r1, r3
	if (!msg) {
 800750c:	4604      	mov	r4, r0
 800750e:	b918      	cbnz	r0, 8007518 <z_log_msg_finalize+0x14>
}
 8007510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 8007514:	f7fa bb88 	b.w	8001c28 <z_log_dropped>
	if (data) {
 8007518:	b133      	cbz	r3, 8007528 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
 800751a:	f3c2 234a 	ubfx	r3, r2, #9, #11
 800751e:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
 8007520:	0d12      	lsrs	r2, r2, #20
 8007522:	4418      	add	r0, r3
 8007524:	f000 fdbf 	bl	80080a6 <memcpy>
	z_log_msg_commit(msg);
 8007528:	4620      	mov	r0, r4
	msg->hdr.source = source;
 800752a:	e9c4 5600 	strd	r5, r6, [r4]
}
 800752e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
 8007532:	f7fa bd13 	b.w	8001f5c <z_log_msg_commit>

08007536 <z_log_msg_simple_create>:
{
 8007536:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t plen32 = len + CBPRINTF_DESC_SIZE32;
 800753a:	1c5f      	adds	r7, r3, #1
{
 800753c:	4606      	mov	r6, r0
 800753e:	460c      	mov	r4, r1
 8007540:	4615      	mov	r5, r2
	size_t plen8 = sizeof(uint32_t) * plen32 +
 8007542:	ea4f 0887 	mov.w	r8, r7, lsl #2
	struct log_msg *msg = z_log_msg_alloc(Z_LOG_MSG_ALIGNED_WLEN(plen8, 0));
 8007546:	f108 0017 	add.w	r0, r8, #23
 800754a:	f020 0007 	bic.w	r0, r0, #7
 800754e:	0880      	lsrs	r0, r0, #2
 8007550:	f7fa fbde 	bl	8001d10 <z_log_msg_alloc>
	union cbprintf_package_hdr package_hdr = {
 8007554:	2300      	movs	r3, #0
 8007556:	f88d 7004 	strb.w	r7, [sp, #4]
 800755a:	f8ad 3005 	strh.w	r3, [sp, #5]
 800755e:	f88d 3007 	strb.w	r3, [sp, #7]
	if (msg) {
 8007562:	b168      	cbz	r0, 8007580 <z_log_msg_simple_create+0x4a>
		*package++ = (uint32_t)(uintptr_t)package_hdr.raw;
 8007564:	9a01      	ldr	r2, [sp, #4]
 8007566:	4603      	mov	r3, r0
 8007568:	f1a8 0104 	sub.w	r1, r8, #4
 800756c:	f843 2f10 	str.w	r2, [r3, #16]!
		for (size_t i = 0; i < len; i++) {
 8007570:	462a      	mov	r2, r5
 8007572:	4429      	add	r1, r5
			*package++ = data[i];
 8007574:	f852 5b04 	ldr.w	r5, [r2], #4
		for (size_t i = 0; i < len; i++) {
 8007578:	428a      	cmp	r2, r1
			*package++ = data[i];
 800757a:	f843 5f04 	str.w	r5, [r3, #4]!
		for (size_t i = 0; i < len; i++) {
 800757e:	d1f9      	bne.n	8007574 <z_log_msg_simple_create+0x3e>
	struct log_msg_desc desc = {
 8007580:	01a2      	lsls	r2, r4, #6
	z_log_msg_finalize(msg, source, desc, NULL);
 8007582:	2300      	movs	r3, #0
 8007584:	4631      	mov	r1, r6
	struct log_msg_desc desc = {
 8007586:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 800758a:	ea42 2248 	orr.w	r2, r2, r8, lsl #9
	z_log_msg_finalize(msg, source, desc, NULL);
 800758e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007592:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007596:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
}
 800759a:	b002      	add	sp, #8
 800759c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_log_msg_finalize(msg, source, desc, NULL);
 80075a0:	f7ff bfb0 	b.w	8007504 <z_log_msg_finalize>

080075a4 <z_impl_z_log_msg_simple_create_0>:
{
 80075a4:	b507      	push	{r0, r1, r2, lr}
	z_log_msg_simple_create(source, level, data, ARRAY_SIZE(data));
 80075a6:	2301      	movs	r3, #1
	uint32_t data[] = {(uint32_t)(uintptr_t)fmt};
 80075a8:	9201      	str	r2, [sp, #4]
	z_log_msg_simple_create(source, level, data, ARRAY_SIZE(data));
 80075aa:	aa01      	add	r2, sp, #4
 80075ac:	f7ff ffc3 	bl	8007536 <z_log_msg_simple_create>
}
 80075b0:	b003      	add	sp, #12
 80075b2:	f85d fb04 	ldr.w	pc, [sp], #4

080075b6 <z_impl_z_log_msg_simple_create_1>:
{
 80075b6:	b507      	push	{r0, r1, r2, lr}
	uint32_t data[] = {(uint32_t)(uintptr_t)fmt, arg};
 80075b8:	e9cd 2300 	strd	r2, r3, [sp]
	z_log_msg_simple_create(source, level, data, ARRAY_SIZE(data));
 80075bc:	2302      	movs	r3, #2
 80075be:	466a      	mov	r2, sp
 80075c0:	f7ff ffb9 	bl	8007536 <z_log_msg_simple_create>
}
 80075c4:	b003      	add	sp, #12
 80075c6:	f85d fb04 	ldr.w	pc, [sp], #4

080075ca <log_output_write>:
{
 80075ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075cc:	4606      	mov	r6, r0
 80075ce:	460d      	mov	r5, r1
 80075d0:	4614      	mov	r4, r2
 80075d2:	461f      	mov	r7, r3
	while (len != 0) {
 80075d4:	b904      	cbnz	r4, 80075d8 <log_output_write+0xe>
}
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		processed = outf(buf, len, ctx);
 80075d8:	4621      	mov	r1, r4
 80075da:	4628      	mov	r0, r5
 80075dc:	463a      	mov	r2, r7
 80075de:	47b0      	blx	r6
		len -= processed;
 80075e0:	1a24      	subs	r4, r4, r0
		buf += processed;
 80075e2:	4405      	add	r5, r0
 80075e4:	e7f6      	b.n	80075d4 <log_output_write+0xa>

080075e6 <log_output_flush>:
{
 80075e6:	b510      	push	{r4, lr}
	log_output_write(output->func, output->buf, output->control_block->offset,
 80075e8:	6842      	ldr	r2, [r0, #4]
{
 80075ea:	4604      	mov	r4, r0
	log_output_write(output->func, output->buf, output->control_block->offset,
 80075ec:	6881      	ldr	r1, [r0, #8]
 80075ee:	6800      	ldr	r0, [r0, #0]
 80075f0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80075f4:	f7ff ffe9 	bl	80075ca <log_output_write>
	output->control_block->offset = 0;
 80075f8:	6863      	ldr	r3, [r4, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
}
 80075fe:	bd10      	pop	{r4, pc}

08007600 <out_func>:
{
 8007600:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 8007602:	684b      	ldr	r3, [r1, #4]
{
 8007604:	4605      	mov	r5, r0
 8007606:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68cb      	ldr	r3, [r1, #12]
 800760c:	429a      	cmp	r2, r3
 800760e:	d102      	bne.n	8007616 <out_func+0x16>
		log_output_flush(out_ctx);
 8007610:	4608      	mov	r0, r1
 8007612:	f7ff ffe8 	bl	80075e6 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	f3bf 8f5b 	dmb	ish
 800761c:	e853 2f00 	ldrex	r2, [r3]
 8007620:	1c51      	adds	r1, r2, #1
 8007622:	e843 1000 	strex	r0, r1, [r3]
 8007626:	2800      	cmp	r0, #0
 8007628:	d1f8      	bne.n	800761c <out_func+0x1c>
 800762a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800762e:	68a3      	ldr	r3, [r4, #8]
}
 8007630:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
 8007632:	549d      	strb	r5, [r3, r2]
}
 8007634:	bd38      	pop	{r3, r4, r5, pc}

08007636 <cr_out_func>:
	if (c == '\n') {
 8007636:	280a      	cmp	r0, #10
{
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4604      	mov	r4, r0
 800763c:	460d      	mov	r5, r1
	if (c == '\n') {
 800763e:	d102      	bne.n	8007646 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
 8007640:	200d      	movs	r0, #13
 8007642:	f7ff ffdd 	bl	8007600 <out_func>
	out_func(c, ctx);
 8007646:	4629      	mov	r1, r5
 8007648:	4620      	mov	r0, r4
 800764a:	f7ff ffd9 	bl	8007600 <out_func>
}
 800764e:	2000      	movs	r0, #0
 8007650:	bd38      	pop	{r3, r4, r5, pc}

08007652 <log_output_msg_process>:
{
 8007652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007656:	4605      	mov	r5, r0
 8007658:	b087      	sub	sp, #28
	int16_t source_id = log_msg_get_source_id(msg);
 800765a:	4608      	mov	r0, r1
	return msg->hdr.desc.level;
 800765c:	880e      	ldrh	r6, [r1, #0]
	return msg->hdr.desc.domain;
 800765e:	f891 9000 	ldrb.w	r9, [r1]
{
 8007662:	460c      	mov	r4, r1
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
 8007664:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8007668:	4617      	mov	r7, r2
	int16_t source_id = log_msg_get_source_id(msg);
 800766a:	f7fa fd6b 	bl	8002144 <log_msg_get_source_id>
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 800766e:	1e01      	subs	r1, r0, #0
	return msg->hdr.desc.level;
 8007670:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
 8007674:	f3c9 09c2 	ubfx	r9, r9, #3, #3
 8007678:	db1f      	blt.n	80076ba <log_output_msg_process+0x68>
 800767a:	4648      	mov	r0, r9
 800767c:	f7fa fc80 	bl	8001f80 <log_source_name_get>
 8007680:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 8007682:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
 8007684:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
 8007686:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
 800768a:	f3c0 100b 	ubfx	r0, r0, #4, #12
	log_output_process(output, timestamp, NULL, sname, (k_tid_t)log_msg_get_tid(msg), level,
 800768e:	9601      	str	r6, [sp, #4]
	*len = msg->hdr.desc.package_len;
 8007690:	f3c2 224a 	ubfx	r2, r2, #9, #11
 8007694:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
 8007696:	eb01 0402 	add.w	r4, r1, r2
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	bf08      	it	eq
 80076a0:	2100      	moveq	r1, #0
 80076a2:	9200      	str	r2, [sp, #0]
 80076a4:	e9cd 0704 	strd	r0, r7, [sp, #16]
 80076a8:	e9cd 1402 	strd	r1, r4, [sp, #8]
 80076ac:	4628      	mov	r0, r5
 80076ae:	4641      	mov	r1, r8
 80076b0:	f7fa fd74 	bl	800219c <log_output_process>
}
 80076b4:	b007      	add	sp, #28
 80076b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e7e1      	b.n	8007682 <log_output_msg_process+0x30>

080076be <z_do_kernel_oops>:
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 */
void z_do_kernel_oops(const struct arch_esf *esf, _callee_saved_t *callee_regs, uint32_t exc_return)
{
 80076be:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 80076c0:	6800      	ldr	r0, [r0, #0]
 80076c2:	f7fa bfb5 	b.w	8002630 <z_arm_fatal_error>

080076c6 <z_log_msg_simple_create_0.constprop.0>:
static inline void z_log_msg_simple_create_0(const void * source, uint32_t level, const char * fmt)
 80076c6:	460a      	mov	r2, r1
	z_impl_z_log_msg_simple_create_0(source, level, fmt);
 80076c8:	2101      	movs	r1, #1
 80076ca:	f7ff bf6b 	b.w	80075a4 <z_impl_z_log_msg_simple_create_0>

080076ce <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80076ce:	2100      	movs	r1, #0
 80076d0:	2001      	movs	r0, #1
 80076d2:	f7fa bfad 	b.w	8002630 <z_arm_fatal_error>

080076d6 <arch_irq_unlock_outlined>:
  __ASM volatile ("cpsie f" : : : "memory");
 80076d6:	b661      	cpsie	f
  __ASM volatile ("cpsie i" : : : "memory");
 80076d8:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80076da:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("isb 0xF":::"memory");
 80076de:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__enable_fault_irq(); /* alters FAULTMASK */
	__enable_irq();       /* alters PRIMASK */
#endif
	arch_irq_unlock(key);
}
 80076e2:	4770      	bx	lr

080076e4 <arch_cpu_idle>:
  __ASM volatile ("cpsid i" : : : "memory");
 80076e4:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80076e6:	2300      	movs	r3, #0
 80076e8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("isb 0xF":::"memory");
 80076ec:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80076f0:	f3bf 8f4f 	dsb	sy
	 * set by the caller as part of interrupt locking if necessary
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif

	SLEEP_IF_ALLOWED(__WFI);
 80076f4:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 80076f6:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
 80076f8:	f3bf 8f6f 	isb	sy

	__enable_irq();
	__ISB();
}
 80076fc:	4770      	bx	lr

080076fe <size_to_mpu_rasr_size>:
	if (size <= 32U) {
 80076fe:	2820      	cmp	r0, #32
 8007700:	d909      	bls.n	8007716 <size_to_mpu_rasr_size+0x18>
	if (size > (1UL << 31)) {
 8007702:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8007706:	d808      	bhi.n	800771a <size_to_mpu_rasr_size+0x1c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8007708:	3801      	subs	r0, #1
 800770a:	fab0 f080 	clz	r0, r0
 800770e:	f1c0 001f 	rsb	r0, r0, #31
 8007712:	0040      	lsls	r0, r0, #1
 8007714:	4770      	bx	lr
		return REGION_32B;
 8007716:	2008      	movs	r0, #8
 8007718:	4770      	bx	lr
		return REGION_4G;
 800771a:	203e      	movs	r0, #62	; 0x3e
}
 800771c:	4770      	bx	lr

0800771e <cbputc>:
{
 800771e:	b508      	push	{r3, lr}
	(*s->out) (c, s->ctx);
 8007720:	e9d1 3104 	ldrd	r3, r1, [r1, #16]
 8007724:	4798      	blx	r3
}
 8007726:	2000      	movs	r0, #0
 8007728:	bd08      	pop	{r3, pc}

0800772a <stm32_gpio_intc_get_pin_irq_line>:
}
 800772a:	2001      	movs	r0, #1
 800772c:	4088      	lsls	r0, r1
 800772e:	4770      	bx	lr

08007730 <stm32_gpio_intc_disable_line>:
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007734:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8007738:	ea23 0300 	bic.w	r3, r3, r0
 800773c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8007740:	4770      	bx	lr

08007742 <stm32_gpio_intc_select_line_trigger>:
	switch (trg) {
 8007742:	2903      	cmp	r1, #3
 8007744:	d825      	bhi.n	8007792 <stm32_gpio_intc_select_line_trigger+0x50>
 8007746:	e8df f001 	tbb	[pc, r1]
 800774a:	0d02      	.short	0x0d02
 800774c:	1c12      	.short	0x1c12
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800774e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	ea22 0200 	bic.w	r2, r2, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007758:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	ea22 0200 	bic.w	r2, r2, r0
 8007760:	605a      	str	r2, [r3, #4]
}
 8007762:	4770      	bx	lr
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	4302      	orrs	r2, r0
 800776c:	e7f4      	b.n	8007758 <stm32_gpio_intc_select_line_trigger+0x16>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800776e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	4302      	orrs	r2, r0
 8007776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	ea22 0200 	bic.w	r2, r2, r0
 800777e:	601a      	str	r2, [r3, #0]
}
 8007780:	4770      	bx	lr
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	4302      	orrs	r2, r0
 800778a:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	4310      	orrs	r0, r2
 8007790:	6058      	str	r0, [r3, #4]
}
 8007792:	4770      	bx	lr

08007794 <stm32_exti_set_line_src_port>:
	return (0xF << ((linenum % 4 * 4) + 16)) | (linenum / 4);
 8007794:	f000 0203 	and.w	r2, r0, #3
 8007798:	230f      	movs	r3, #15
 800779a:	3204      	adds	r2, #4
 800779c:	0092      	lsls	r2, r2, #2
 800779e:	4093      	lsls	r3, r2
 80077a0:	ea43 0090 	orr.w	r0, r3, r0, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 80077a4:	f000 0303 	and.w	r3, r0, #3
 80077a8:	0c02      	lsrs	r2, r0, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077aa:	fa92 f2a2 	rbit	r2, r2
 80077ae:	009b      	lsls	r3, r3, #2
  return __builtin_clz(value);
 80077b0:	fab2 f282 	clz	r2, r2
 80077b4:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80077b8:	f002 021f 	and.w	r2, r2, #31
{
 80077bc:	b510      	push	{r4, lr}
 80077be:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 80077c2:	4091      	lsls	r1, r2
 80077c4:	ea24 4010 	bic.w	r0, r4, r0, lsr #16
 80077c8:	4301      	orrs	r1, r0
 80077ca:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
}
 80077ce:	bd10      	pop	{r4, pc}

080077d0 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80077d0:	880b      	ldrh	r3, [r1, #0]
{
 80077d2:	b082      	sub	sp, #8
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80077d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d8:	f603 722c 	addw	r2, r3, #3884	; 0xf2c
 80077dc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80077e0:	2a20      	cmp	r2, #32
 80077e2:	d814      	bhi.n	800780e <stm32_clock_control_on+0x3e>
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 80077e4:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | mask;
 80077e8:	6848      	ldr	r0, [r1, #4]
 80077ea:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 80077ee:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 80077f0:	4302      	orrs	r2, r0
	return 0;
 80077f2:	2000      	movs	r0, #0
 80077f4:	601a      	str	r2, [r3, #0]
	temp = sys_read32(STM32H7_BUS_CLK_REG + pclken->bus);
 80077f6:	880b      	ldrh	r3, [r1, #0]
 80077f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077fc:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8007800:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	9301      	str	r3, [sp, #4]
	UNUSED(temp);
 8007808:	9b01      	ldr	r3, [sp, #4]
}
 800780a:	b002      	add	sp, #8
 800780c:	4770      	bx	lr
		return -ENOTSUP;
 800780e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007812:	e7fa      	b.n	800780a <stm32_clock_control_on+0x3a>

08007814 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8007814:	880b      	ldrh	r3, [r1, #0]
 8007816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781a:	f603 722c 	addw	r2, r3, #3884	; 0xf2c
 800781e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007822:	2a20      	cmp	r2, #32
 8007824:	d80a      	bhi.n	800783c <stm32_clock_control_off+0x28>
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 8007826:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~mask;
 800782a:	6849      	ldr	r1, [r1, #4]
	return 0;
 800782c:	2000      	movs	r0, #0
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 800782e:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8007832:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 8007834:	ea22 0201 	bic.w	r2, r2, r1
 8007838:	601a      	str	r2, [r3, #0]
	return 0;
 800783a:	4770      	bx	lr
		return -ENOTSUP;
 800783c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8007840:	4770      	bx	lr

08007842 <enabled_clock>:
	if ((src_clk == STM32_SRC_SYSCLK) ||
 8007842:	280d      	cmp	r0, #13
 8007844:	d809      	bhi.n	800785a <enabled_clock+0x18>
 8007846:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800784a:	40c3      	lsrs	r3, r0
{
 800784c:	f013 0f01 	tst.w	r3, #1
 8007850:	bf14      	ite	ne
 8007852:	2000      	movne	r0, #0
 8007854:	f06f 0085 	mvneq.w	r0, #133	; 0x85
 8007858:	4770      	bx	lr
 800785a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800785e:	4770      	bx	lr

08007860 <stm32_clock_control_configure>:
{
 8007860:	b510      	push	{r4, lr}
	err = enabled_clock(pclken->bus);
 8007862:	8808      	ldrh	r0, [r1, #0]
 8007864:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007868:	f7ff ffeb 	bl	8007842 <enabled_clock>
	if (err < 0) {
 800786c:	2800      	cmp	r0, #0
 800786e:	db1d      	blt.n	80078ac <stm32_clock_control_configure+0x4c>
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_DT_CLKSEL_REG_GET(pclken->enr),
 8007870:	684a      	ldr	r2, [r1, #4]
 8007872:	b293      	uxth	r3, r2
		       STM32_DT_CLKSEL_MASK_GET(pclken->enr) <<
 8007874:	f3c2 5484 	ubfx	r4, r2, #22, #5
			STM32_DT_CLKSEL_SHIFT_GET(pclken->enr));
 8007878:	f3c2 4205 	ubfx	r2, r2, #16, #6
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_DT_CLKSEL_REG_GET(pclken->enr),
 800787c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8007880:	fa04 f202 	lsl.w	r2, r4, r2
 8007884:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8007888:	6818      	ldr	r0, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 800788a:	ea20 0202 	bic.w	r2, r0, r2
 800788e:	601a      	str	r2, [r3, #0]
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_DT_CLKSEL_REG_GET(pclken->enr),
 8007890:	6849      	ldr	r1, [r1, #4]
 8007892:	b28b      	uxth	r3, r1
		     STM32_DT_CLKSEL_VAL_GET(pclken->enr) <<
 8007894:	0eca      	lsrs	r2, r1, #27
			STM32_DT_CLKSEL_SHIFT_GET(pclken->enr));
 8007896:	f3c1 4105 	ubfx	r1, r1, #16, #6
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_DT_CLKSEL_REG_GET(pclken->enr),
 800789a:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800789e:	408a      	lsls	r2, r1
 80078a0:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 80078a4:	6818      	ldr	r0, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 80078a6:	4302      	orrs	r2, r0
	return 0;
 80078a8:	2000      	movs	r0, #0
 80078aa:	601a      	str	r2, [r3, #0]
}
 80078ac:	bd10      	pop	{r4, pc}

080078ae <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078ae:	6843      	ldr	r3, [r0, #4]
}
 80078b0:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078b2:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(const GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80078b4:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 80078b6:	600b      	str	r3, [r1, #0]
}
 80078b8:	4770      	bx	lr

080078ba <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078ba:	6843      	ldr	r3, [r0, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(const GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80078be:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80078c0:	4042      	eors	r2, r0
 80078c2:	400a      	ands	r2, r1
 80078c4:	4042      	eors	r2, r0
}
 80078c6:	2000      	movs	r0, #0
  WRITE_REG(GPIOx->ODR, PortValue);
 80078c8:	615a      	str	r2, [r3, #20]
 80078ca:	4770      	bx	lr

080078cc <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078cc:	6843      	ldr	r3, [r0, #4]
}
 80078ce:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078d0:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 80078d2:	6199      	str	r1, [r3, #24]
}
 80078d4:	4770      	bx	lr

080078d6 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078d6:	6843      	ldr	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80078d8:	0409      	lsls	r1, r1, #16
}
 80078da:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	6199      	str	r1, [r3, #24]
}
 80078e0:	4770      	bx	lr

080078e2 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078e2:	6843      	ldr	r3, [r0, #4]
}
 80078e4:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80078e6:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 80078e8:	6953      	ldr	r3, [r2, #20]
 80078ea:	404b      	eors	r3, r1
 80078ec:	6153      	str	r3, [r2, #20]
}
 80078ee:	4770      	bx	lr

080078f0 <gpio_stm32_manage_callback>:
{
 80078f0:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 80078f2:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 80078f4:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 80078f6:	b1f8      	cbz	r0, 8007938 <gpio_stm32_manage_callback+0x48>
static inline size_t sys_slist_len(sys_slist_t *list);

Z_GENLIST_LEN(slist, snode)

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80078f8:	4288      	cmp	r0, r1
 80078fa:	d119      	bne.n	8007930 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 80078fc:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 80078fe:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8007900:	42a1      	cmp	r1, r4
	list->head = node;
 8007902:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8007904:	d100      	bne.n	8007908 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8007906:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8007908:	2000      	movs	r0, #0
 800790a:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 800790c:	b12a      	cbz	r2, 800791a <gpio_stm32_manage_callback+0x2a>
	return list->head;
 800790e:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8007910:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8007912:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8007914:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8007916:	b902      	cbnz	r2, 800791a <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8007918:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 800791a:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 800791c:	e010      	b.n	8007940 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800791e:	4281      	cmp	r1, r0
 8007920:	d106      	bne.n	8007930 <gpio_stm32_manage_callback+0x40>
	return node->next;
 8007922:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8007924:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8007926:	68d8      	ldr	r0, [r3, #12]
 8007928:	4281      	cmp	r1, r0
 800792a:	d1ed      	bne.n	8007908 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 800792c:	60dc      	str	r4, [r3, #12]
}
 800792e:	e7eb      	b.n	8007908 <gpio_stm32_manage_callback+0x18>
	return node->next;
 8007930:	4604      	mov	r4, r0
 8007932:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8007934:	2800      	cmp	r0, #0
 8007936:	d1f2      	bne.n	800791e <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 8007938:	2a00      	cmp	r2, #0
 800793a:	d1e8      	bne.n	800790e <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 800793c:	f06f 0015 	mvn.w	r0, #21
}
 8007940:	bd10      	pop	{r4, pc}

08007942 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, gpio_pin_t pin,
 8007942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8007946:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8007948:	2001      	movs	r0, #1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800794a:	f3c2 1680 	ubfx	r6, r2, #6, #1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800794e:	f3c2 1cc1 	ubfx	ip, r2, #7, #2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007952:	6867      	ldr	r7, [r4, #4]
	pinval = 1 << pin;
 8007954:	4088      	lsls	r0, r1
 8007956:	408e      	lsls	r6, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8007958:	f002 0530 	and.w	r5, r2, #48	; 0x30
 800795c:	ea27 0700 	bic.w	r7, r7, r0
	ll_gpio_set_pin_pull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8007960:	f3c2 2241 	ubfx	r2, r2, #9, #2
	if (mode == STM32_MODER_ALT_MODE) {
 8007964:	2d20      	cmp	r5, #32
 8007966:	ea46 0607 	orr.w	r6, r6, r7
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800796a:	fa00 f701 	lsl.w	r7, r0, r1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800796e:	6066      	str	r6, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007970:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 8007974:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8007978:	fb07 fc0c 	mul.w	ip, r7, ip
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800797c:	fb07 f202 	mul.w	r2, r7, r2
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007980:	ea6f 060e 	mvn.w	r6, lr
 8007984:	ea28 080e 	bic.w	r8, r8, lr
 8007988:	ea4c 0c08 	orr.w	ip, ip, r8
 800798c:	f8c4 c008 	str.w	ip, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007990:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007994:	ea2c 0c0e 	bic.w	ip, ip, lr
 8007998:	ea42 020c 	orr.w	r2, r2, ip
 800799c:	60e2      	str	r2, [r4, #12]
 800799e:	d10c      	bne.n	80079ba <gpio_stm32_configure_raw.isra.0+0x78>
		if (pin < 8) {
 80079a0:	2907      	cmp	r1, #7
 80079a2:	d812      	bhi.n	80079ca <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80079a4:	fa07 f201 	lsl.w	r2, r7, r1
 80079a8:	6a20      	ldr	r0, [r4, #32]
 80079aa:	408a      	lsls	r2, r1
 80079ac:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 80079b0:	435a      	muls	r2, r3
 80079b2:	ea20 0101 	bic.w	r1, r0, r1
 80079b6:	430a      	orrs	r2, r1
 80079b8:	6222      	str	r2, [r4, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80079ba:	6823      	ldr	r3, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80079bc:	092d      	lsrs	r5, r5, #4
 80079be:	401e      	ands	r6, r3
 80079c0:	437d      	muls	r5, r7
 80079c2:	4335      	orrs	r5, r6
 80079c4:	6025      	str	r5, [r4, #0]
}
 80079c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80079ca:	0a02      	lsrs	r2, r0, #8
 80079cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079ce:	4352      	muls	r2, r2
 80079d0:	4352      	muls	r2, r2
 80079d2:	ebc2 1002 	rsb	r0, r2, r2, lsl #4
 80079d6:	4353      	muls	r3, r2
 80079d8:	ea21 0100 	bic.w	r1, r1, r0
 80079dc:	430b      	orrs	r3, r1
 80079de:	6263      	str	r3, [r4, #36]	; 0x24
}
 80079e0:	e7eb      	b.n	80079ba <gpio_stm32_configure_raw.isra.0+0x78>

080079e2 <gpio_stm32_config>:
	if ((flags & GPIO_OUTPUT) != 0) {
 80079e2:	f412 3c00 	ands.w	ip, r2, #131072	; 0x20000
{
 80079e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e8:	4605      	mov	r5, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80079ee:	d01d      	beq.n	8007a2c <gpio_stm32_config+0x4a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80079f0:	0796      	lsls	r6, r2, #30
 80079f2:	d514      	bpl.n	8007a1e <gpio_stm32_config+0x3c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80079f4:	0750      	lsls	r0, r2, #29
 80079f6:	d55d      	bpl.n	8007ab4 <gpio_stm32_config+0xd2>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80079f8:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80079fa:	06d9      	lsls	r1, r3, #27
 80079fc:	d511      	bpl.n	8007a22 <gpio_stm32_config+0x40>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80079fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
	switch (flags & (STM32_GPIO_SPEED_MASK << STM32_GPIO_SPEED_SHIFT)) {
 8007a02:	f403 61c0 	and.w	r1, r3, #1536	; 0x600
 8007a06:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a0a:	d042      	beq.n	8007a92 <gpio_stm32_config+0xb0>
 8007a0c:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8007a10:	d019      	beq.n	8007a46 <gpio_stm32_config+0x64>
 8007a12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007a16:	d118      	bne.n	8007a4a <gpio_stm32_config+0x68>
		*pincfg |= STM32_OSPEEDR_MEDIUM_SPEED;
 8007a18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	if (err != 0) {
 8007a1c:	e015      	b.n	8007a4a <gpio_stm32_config+0x68>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8007a1e:	2210      	movs	r2, #16
 8007a20:	e7eb      	b.n	80079fa <gpio_stm32_config+0x18>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8007a22:	069f      	lsls	r7, r3, #26
 8007a24:	d5ed      	bpl.n	8007a02 <gpio_stm32_config+0x20>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8007a26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a2a:	e7ea      	b.n	8007a02 <gpio_stm32_config+0x20>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8007a2c:	03d6      	lsls	r6, r2, #15
 8007a2e:	d505      	bpl.n	8007a3c <gpio_stm32_config+0x5a>
		if ((flags & GPIO_PULL_UP) != 0) {
 8007a30:	06d0      	lsls	r0, r2, #27
 8007a32:	d405      	bmi.n	8007a40 <gpio_stm32_config+0x5e>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8007a34:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007a38:	0292      	lsls	r2, r2, #10
 8007a3a:	e7e2      	b.n	8007a02 <gpio_stm32_config+0x20>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8007a3c:	2230      	movs	r2, #48	; 0x30
 8007a3e:	e7e0      	b.n	8007a02 <gpio_stm32_config+0x20>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8007a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a44:	e7dd      	b.n	8007a02 <gpio_stm32_config+0x20>
		*pincfg |= STM32_OSPEEDR_VERY_HIGH_SPEED;
 8007a46:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
	if ((((flags & GPIO_OUTPUT) != 0) || ((flags & GPIO_INPUT) != 0)) &&
 8007a4a:	f413 3740 	ands.w	r7, r3, #196608	; 0x30000
	struct gpio_stm32_data *data = dev->data;
 8007a4e:	692e      	ldr	r6, [r5, #16]
	if ((((flags & GPIO_OUTPUT) != 0) || ((flags & GPIO_INPUT) != 0)) &&
 8007a50:	d008      	beq.n	8007a64 <gpio_stm32_config+0x82>
	    !(data->pin_has_clock_enabled & BIT(pin))) {
 8007a52:	6930      	ldr	r0, [r6, #16]
 8007a54:	fa20 f104 	lsr.w	r1, r0, r4
	if ((((flags & GPIO_OUTPUT) != 0) || ((flags & GPIO_INPUT) != 0)) &&
 8007a58:	07c9      	lsls	r1, r1, #31
		data->pin_has_clock_enabled |= BIT(pin);
 8007a5a:	bf5f      	itttt	pl
 8007a5c:	2101      	movpl	r1, #1
 8007a5e:	40a1      	lslpl	r1, r4
 8007a60:	4301      	orrpl	r1, r0
 8007a62:	6131      	strpl	r1, [r6, #16]
	if ((flags & GPIO_OUTPUT) != 0) {
 8007a64:	f1bc 0f00 	cmp.w	ip, #0
 8007a68:	d006      	beq.n	8007a78 <gpio_stm32_config+0x96>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8007a6a:	0318      	lsls	r0, r3, #12
 8007a6c:	d514      	bpl.n	8007a98 <gpio_stm32_config+0xb6>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8007a6e:	6869      	ldr	r1, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8007a70:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8007a72:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8007a74:	40a3      	lsls	r3, r4
	WRITE_REG(gpio->BSRR, pins);
 8007a76:	618b      	str	r3, [r1, #24]
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	6868      	ldr	r0, [r5, #4]
 8007a7e:	f7ff ff60 	bl	8007942 <gpio_stm32_configure_raw.isra.0>
	if (((flags & GPIO_OUTPUT) == 0) && ((flags & GPIO_INPUT) == 0) &&
 8007a82:	b927      	cbnz	r7, 8007a8e <gpio_stm32_config+0xac>
	    (data->pin_has_clock_enabled & BIT(pin))) {
 8007a84:	6933      	ldr	r3, [r6, #16]
	if (((flags & GPIO_OUTPUT) == 0) && ((flags & GPIO_INPUT) == 0) &&
 8007a86:	fa23 f204 	lsr.w	r2, r3, r4
 8007a8a:	07d2      	lsls	r2, r2, #31
 8007a8c:	d40c      	bmi.n	8007aa8 <gpio_stm32_config+0xc6>
	return 0;
 8007a8e:	2000      	movs	r0, #0
}
 8007a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pincfg |= STM32_OSPEEDR_HIGH_SPEED;
 8007a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	if (err != 0) {
 8007a96:	e7d8      	b.n	8007a4a <gpio_stm32_config+0x68>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8007a98:	0359      	lsls	r1, r3, #13
 8007a9a:	d5ed      	bpl.n	8007a78 <gpio_stm32_config+0x96>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	40a1      	lsls	r1, r4
 8007aa2:	f7ff ff18 	bl	80078d6 <gpio_stm32_port_clear_bits_raw>
 8007aa6:	e7e7      	b.n	8007a78 <gpio_stm32_config+0x96>
		data->pin_has_clock_enabled &= ~BIT(pin);
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	40a2      	lsls	r2, r4
 8007aac:	ea23 0302 	bic.w	r3, r3, r2
 8007ab0:	6133      	str	r3, [r6, #16]
 8007ab2:	e7ec      	b.n	8007a8e <gpio_stm32_config+0xac>
				return -ENOTSUP;
 8007ab4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007ab8:	e7ea      	b.n	8007a90 <gpio_stm32_config+0xae>

08007aba <gpio_stm32_isr>:
{
 8007aba:	b570      	push	{r4, r5, r6, lr}
 8007abc:	460b      	mov	r3, r1
 8007abe:	6889      	ldr	r1, [r1, #8]
 8007ac0:	4605      	mov	r5, r0
{
	struct gpio_callback *cb, *tmp;

	sys_port_trace_gpio_fire_callbacks_enter(list, port, pins);

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8007ac2:	b111      	cbz	r1, 8007aca <gpio_stm32_isr+0x10>
	gpio_fire_callbacks(&data->cb, data->dev, pin);
 8007ac4:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8007ac6:	680c      	ldr	r4, [r1, #0]
 8007ac8:	b901      	cbnz	r1, 8007acc <gpio_stm32_isr+0x12>
}
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8007acc:	688a      	ldr	r2, [r1, #8]
 8007ace:	402a      	ands	r2, r5
 8007ad0:	d002      	beq.n	8007ad8 <gpio_stm32_isr+0x1e>
			__ASSERT(cb->handler, "No callback handler!");

			cb->handler(port, cb, cb->pin_mask & pins);
 8007ad2:	684b      	ldr	r3, [r1, #4]
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8007ad8:	b11c      	cbz	r4, 8007ae2 <gpio_stm32_isr+0x28>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	4621      	mov	r1, r4
 8007ade:	461c      	mov	r4, r3
 8007ae0:	e7f2      	b.n	8007ac8 <gpio_stm32_isr+0xe>
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	e7fa      	b.n	8007adc <gpio_stm32_isr+0x22>

08007ae6 <gpio_stm32_configure>:
{
 8007ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae8:	461f      	mov	r7, r3
 8007aea:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8007aec:	6840      	ldr	r0, [r0, #4]
{
 8007aee:	460e      	mov	r6, r1
 8007af0:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8007af2:	f7ff ff26 	bl	8007942 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8007af6:	2f11      	cmp	r7, #17
 8007af8:	d107      	bne.n	8007b0a <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8007afa:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8007afc:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8007afe:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 8007b02:	d504      	bpl.n	8007b0e <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8007b04:	6863      	ldr	r3, [r4, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8007b08:	6199      	str	r1, [r3, #24]
}
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f7ff fee1 	bl	80078d6 <gpio_stm32_port_clear_bits_raw>
 8007b14:	e7f9      	b.n	8007b0a <gpio_stm32_configure+0x24>

08007b16 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8007b16:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8007b18:	6803      	ldr	r3, [r0, #0]
 8007b1a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 8007b1c:	7905      	ldrb	r5, [r0, #4]
 8007b1e:	6804      	ldr	r4, [r0, #0]
 8007b20:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	d302      	bcc.n	8007b2e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 8007b28:	f06f 0001 	mvn.w	r0, #1
}
 8007b2c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8007b2e:	795c      	ldrb	r4, [r3, #5]
 8007b30:	428c      	cmp	r4, r1
 8007b32:	d001      	beq.n	8007b38 <pinctrl_lookup_state+0x22>
		(*state)++;
 8007b34:	3308      	adds	r3, #8
 8007b36:	e7f0      	b.n	8007b1a <pinctrl_lookup_state+0x4>
			return 0;
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e7f7      	b.n	8007b2c <pinctrl_lookup_state+0x16>

08007b3c <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8007b3c:	6843      	ldr	r3, [r0, #4]
 8007b3e:	f3c1 104b 	ubfx	r0, r1, #5, #12
 8007b42:	f001 011f 	and.w	r1, r1, #31
 8007b46:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
 8007b48:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	408b      	lsls	r3, r1
 8007b4e:	4203      	tst	r3, r0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 8007b50:	f04f 0000 	mov.w	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8007b54:	bf14      	ite	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	2300      	moveq	r3, #0
 8007b5a:	7013      	strb	r3, [r2, #0]
}
 8007b5c:	4770      	bx	lr

08007b5e <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 8007b5e:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8007b60:	6843      	ldr	r3, [r0, #4]
 8007b62:	f3c1 104b 	ubfx	r0, r1, #5, #12
 8007b66:	f001 011f 	and.w	r1, r1, #31
 8007b6a:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8007b6c:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 8007b6e:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8007b70:	408b      	lsls	r3, r1
 8007b72:	4323      	orrs	r3, r4
 8007b74:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 8007b76:	2000      	movs	r0, #0
 8007b78:	bd10      	pop	{r4, pc}

08007b7a <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 8007b7a:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8007b7c:	6843      	ldr	r3, [r0, #4]
 8007b7e:	f3c1 144b 	ubfx	r4, r1, #5, #12
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 8007b82:	2201      	movs	r2, #1
 8007b84:	f001 011f 	and.w	r1, r1, #31
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	408a      	lsls	r2, r1
	uint32_t temp = *(volatile uint32_t *)addr;
 8007b8c:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 8007b8e:	ea23 0302 	bic.w	r3, r3, r2
 8007b92:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 8007b94:	2000      	movs	r0, #0
 8007b96:	bd10      	pop	{r4, pc}

08007b98 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 8007b9e:	f7ff ffde 	bl	8007b5e <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7ff ffe8 	bl	8007b7a <reset_stm32_line_deassert>

	return 0;
}
 8007baa:	2000      	movs	r0, #0
 8007bac:	bd38      	pop	{r3, r4, r5, pc}

08007bae <uart_stm32_ll2cfg_databits>:
	switch (db) {
 8007bae:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007bb2:	d007      	beq.n	8007bc4 <uart_stm32_ll2cfg_databits+0x16>
 8007bb4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007bb8:	d109      	bne.n	8007bce <uart_stm32_ll2cfg_databits+0x20>
			return UART_CFG_DATA_BITS_7;
 8007bba:	2900      	cmp	r1, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2001      	movne	r0, #1
 8007bc0:	2002      	moveq	r0, #2
 8007bc2:	4770      	bx	lr
			return UART_CFG_DATA_BITS_9;
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	bf14      	ite	ne
 8007bc8:	2003      	movne	r0, #3
 8007bca:	2004      	moveq	r0, #4
 8007bcc:	4770      	bx	lr
			return UART_CFG_DATA_BITS_8;
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	bf14      	ite	ne
 8007bd2:	2002      	movne	r0, #2
 8007bd4:	2003      	moveq	r0, #3
}
 8007bd6:	4770      	bx	lr

08007bd8 <uart_stm32_err_check>:
	USART_TypeDef *usart = config->usart;
 8007bd8:	6843      	ldr	r3, [r0, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8007bdc:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8007bde:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8007be0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8007be4:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8007be6:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_PARITY;
 8007be8:	bf48      	it	mi
 8007bea:	f040 0002 	orrmi.w	r0, r0, #2
 8007bee:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8007bf0:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8007bf2:	bf48      	it	mi
 8007bf4:	f040 0004 	orrmi.w	r0, r0, #4
 8007bf8:	0751      	lsls	r1, r2, #29
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8007bfa:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_NOISE;
 8007bfc:	bf48      	it	mi
 8007bfe:	f040 0020 	orrmi.w	r0, r0, #32
 8007c02:	05d2      	lsls	r2, r2, #23
 8007c04:	d504      	bpl.n	8007c10 <uart_stm32_err_check+0x38>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8007c06:	f44f 7280 	mov.w	r2, #256	; 0x100
		err |= UART_BREAK;
 8007c0a:	f040 0008 	orr.w	r0, r0, #8
 8007c0e:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8007c10:	07c1      	lsls	r1, r0, #31
 8007c12:	d501      	bpl.n	8007c18 <uart_stm32_err_check+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8007c14:	2208      	movs	r2, #8
 8007c16:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8007c18:	0782      	lsls	r2, r0, #30
 8007c1a:	d501      	bpl.n	8007c20 <uart_stm32_err_check+0x48>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8007c20:	0741      	lsls	r1, r0, #29
 8007c22:	d501      	bpl.n	8007c28 <uart_stm32_err_check+0x50>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8007c24:	2202      	movs	r2, #2
 8007c26:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_NOISE) {
 8007c28:	0682      	lsls	r2, r0, #26
 8007c2a:	d501      	bpl.n	8007c30 <uart_stm32_err_check+0x58>
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	621a      	str	r2, [r3, #32]
}
 8007c30:	4770      	bx	lr

08007c32 <uart_stm32_poll_out>:
{
 8007c32:	b510      	push	{r4, lr}
	USART_TypeDef *usart = config->usart;
 8007c34:	6843      	ldr	r3, [r0, #4]
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007c36:	2010      	movs	r0, #16
 8007c38:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	0612      	lsls	r2, r2, #24
 8007c3e:	d5fc      	bpl.n	8007c3a <uart_stm32_poll_out+0x8>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c40:	f3ef 8211 	mrs	r2, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007c44:	f380 8812 	msr	BASEPRI_MAX, r0
  __ASM volatile ("isb 0xF":::"memory");
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	69dc      	ldr	r4, [r3, #28]
 8007c4e:	0624      	lsls	r4, r4, #24
 8007c50:	d404      	bmi.n	8007c5c <uart_stm32_poll_out+0x2a>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007c52:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("isb 0xF":::"memory");
 8007c56:	f3bf 8f6f 	isb	sy
	}
	__enable_irq();
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8007c5a:	e7ee      	b.n	8007c3a <uart_stm32_poll_out+0x8>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8007c5c:	6299      	str	r1, [r3, #40]	; 0x28
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007c5e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("isb 0xF":::"memory");
 8007c62:	f3bf 8f6f 	isb	sy
}
 8007c66:	bd10      	pop	{r4, pc}

08007c68 <uart_stm32_poll_in>:
	USART_TypeDef *usart = config->usart;
 8007c68:	6843      	ldr	r3, [r0, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8007c6c:	69da      	ldr	r2, [r3, #28]
 8007c6e:	0710      	lsls	r0, r2, #28
 8007c70:	d501      	bpl.n	8007c76 <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8007c72:	2208      	movs	r2, #8
 8007c74:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8007c76:	69da      	ldr	r2, [r3, #28]
 8007c78:	0692      	lsls	r2, r2, #26
 8007c7a:	d503      	bpl.n	8007c84 <uart_stm32_poll_in+0x1c>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 8007c7e:	2000      	movs	r0, #0
 8007c80:	700b      	strb	r3, [r1, #0]
}
 8007c82:	4770      	bx	lr
		return -1;
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007c88:	4770      	bx	lr

08007c8a <uart_stm32_config_get>:
{
 8007c8a:	b510      	push	{r4, lr}
	struct uart_config *uart_cfg = data->uart_cfg;
 8007c8c:	6902      	ldr	r2, [r0, #16]
{
 8007c8e:	4604      	mov	r4, r0
 8007c90:	460b      	mov	r3, r1
	cfg->baudrate = uart_cfg->baudrate;
 8007c92:	6852      	ldr	r2, [r2, #4]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	600a      	str	r2, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8007c98:	6842      	ldr	r2, [r0, #4]
 8007c9a:	6812      	ldr	r2, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (parity) {
 8007ca2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007ca6:	d033      	beq.n	8007d10 <uart_stm32_config_get+0x86>
 8007ca8:	f5a2 60c0 	sub.w	r0, r2, #1536	; 0x600
 8007cac:	4242      	negs	r2, r0
 8007cae:	4142      	adcs	r2, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8007cb0:	711a      	strb	r2, [r3, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 8007cb2:	6862      	ldr	r2, [r4, #4]
 8007cb4:	6812      	ldr	r2, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8007cb6:	6852      	ldr	r2, [r2, #4]
 8007cb8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	switch (sb) {
 8007cbc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007cc0:	d028      	beq.n	8007d14 <uart_stm32_config_get+0x8a>
 8007cc2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8007cc6:	d027      	beq.n	8007d18 <uart_stm32_config_get+0x8e>
		return UART_CFG_STOP_BITS_2;
 8007cc8:	2a00      	cmp	r2, #0
 8007cca:	bf0c      	ite	eq
 8007ccc:	2201      	moveq	r2, #1
 8007cce:	2203      	movne	r2, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8007cd0:	715a      	strb	r2, [r3, #5]
	return LL_USART_GetDataWidth(config->usart);
 8007cd2:	6862      	ldr	r2, [r4, #4]
 8007cd4:	6812      	ldr	r2, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8007cd6:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007cd8:	6811      	ldr	r1, [r2, #0]
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8007cda:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
 8007cde:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 8007ce2:	f7ff ff64 	bl	8007bae <uart_stm32_ll2cfg_databits>
 8007ce6:	7198      	strb	r0, [r3, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8007ce8:	6862      	ldr	r2, [r4, #4]
}
 8007cea:	2000      	movs	r0, #0
	return LL_USART_GetHWFlowCtrl(config->usart);
 8007cec:	6812      	ldr	r2, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8007cee:	6892      	ldr	r2, [r2, #8]
 8007cf0:	f402 7240 	and.w	r2, r2, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8007cf4:	f5a2 7140 	sub.w	r1, r2, #768	; 0x300
 8007cf8:	424a      	negs	r2, r1
 8007cfa:	414a      	adcs	r2, r1
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 8007cfc:	71da      	strb	r2, [r3, #7]
	return LL_USART_IsEnabledDEMode(config->usart);
 8007cfe:	6861      	ldr	r1, [r4, #4]
 8007d00:	6809      	ldr	r1, [r1, #0]
  return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
 8007d02:	6889      	ldr	r1, [r1, #8]
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RS485;
 8007d04:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 8007d08:	bf18      	it	ne
 8007d0a:	2203      	movne	r2, #3
 8007d0c:	71da      	strb	r2, [r3, #7]
}
 8007d0e:	bd10      	pop	{r4, pc}
	switch (parity) {
 8007d10:	2202      	movs	r2, #2
 8007d12:	e7cd      	b.n	8007cb0 <uart_stm32_config_get+0x26>
		return UART_CFG_STOP_BITS_0_5;
 8007d14:	2200      	movs	r2, #0
 8007d16:	e7db      	b.n	8007cd0 <uart_stm32_config_get+0x46>
		return UART_CFG_STOP_BITS_1_5;
 8007d18:	2202      	movs	r2, #2
 8007d1a:	e7d9      	b.n	8007cd0 <uart_stm32_config_get+0x46>

08007d1c <uart_stm32_set_baudrate>:
{
 8007d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8007d1e:	6902      	ldr	r2, [r0, #16]
{
 8007d20:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 8007d22:	6843      	ldr	r3, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8007d24:	6810      	ldr	r0, [r2, #0]
	USART_TypeDef *usart = config->usart;
 8007d26:	681d      	ldr	r5, [r3, #0]
					   (clock_control_subsys_t)&config->pclken[0],
 8007d28:	68d9      	ldr	r1, [r3, #12]
	if (api->get_rate == NULL) {
 8007d2a:	6883      	ldr	r3, [r0, #8]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	b91b      	cbnz	r3, 8007d38 <uart_stm32_set_baudrate+0x1c>
 8007d30:	f7fb fe60 	bl	80039f4 <uart_stm32_set_baudrate.part.0>
}
 8007d34:	b003      	add	sp, #12
 8007d36:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
 8007d38:	aa01      	add	r2, sp, #4
 8007d3a:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	dbf7      	blt.n	8007d30 <uart_stm32_set_baudrate+0x14>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d46:	602b      	str	r3, [r5, #0]
  else if (BaudRate == 0U)
 8007d48:	2c00      	cmp	r4, #0
 8007d4a:	d0f3      	beq.n	8007d34 <uart_stm32_set_baudrate+0x18>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8007d52:	fbb3 f3f4 	udiv	r3, r3, r4
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	60eb      	str	r3, [r5, #12]
			 "BaudRateReg >= 16");
 8007d5a:	e7eb      	b.n	8007d34 <uart_stm32_set_baudrate+0x18>

08007d5c <LL_ADC_INJ_Init>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d5c:	6883      	ldr	r3, [r0, #8]
 8007d5e:	07db      	lsls	r3, r3, #31
 8007d60:	d419      	bmi.n	8007d96 <LL_ADC_INJ_Init+0x3a>
    /*    - Set ADC group injected sequencer discontinuous mode               */
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8007d62:	684b      	ldr	r3, [r1, #4]
    {
      MODIFY_REG(ADCx->CFGR,
 8007d64:	68ca      	ldr	r2, [r1, #12]
    if (ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8007d66:	b193      	cbz	r3, 8007d8e <LL_ADC_INJ_Init+0x32>
      MODIFY_REG(ADCx->CFGR,
 8007d68:	68c3      	ldr	r3, [r0, #12]
 8007d6a:	f023 7304 	bic.w	r3, r3, #34603008	; 0x2100000
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	688a      	ldr	r2, [r1, #8]
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60c3      	str	r3, [r0, #12]
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }

    MODIFY_REG(ADCx->JSQR,
 8007d76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007d78:	680a      	ldr	r2, [r1, #0]
 8007d7a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007d7e:	f023 0301 	bic.w	r3, r3, #1
 8007d82:	4313      	orrs	r3, r2
 8007d84:	684a      	ldr	r2, [r1, #4]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	64c3      	str	r3, [r0, #76]	; 0x4c
  ErrorStatus status = SUCCESS;
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 8007d8e:	68c3      	ldr	r3, [r0, #12]
 8007d90:	f023 7304 	bic.w	r3, r3, #34603008	; 0x2100000
 8007d94:	e7ed      	b.n	8007d72 <LL_ADC_INJ_Init+0x16>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8007d96:	2001      	movs	r0, #1
  }
  return status;
}
 8007d98:	4770      	bx	lr

08007d9a <rtt_init>:
#include <zephyr/irq.h>
#include <zephyr/init.h>
#include "SEGGER_RTT.h"

static int rtt_init(void)
{
 8007d9a:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
 8007d9c:	f7fc fe0a 	bl	80049b4 <SEGGER_RTT_Init>

	return 0;
}
 8007da0:	2000      	movs	r0, #0
 8007da2:	bd08      	pop	{r3, pc}

08007da4 <zephyr_rtt_irq_lock>:
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007da4:	f3ef 8011 	mrs	r0, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007da8:	2310      	movs	r3, #16
 8007daa:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8007dae:	f3bf 8f6f 	isb	sy

unsigned int zephyr_rtt_irq_lock(void)
{
	return irq_lock();
}
 8007db2:	4770      	bx	lr

08007db4 <zephyr_rtt_irq_unlock>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007db4:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("isb 0xF":::"memory");
 8007db8:	f3bf 8f6f 	isb	sy

void zephyr_rtt_irq_unlock(unsigned int key)
{
	irq_unlock(key);
}
 8007dbc:	4770      	bx	lr

08007dbe <z_impl_k_busy_wait>:
#include <zephyr/drivers/timer/system_timer.h>
#include <zephyr/sys_clock.h>
#include <kernel_arch_interface.h>

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8007dbe:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	b150      	cbz	r0, 8007dda <z_impl_k_busy_wait+0x1c>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8007dc4:	f7fc f97e 	bl	80040c4 <sys_clock_cycle_get_32>

#if defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	arch_busy_wait(usec_to_wait);
#elif defined(CONFIG_SYS_CLOCK_EXISTS)
	uint32_t start_cycles = k_cycle_get_32();
	uint32_t cycles_to_wait = k_us_to_cyc_ceil32(usec_to_wait);
 8007dc8:	f240 2326 	movw	r3, #550	; 0x226
 8007dcc:	4605      	mov	r5, r0
 8007dce:	435c      	muls	r4, r3
 8007dd0:	f7fc f978 	bl	80040c4 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8007dd4:	1b43      	subs	r3, r0, r5
 8007dd6:	42a3      	cmp	r3, r4
 8007dd8:	d3fa      	bcc.n	8007dd0 <z_impl_k_busy_wait+0x12>
		arch_nop();
	}
#endif

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8007dda:	bd38      	pop	{r3, r4, r5, pc}

08007ddc <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		k_object_init(dev);
	}
}
 8007ddc:	4770      	bx	lr

08007dde <z_impl_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8007dde:	b140      	cbz	r0, 8007df2 <z_impl_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8007de0:	68c3      	ldr	r3, [r0, #12]
 8007de2:	7858      	ldrb	r0, [r3, #1]
 8007de4:	f010 0001 	ands.w	r0, r0, #1
 8007de8:	bf1e      	ittt	ne
 8007dea:	7818      	ldrbne	r0, [r3, #0]
 8007dec:	fab0 f080 	clzne	r0, r0
 8007df0:	0940      	lsrne	r0, r0, #5
}
 8007df2:	4770      	bx	lr

08007df4 <arch_system_halt>:
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007df4:	f3ef 8311 	mrs	r3, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8007dfe:	f3bf 8f6f 	isb	sy
	for (;;) {
 8007e02:	e7fe      	b.n	8007e02 <arch_system_halt+0xe>

08007e04 <do_device_init>:
{
 8007e04:	b510      	push	{r4, lr}
	if (entry->init_fn.dev != NULL) {
 8007e06:	e9d0 3400 	ldrd	r3, r4, [r0]
 8007e0a:	b933      	cbnz	r3, 8007e1a <do_device_init+0x16>
	int rc = 0;
 8007e0c:	2000      	movs	r0, #0
	dev->state->initialized = true;
 8007e0e:	68e2      	ldr	r2, [r4, #12]
 8007e10:	7853      	ldrb	r3, [r2, #1]
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	7053      	strb	r3, [r2, #1]
}
 8007e18:	bd10      	pop	{r4, pc}
		rc = entry->init_fn.dev(dev);
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4798      	blx	r3
		if (rc != 0) {
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0f4      	beq.n	8007e0c <do_device_init+0x8>
			if (rc < 0) {
 8007e22:	2800      	cmp	r0, #0
			dev->state->init_res = rc;
 8007e24:	68e3      	ldr	r3, [r4, #12]
			if (rc < 0) {
 8007e26:	bfb8      	it	lt
 8007e28:	4240      	neglt	r0, r0
			if (rc > UINT8_MAX) {
 8007e2a:	28ff      	cmp	r0, #255	; 0xff
 8007e2c:	bfa8      	it	ge
 8007e2e:	20ff      	movge	r0, #255	; 0xff
			dev->state->init_res = rc;
 8007e30:	7018      	strb	r0, [r3, #0]
 8007e32:	e7ec      	b.n	8007e0e <do_device_init+0xa>

08007e34 <z_early_memset>:
	(void) memset(dst, c, n);
 8007e34:	f000 b945 	b.w	80080c2 <memset>

08007e38 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8007e38:	f000 b935 	b.w	80080a6 <memcpy>

08007e3c <z_init_static>:
	__do_global_ctors_aux();
	__do_init_array_aux();
#elif defined(__CCAC__) /* ARC MWDT */
	__do_global_ctors_aux();
#endif
}
 8007e3c:	4770      	bx	lr

08007e3e <idle>:
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007e3e:	2410      	movs	r4, #16
#include <wait_q.h>

LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

void idle(void *unused1, void *unused2, void *unused3)
{
 8007e40:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e42:	f3ef 8311 	mrs	r3, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007e46:	f384 8812 	msr	BASEPRI_MAX, r4
  __ASM volatile ("isb 0xF":::"memory");
 8007e4a:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8007e4e:	f7ff fc49 	bl	80076e4 <arch_cpu_idle>
 8007e52:	e7f6      	b.n	8007e42 <idle+0x4>

08007e54 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
 8007e54:	b13a      	cbz	r2, 8007e66 <z_impl_k_sem_init+0x12>
 8007e56:	428a      	cmp	r2, r1
 8007e58:	d305      	bcc.n	8007e66 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8007e5a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8007e5e:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8007e62:	2000      	movs	r0, #0
 8007e64:	4770      	bx	lr
		return -EINVAL;
 8007e66:	f06f 0015 	mvn.w	r0, #21
}
 8007e6a:	4770      	bx	lr

08007e6c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e6c:	f3ef 8005 	mrs	r0, IPSR
}
 8007e70:	3800      	subs	r0, #0
 8007e72:	bf18      	it	ne
 8007e74:	2001      	movne	r0, #1
 8007e76:	4770      	bx	lr

08007e78 <z_impl_k_thread_name_set>:
}
 8007e78:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007e7c:	4770      	bx	lr

08007e7e <k_thread_name_get>:
}
 8007e7e:	2000      	movs	r0, #0
 8007e80:	4770      	bx	lr

08007e82 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8007e82:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8007e86:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8007e88:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8007e8a:	2300      	movs	r3, #0
	node->prev = NULL;
 8007e8c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8007e90:	4770      	bx	lr

08007e92 <unpend_thread_no_timeout>:
{
 8007e92:	b508      	push	{r3, lr}
 8007e94:	f7ff fff5 	bl	8007e82 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8007e98:	7b43      	ldrb	r3, [r0, #13]
 8007e9a:	f023 0302 	bic.w	r3, r3, #2
 8007e9e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6083      	str	r3, [r0, #8]
}
 8007ea4:	bd08      	pop	{r3, pc}

08007ea6 <add_to_waitq_locked>:
{
 8007ea6:	b538      	push	{r3, r4, r5, lr}
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	460d      	mov	r5, r1
	unready_thread(thread);
 8007eac:	f7fd f882 	bl	8004fb4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8007eb0:	7b63      	ldrb	r3, [r4, #13]
 8007eb2:	f043 0302 	orr.w	r3, r3, #2
 8007eb6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8007eb8:	b1e5      	cbz	r5, 8007ef4 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 8007eba:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 8007ebc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007ebe:	429d      	cmp	r5, r3
 8007ec0:	d109      	bne.n	8007ed6 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 8007ec2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8007ec4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8007ec8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007eca:	606c      	str	r4, [r5, #4]
}
 8007ecc:	e012      	b.n	8007ef4 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8007ece:	686a      	ldr	r2, [r5, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d0f6      	beq.n	8007ec2 <add_to_waitq_locked+0x1c>
 8007ed4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0f3      	beq.n	8007ec2 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 8007eda:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8007ede:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8007ee2:	428a      	cmp	r2, r1
 8007ee4:	d0f3      	beq.n	8007ece <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8007ee6:	4291      	cmp	r1, r2
 8007ee8:	ddf1      	ble.n	8007ece <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 8007eea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8007eec:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8007ef0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8007ef2:	605c      	str	r4, [r3, #4]
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}

08007ef6 <z_ready_thread>:
{
 8007ef6:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ef8:	f3ef 8411 	mrs	r4, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007efc:	2310      	movs	r3, #16
 8007efe:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8007f02:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8007f06:	f7fd f813 	bl	8004f30 <ready_thread>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007f0a:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("isb 0xF":::"memory");
 8007f0e:	f3bf 8f6f 	isb	sy
}
 8007f12:	bd10      	pop	{r4, pc}

08007f14 <z_unpend_thread_no_timeout>:
{
 8007f14:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f16:	f3ef 8111 	mrs	r1, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007f1a:	2210      	movs	r2, #16
 8007f1c:	f382 8812 	msr	BASEPRI_MAX, r2
  __ASM volatile ("isb 0xF":::"memory");
 8007f20:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 8007f24:	6883      	ldr	r3, [r0, #8]
 8007f26:	b10b      	cbz	r3, 8007f2c <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
 8007f28:	f7ff ffb3 	bl	8007e92 <unpend_thread_no_timeout>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007f2c:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("isb 0xF":::"memory");
 8007f30:	f3bf 8f6f 	isb	sy
}
 8007f34:	bd08      	pop	{r3, pc}

08007f36 <z_sched_wake_thread>:
{
 8007f36:	4601      	mov	r1, r0
 8007f38:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f3a:	f3ef 8411 	mrs	r4, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007f3e:	2310      	movs	r3, #16
 8007f40:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8007f44:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8007f48:	7b43      	ldrb	r3, [r0, #13]
 8007f4a:	f013 0f28 	tst.w	r3, #40	; 0x28
 8007f4e:	d10a      	bne.n	8007f66 <z_sched_wake_thread+0x30>
			if (thread->base.pended_on != NULL) {
 8007f50:	6883      	ldr	r3, [r0, #8]
 8007f52:	b10b      	cbz	r3, 8007f58 <z_sched_wake_thread+0x22>
				unpend_thread_no_timeout(thread);
 8007f54:	f7ff ff9d 	bl	8007e92 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SLEEPING;
 8007f58:	7b4b      	ldrb	r3, [r1, #13]
			ready_thread(thread);
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	f023 0304 	bic.w	r3, r3, #4
 8007f60:	734b      	strb	r3, [r1, #13]
 8007f62:	f7fc ffe5 	bl	8004f30 <ready_thread>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007f66:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("isb 0xF":::"memory");
 8007f6a:	f3bf 8f6f 	isb	sy
}
 8007f6e:	bd10      	pop	{r4, pc}

08007f70 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 8007f70:	2101      	movs	r1, #1
 8007f72:	3818      	subs	r0, #24
 8007f74:	f7ff bfdf 	b.w	8007f36 <z_sched_wake_thread>

08007f78 <z_unpend1_no_timeout>:
{
 8007f78:	b508      	push	{r3, lr}
 8007f7a:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f7c:	f3ef 8111 	mrs	r1, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8007f80:	2210      	movs	r2, #16
 8007f82:	f382 8812 	msr	BASEPRI_MAX, r2
  __ASM volatile ("isb 0xF":::"memory");
 8007f86:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8007f8a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007f8c:	4283      	cmp	r3, r0
 8007f8e:	d007      	beq.n	8007fa0 <z_unpend1_no_timeout+0x28>
		if (thread != NULL) {
 8007f90:	b108      	cbz	r0, 8007f96 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 8007f92:	f7ff ff7e 	bl	8007e92 <unpend_thread_no_timeout>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007f96:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("isb 0xF":::"memory");
 8007f9a:	f3bf 8f6f 	isb	sy
}
 8007f9e:	bd08      	pop	{r3, pc}
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e7f8      	b.n	8007f96 <z_unpend1_no_timeout+0x1e>

08007fa4 <z_impl_k_sleep>:
{
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	460c      	mov	r4, r1
	ticks = z_tick_sleep(ticks);
 8007faa:	f7fd f95b 	bl	8005264 <z_tick_sleep>
	int32_t ret = K_TIMEOUT_EQ(timeout, K_FOREVER) ? K_TICKS_FOREVER :
 8007fae:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007fb2:	bf08      	it	eq
 8007fb4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8007fb8:	d00a      	beq.n	8007fd0 <z_impl_k_sleep+0x2c>
		      k_ticks_to_ms_ceil64(ticks);
 8007fba:	17c1      	asrs	r1, r0, #31
 8007fbc:	3009      	adds	r0, #9
 8007fbe:	f04f 020a 	mov.w	r2, #10
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	f141 0100 	adc.w	r1, r1, #0
 8007fca:	f7f8 f97f 	bl	80002cc <__aeabi_uldivmod>
}
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = K_TIMEOUT_EQ(timeout, K_FOREVER) ? K_TICKS_FOREVER :
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return ret;
 8007fd4:	e7fb      	b.n	8007fce <z_impl_k_sleep+0x2a>

08007fd6 <next_timeout>:
{
 8007fd6:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 8007fd8:	f7fd faf0 	bl	80055bc <first>
 8007fdc:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8007fde:	f7fd faf5 	bl	80055cc <elapsed>
	if ((to == NULL) ||
 8007fe2:	b174      	cbz	r4, 8008002 <next_timeout+0x2c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8007fe4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8007fe8:	1a1b      	subs	r3, r3, r0
 8007fea:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8007fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff2:	f172 0100 	sbcs.w	r1, r2, #0
 8007ff6:	da04      	bge.n	8008002 <next_timeout+0x2c>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	bfac      	ite	ge
 8007ffc:	4618      	movge	r0, r3
 8007ffe:	2000      	movlt	r0, #0
}
 8008000:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 8008002:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
 8008006:	e7fb      	b.n	8008000 <next_timeout+0x2a>

08008008 <z_abort_timeout>:
{
 8008008:	4602      	mov	r2, r0
 800800a:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800800c:	f3ef 8511 	mrs	r5, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8008010:	2310      	movs	r3, #16
 8008012:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8008016:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800801a:	6803      	ldr	r3, [r0, #0]
 800801c:	b193      	cbz	r3, 8008044 <z_abort_timeout+0x3c>
			bool is_first = (to == first());
 800801e:	f7fd facd 	bl	80055bc <first>
 8008022:	4604      	mov	r4, r0
			remove_timeout(to);
 8008024:	4610      	mov	r0, r2
 8008026:	f7fd fadb 	bl	80055e0 <remove_timeout>
			if (is_first) {
 800802a:	4284      	cmp	r4, r0
 800802c:	d104      	bne.n	8008038 <z_abort_timeout+0x30>
				sys_clock_set_timeout(next_timeout(), false);
 800802e:	f7ff ffd2 	bl	8007fd6 <next_timeout>
 8008032:	2100      	movs	r1, #0
 8008034:	f7fb ffaa 	bl	8003f8c <sys_clock_set_timeout>
			ret = 0;
 8008038:	2000      	movs	r0, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800803a:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("isb 0xF":::"memory");
 800803e:	f3bf 8f6f 	isb	sy
}
 8008042:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
 8008044:	f06f 0015 	mvn.w	r0, #21
 8008048:	e7f7      	b.n	800803a <z_abort_timeout+0x32>

0800804a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 800804a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 800804c:	f7fd fbb2 	bl	80057b4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif /* CONFIG_TICKLESS_KERNEL */
}
 8008050:	bd08      	pop	{r3, pc}

08008052 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
 8008052:	f7fd bbaf 	b.w	80057b4 <sys_clock_tick_get>

08008056 <k_timer_init>:
	timer->status = 0U;
 8008056:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 8008058:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 800805c:	f100 0218 	add.w	r2, r0, #24
	timer->status = 0U;
 8008060:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 8008062:	6343      	str	r3, [r0, #52]	; 0x34
	list->tail = (sys_dnode_t *)list;
 8008064:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8008068:	e9c0 3300 	strd	r3, r3, [r0]
}
 800806c:	4770      	bx	lr

0800806e <z_impl_k_timer_stop>:
}
#include <zephyr/syscalls/k_timer_start_mrsh.c>
#endif /* CONFIG_USERSPACE */

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800806e:	b510      	push	{r4, lr}
 8008070:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 8008072:	f7ff ffc9 	bl	8008008 <z_abort_timeout>

	if (inactive) {
 8008076:	b9a8      	cbnz	r0, 80080a4 <z_impl_k_timer_stop+0x36>
		return;
	}

	if (timer->stop_fn != NULL) {
 8008078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800807a:	b10b      	cbz	r3, 8008080 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800807c:	4620      	mov	r0, r4
 800807e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8008080:	f104 0018 	add.w	r0, r4, #24
 8008084:	f7ff ff78 	bl	8007f78 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8008088:	b160      	cbz	r0, 80080a4 <z_impl_k_timer_stop+0x36>
			z_ready_thread(pending_thread);
 800808a:	f7ff ff34 	bl	8007ef6 <z_ready_thread>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800808e:	f3ef 8011 	mrs	r0, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8008092:	2310      	movs	r3, #16
 8008094:	f383 8812 	msr	BASEPRI_MAX, r3
  __ASM volatile ("isb 0xF":::"memory");
 8008098:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 800809c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 80080a0:	f7fd b838 	b.w	8005114 <z_reschedule_irqlock>
 80080a4:	bd10      	pop	{r4, pc}

080080a6 <memcpy>:
 80080a6:	440a      	add	r2, r1
 80080a8:	4291      	cmp	r1, r2
 80080aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80080ae:	d100      	bne.n	80080b2 <memcpy+0xc>
 80080b0:	4770      	bx	lr
 80080b2:	b510      	push	{r4, lr}
 80080b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080bc:	4291      	cmp	r1, r2
 80080be:	d1f9      	bne.n	80080b4 <memcpy+0xe>
 80080c0:	bd10      	pop	{r4, pc}

080080c2 <memset>:
 80080c2:	4402      	add	r2, r0
 80080c4:	4603      	mov	r3, r0
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d100      	bne.n	80080cc <memset+0xa>
 80080ca:	4770      	bx	lr
 80080cc:	f803 1b01 	strb.w	r1, [r3], #1
 80080d0:	e7f9      	b.n	80080c6 <memset+0x4>

080080d2 <strnlen>:
 80080d2:	b510      	push	{r4, lr}
 80080d4:	4602      	mov	r2, r0
 80080d6:	4401      	add	r1, r0
 80080d8:	428a      	cmp	r2, r1
 80080da:	4613      	mov	r3, r2
 80080dc:	d003      	beq.n	80080e6 <strnlen+0x14>
 80080de:	781c      	ldrb	r4, [r3, #0]
 80080e0:	3201      	adds	r2, #1
 80080e2:	2c00      	cmp	r4, #0
 80080e4:	d1f8      	bne.n	80080d8 <strnlen+0x6>
 80080e6:	1a18      	subs	r0, r3, r0
 80080e8:	bd10      	pop	{r4, pc}

080080ea <__ultoa_invert>:
 80080ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ee:	f1c3 0937 	rsb	r9, r3, #55	; 0x37
 80080f2:	4607      	mov	r7, r0
 80080f4:	4688      	mov	r8, r1
 80080f6:	fa5f f989 	uxtb.w	r9, r9
 80080fa:	f003 051f 	and.w	r5, r3, #31
 80080fe:	4616      	mov	r6, r2
 8008100:	f04f 0a00 	mov.w	sl, #0
 8008104:	4638      	mov	r0, r7
 8008106:	4641      	mov	r1, r8
 8008108:	462a      	mov	r2, r5
 800810a:	4653      	mov	r3, sl
 800810c:	f7f8 f8de 	bl	80002cc <__aeabi_uldivmod>
 8008110:	b2d4      	uxtb	r4, r2
 8008112:	2c09      	cmp	r4, #9
 8008114:	bf88      	it	hi
 8008116:	444c      	addhi	r4, r9
 8008118:	463a      	mov	r2, r7
 800811a:	4643      	mov	r3, r8
 800811c:	bf88      	it	hi
 800811e:	b2e4      	uxtbhi	r4, r4
 8008120:	42aa      	cmp	r2, r5
 8008122:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8008126:	eb73 030a 	sbcs.w	r3, r3, sl
 800812a:	f806 4b01 	strb.w	r4, [r6], #1
 800812e:	4607      	mov	r7, r0
 8008130:	4688      	mov	r8, r1
 8008132:	d2e7      	bcs.n	8008104 <__ultoa_invert+0x1a>
 8008134:	4630      	mov	r0, r6
 8008136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800813a <mulShiftAll64>:
 800813a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813e:	b089      	sub	sp, #36	; 0x24
 8008140:	1806      	adds	r6, r0, r0
 8008142:	4699      	mov	r9, r3
 8008144:	ab04      	add	r3, sp, #16
 8008146:	eb41 0401 	adc.w	r4, r1, r1
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4615      	mov	r5, r2
 800814e:	4630      	mov	r0, r6
 8008150:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008154:	4621      	mov	r1, r4
 8008156:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800815a:	f000 f8ab 	bl	80082b4 <__umul128>
 800815e:	ab06      	add	r3, sp, #24
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8008166:	4607      	mov	r7, r0
 8008168:	4688      	mov	r8, r1
 800816a:	4630      	mov	r0, r6
 800816c:	4621      	mov	r1, r4
 800816e:	f000 f8a1 	bl	80082b4 <__umul128>
 8008172:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
 8008176:	1984      	adds	r4, r0, r6
 8008178:	eb51 0603 	adcs.w	r6, r1, r3
 800817c:	9b06      	ldr	r3, [sp, #24]
 800817e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008182:	f04f 0200 	mov.w	r2, #0
 8008186:	bf28      	it	cs
 8008188:	2201      	movcs	r2, #1
 800818a:	18d2      	adds	r2, r2, r3
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	f143 0300 	adc.w	r3, r3, #0
 8008192:	1838      	adds	r0, r7, r0
 8008194:	eb48 0101 	adc.w	r1, r8, r1
 8008198:	42b8      	cmp	r0, r7
 800819a:	eb71 0108 	sbcs.w	r1, r1, r8
 800819e:	68e9      	ldr	r1, [r5, #12]
 80081a0:	9103      	str	r1, [sp, #12]
 80081a2:	68a9      	ldr	r1, [r5, #8]
 80081a4:	bf34      	ite	cc
 80081a6:	2001      	movcc	r0, #1
 80081a8:	2000      	movcs	r0, #0
 80081aa:	eb14 0c01 	adds.w	ip, r4, r1
 80081ae:	9903      	ldr	r1, [sp, #12]
 80081b0:	eb46 0101 	adc.w	r1, r6, r1
 80081b4:	eb10 000c 	adds.w	r0, r0, ip
 80081b8:	f141 0100 	adc.w	r1, r1, #0
 80081bc:	42a0      	cmp	r0, r4
 80081be:	eb71 0c06 	sbcs.w	ip, r1, r6
 80081c2:	bf34      	ite	cc
 80081c4:	f04f 0c01 	movcc.w	ip, #1
 80081c8:	f04f 0c00 	movcs.w	ip, #0
 80081cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081d0:	f1a9 0a41 	sub.w	sl, r9, #65	; 0x41
 80081d4:	eb1c 0202 	adds.w	r2, ip, r2
 80081d8:	f143 0300 	adc.w	r3, r3, #0
 80081dc:	f8cd a000 	str.w	sl, [sp]
 80081e0:	f000 f883 	bl	80082ea <__shiftright128>
 80081e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081e6:	e9c3 0100 	strd	r0, r1, [r3]
 80081ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081f2:	d129      	bne.n	8008248 <mulShiftAll64+0x10e>
 80081f4:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80081f8:	e9d5 c500 	ldrd	ip, r5, [r5]
 80081fc:	1a20      	subs	r0, r4, r0
 80081fe:	eb66 0101 	sbc.w	r1, r6, r1
 8008202:	4567      	cmp	r7, ip
 8008204:	eb78 0505 	sbcs.w	r5, r8, r5
 8008208:	bf34      	ite	cc
 800820a:	2501      	movcc	r5, #1
 800820c:	2500      	movcs	r5, #0
 800820e:	1b40      	subs	r0, r0, r5
 8008210:	f161 0100 	sbc.w	r1, r1, #0
 8008214:	4284      	cmp	r4, r0
 8008216:	eb76 0501 	sbcs.w	r5, r6, r1
 800821a:	bf34      	ite	cc
 800821c:	2501      	movcc	r5, #1
 800821e:	2500      	movcs	r5, #0
 8008220:	1b52      	subs	r2, r2, r5
 8008222:	f8cd a000 	str.w	sl, [sp]
 8008226:	f163 0300 	sbc.w	r3, r3, #0
 800822a:	f000 f85e 	bl	80082ea <__shiftright128>
 800822e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008232:	e9cb 0100 	strd	r0, r1, [fp]
 8008236:	f8cd a000 	str.w	sl, [sp]
 800823a:	4620      	mov	r0, r4
 800823c:	4631      	mov	r1, r6
 800823e:	f000 f854 	bl	80082ea <__shiftright128>
 8008242:	b009      	add	sp, #36	; 0x24
 8008244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008248:	eb17 0e07 	adds.w	lr, r7, r7
 800824c:	eb48 0c08 	adc.w	ip, r8, r8
 8008250:	1920      	adds	r0, r4, r4
 8008252:	eb46 0106 	adc.w	r1, r6, r6
 8008256:	45be      	cmp	lr, r7
 8008258:	eb7c 0808 	sbcs.w	r8, ip, r8
 800825c:	bf34      	ite	cc
 800825e:	2701      	movcc	r7, #1
 8008260:	2700      	movcs	r7, #0
 8008262:	19c7      	adds	r7, r0, r7
 8008264:	f141 0800 	adc.w	r8, r1, #0
 8008268:	e9d5 0100 	ldrd	r0, r1, [r5]
 800826c:	4586      	cmp	lr, r0
 800826e:	eb7c 0c01 	sbcs.w	ip, ip, r1
 8008272:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 8008276:	bf34      	ite	cc
 8008278:	2001      	movcc	r0, #1
 800827a:	2000      	movcs	r0, #0
 800827c:	1a38      	subs	r0, r7, r0
 800827e:	f168 0c00 	sbc.w	ip, r8, #0
 8008282:	1a40      	subs	r0, r0, r1
 8008284:	eb6c 0105 	sbc.w	r1, ip, r5
 8008288:	1892      	adds	r2, r2, r2
 800828a:	415b      	adcs	r3, r3
 800828c:	42a7      	cmp	r7, r4
 800828e:	eb78 0506 	sbcs.w	r5, r8, r6
 8008292:	bf34      	ite	cc
 8008294:	2501      	movcc	r5, #1
 8008296:	2500      	movcs	r5, #0
 8008298:	1952      	adds	r2, r2, r5
 800829a:	f143 0300 	adc.w	r3, r3, #0
 800829e:	4287      	cmp	r7, r0
 80082a0:	eb78 0801 	sbcs.w	r8, r8, r1
 80082a4:	bf34      	ite	cc
 80082a6:	2501      	movcc	r5, #1
 80082a8:	2500      	movcs	r5, #0
 80082aa:	1b52      	subs	r2, r2, r5
 80082ac:	f1a9 0540 	sub.w	r5, r9, #64	; 0x40
 80082b0:	9500      	str	r5, [sp, #0]
 80082b2:	e7b8      	b.n	8008226 <mulShiftAll64+0xec>

080082b4 <__umul128>:
 80082b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b6:	460f      	mov	r7, r1
 80082b8:	4604      	mov	r4, r0
 80082ba:	fba0 0102 	umull	r0, r1, r0, r2
 80082be:	fba7 5202 	umull	r5, r2, r7, r2
 80082c2:	1949      	adds	r1, r1, r5
 80082c4:	fba3 4504 	umull	r4, r5, r3, r4
 80082c8:	f142 0200 	adc.w	r2, r2, #0
 80082cc:	fba7 7303 	umull	r7, r3, r7, r3
 80082d0:	1861      	adds	r1, r4, r1
 80082d2:	f145 0400 	adc.w	r4, r5, #0
 80082d6:	19d2      	adds	r2, r2, r7
 80082d8:	9e05      	ldr	r6, [sp, #20]
 80082da:	f143 0300 	adc.w	r3, r3, #0
 80082de:	1912      	adds	r2, r2, r4
 80082e0:	f143 0300 	adc.w	r3, r3, #0
 80082e4:	e9c6 2300 	strd	r2, r3, [r6]
 80082e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082ea <__shiftright128>:
 80082ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ec:	9c05      	ldr	r4, [sp, #20]
 80082ee:	f1c4 0740 	rsb	r7, r4, #64	; 0x40
 80082f2:	f1c4 0620 	rsb	r6, r4, #32
 80082f6:	fa02 f606 	lsl.w	r6, r2, r6
 80082fa:	f1a4 0520 	sub.w	r5, r4, #32
 80082fe:	40bb      	lsls	r3, r7
 8008300:	fa22 f505 	lsr.w	r5, r2, r5
 8008304:	4333      	orrs	r3, r6
 8008306:	f1c4 0620 	rsb	r6, r4, #32
 800830a:	432b      	orrs	r3, r5
 800830c:	fa01 f606 	lsl.w	r6, r1, r6
 8008310:	f1a4 0520 	sub.w	r5, r4, #32
 8008314:	40e0      	lsrs	r0, r4
 8008316:	fa21 f505 	lsr.w	r5, r1, r5
 800831a:	4330      	orrs	r0, r6
 800831c:	40ba      	lsls	r2, r7
 800831e:	4328      	orrs	r0, r5
 8008320:	40e1      	lsrs	r1, r4
 8008322:	4310      	orrs	r0, r2
 8008324:	4319      	orrs	r1, r3
 8008326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008328 <__dtox_engine>:
 8008328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800832c:	ec57 6b10 	vmov	r6, r7, d0
 8008330:	463b      	mov	r3, r7
 8008332:	4634      	mov	r4, r6
 8008334:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8008338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800833c:	0ffe      	lsrs	r6, r7, #31
 800833e:	ea54 0c03 	orrs.w	ip, r4, r3
 8008342:	7106      	strb	r6, [r0, #4]
 8008344:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008348:	d007      	beq.n	800835a <__dtox_engine+0x32>
 800834a:	42bd      	cmp	r5, r7
 800834c:	d10c      	bne.n	8008368 <__dtox_engine+0x40>
 800834e:	f046 0608 	orr.w	r6, r6, #8
 8008352:	7106      	strb	r6, [r0, #4]
 8008354:	2000      	movs	r0, #0
 8008356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800835a:	2d00      	cmp	r5, #0
 800835c:	d063      	beq.n	8008426 <__dtox_engine+0xfe>
 800835e:	42bd      	cmp	r5, r7
 8008360:	d15e      	bne.n	8008420 <__dtox_engine+0xf8>
 8008362:	f046 0604 	orr.w	r6, r6, #4
 8008366:	e7f4      	b.n	8008352 <__dtox_engine+0x2a>
 8008368:	2d00      	cmp	r5, #0
 800836a:	d159      	bne.n	8008420 <__dtox_engine+0xf8>
 800836c:	2501      	movs	r5, #1
 800836e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008372:	2900      	cmp	r1, #0
 8008374:	6005      	str	r5, [r0, #0]
 8008376:	db59      	blt.n	800842c <__dtox_engine+0x104>
 8008378:	290c      	cmp	r1, #12
 800837a:	dc59      	bgt.n	8008430 <__dtox_engine+0x108>
 800837c:	f1c1 050d 	rsb	r5, r1, #13
 8008380:	00ad      	lsls	r5, r5, #2
 8008382:	2601      	movs	r6, #1
 8008384:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8008388:	f1a5 0c21 	sub.w	ip, r5, #33	; 0x21
 800838c:	f1c5 0721 	rsb	r7, r5, #33	; 0x21
 8008390:	fa26 f707 	lsr.w	r7, r6, r7
 8008394:	fa06 fc0c 	lsl.w	ip, r6, ip
 8008398:	fa06 f60e 	lsl.w	r6, r6, lr
 800839c:	ea4c 0c07 	orr.w	ip, ip, r7
 80083a0:	19b7      	adds	r7, r6, r6
 80083a2:	eb4c 090c 	adc.w	r9, ip, ip
 80083a6:	f1d7 0800 	rsbs	r8, r7, #0
 80083aa:	eb69 0e49 	sbc.w	lr, r9, r9, lsl #1
 80083ae:	3f01      	subs	r7, #1
 80083b0:	f149 39ff 	adc.w	r9, r9, #4294967295	; 0xffffffff
 80083b4:	4027      	ands	r7, r4
 80083b6:	ea09 0903 	and.w	r9, r9, r3
 80083ba:	42be      	cmp	r6, r7
 80083bc:	eb7c 0909 	sbcs.w	r9, ip, r9
 80083c0:	db0f      	blt.n	80083e2 <__dtox_engine+0xba>
 80083c2:	f1c5 0920 	rsb	r9, r5, #32
 80083c6:	f1b5 0720 	subs.w	r7, r5, #32
 80083ca:	fa03 f909 	lsl.w	r9, r3, r9
 80083ce:	fa24 f505 	lsr.w	r5, r4, r5
 80083d2:	ea45 0509 	orr.w	r5, r5, r9
 80083d6:	bf5c      	itt	pl
 80083d8:	fa43 f707 	asrpl.w	r7, r3, r7
 80083dc:	433d      	orrpl	r5, r7
 80083de:	07ed      	lsls	r5, r5, #31
 80083e0:	d503      	bpl.n	80083ea <__dtox_engine+0xc2>
 80083e2:	19a6      	adds	r6, r4, r6
 80083e4:	4634      	mov	r4, r6
 80083e6:	eb43 030c 	adc.w	r3, r3, ip
 80083ea:	ea04 0408 	and.w	r4, r4, r8
 80083ee:	ea03 030e 	and.w	r3, r3, lr
 80083f2:	f100 0512 	add.w	r5, r0, #18
 80083f6:	260d      	movs	r6, #13
 80083f8:	4608      	mov	r0, r1
 80083fa:	f1c2 0227 	rsb	r2, r2, #39	; 0x27
 80083fe:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008402:	f004 010f 	and.w	r1, r4, #15
 8008406:	0924      	lsrs	r4, r4, #4
 8008408:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
 800840c:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8008410:	111b      	asrs	r3, r3, #4
 8008412:	1e6f      	subs	r7, r5, #1
 8008414:	b9b1      	cbnz	r1, 8008444 <__dtox_engine+0x11c>
 8008416:	42b0      	cmp	r0, r6
 8008418:	da0c      	bge.n	8008434 <__dtox_engine+0x10c>
 800841a:	4666      	mov	r6, ip
 800841c:	463d      	mov	r5, r7
 800841e:	e7f0      	b.n	8008402 <__dtox_engine+0xda>
 8008420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008424:	e7a3      	b.n	800836e <__dtox_engine+0x46>
 8008426:	462c      	mov	r4, r5
 8008428:	462b      	mov	r3, r5
 800842a:	e7a2      	b.n	8008372 <__dtox_engine+0x4a>
 800842c:	2100      	movs	r1, #0
 800842e:	e7e0      	b.n	80083f2 <__dtox_engine+0xca>
 8008430:	210d      	movs	r1, #13
 8008432:	e7de      	b.n	80083f2 <__dtox_engine+0xca>
 8008434:	f885 e000 	strb.w	lr, [r5]
 8008438:	f11c 0101 	adds.w	r1, ip, #1
 800843c:	4666      	mov	r6, ip
 800843e:	463d      	mov	r5, r7
 8008440:	d1df      	bne.n	8008402 <__dtox_engine+0xda>
 8008442:	e788      	b.n	8008356 <__dtox_engine+0x2e>
 8008444:	2909      	cmp	r1, #9
 8008446:	bfc8      	it	gt
 8008448:	1889      	addgt	r1, r1, r2
 800844a:	3130      	adds	r1, #48	; 0x30
 800844c:	42b0      	cmp	r0, r6
 800844e:	7029      	strb	r1, [r5, #0]
 8008450:	bfb8      	it	lt
 8008452:	4630      	movlt	r0, r6
 8008454:	e7f0      	b.n	8008438 <__dtox_engine+0x110>

08008456 <__file_str_put>:
 8008456:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
 800845a:	4293      	cmp	r3, r2
 800845c:	bf1e      	ittt	ne
 800845e:	1c5a      	addne	r2, r3, #1
 8008460:	610a      	strne	r2, [r1, #16]
 8008462:	7018      	strbne	r0, [r3, #0]
 8008464:	4770      	bx	lr
	...

08008468 <__aeabi_read_tp>:
 *
 * This can only be guaranteed by either implementing a naked C function with
 * inline assembly, or plain assembly.
 */
SECTION_FUNC(TEXT, __aeabi_read_tp)
	ldr r0, =z_arm_tls_ptr
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__aeabi_read_tp+0x8>)
	ldr r0, [r0]
 800846a:	6800      	ldr	r0, [r0, #0]
	bx lr
 800846c:	4770      	bx	lr
 800846e:	0000      	.short	0x0000
	ldr r0, =z_arm_tls_ptr
 8008470:	24000e6c 	.word	0x24000e6c
